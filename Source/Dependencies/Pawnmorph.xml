<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pawnmorph</name>
    </assembly>
    <members>
        <member name="T:Pawnmorph.AnimalClassDef">
            <summary>
                def for an 'animal classification', like canid, feline, etc.
            </summary>
            <seealso cref="T:Verse.Def" />
        </member>
        <member name="F:Pawnmorph.AnimalClassDef.parent">
            <summary>
                The parent classification
            </summary>
        </member>
        <member name="P:Pawnmorph.AnimalClassDef.Children">
            <summary>
            Gets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:Pawnmorph.AnimalClassDef.Label">
            <summary>
            Gets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="M:Pawnmorph.AnimalClassDef.Contains(Pawnmorph.AnimalClassBase)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="aClass">a class.</param>
            <returns>
              <c>true</c> if contains the specified a class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Pawnmorph.AnimalClassDef.ParentClass">
            <summary>
            Gets the parent class.
            </summary>
            <value>
            The parent class.
            </value>
        </member>
        <member name="P:Pawnmorph.AnimalClassDef.SubClasses">
            <summary>
                Gets the sub classes of this classification
            </summary>
            <value>
                The sub classes.
            </value>
        </member>
        <member name="P:Pawnmorph.AnimalClassDef.Morphs">
            <summary>
                Gets the morphs that are in this classification
            </summary>
            <value>
                The morphs.
            </value>
        </member>
        <member name="P:Pawnmorph.AnimalClassDef.DirectMutations">
            <summary>
            all mutations that directly give influence for this class
            </summary>
            this does not include mutations that give influence for any of this class's children 
            <value>
            The direct mutations.
            </value>
        </member>
        <member name="M:Pawnmorph.AnimalClassDef.Contains(Pawnmorph.MorphDef)">
            <summary>
                Determines whether this instance contains the morph.
            </summary>
            <param name="morph">The morph.</param>
            <returns>
                <c>true</c> if contains the specified morph; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">morph</exception>
        </member>
        <member name="M:Pawnmorph.AnimalClassDef.Contains(Pawnmorph.AnimalClassDef)">
            <summary>
                Determines whether this instance contains the object.
            </summary>
            <param name="animalClass">The animal class.</param>
            <returns>
                <c>true</c> if contains the specified animal class; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">animalClass</exception>
        </member>
        <member name="T:Pawnmorph.AnimalClassBase">
            <summary>
            interface for both MorphDefs and AnimalClassDef
            </summary>
            this should generally not be implemented outside of these 2 defs 
        </member>
        <member name="P:Pawnmorph.AnimalClassBase.ParentClass">
            <summary>
            Gets the parent class.
            </summary>
            <value>
            The parent class.
            </value>
        </member>
        <member name="P:Pawnmorph.AnimalClassBase.Label">
            <summary>
            Gets the label.
            </summary>
            <value>
            The label.
            </value>
        </member>
        <member name="P:Pawnmorph.AnimalClassBase.Children">
            <summary>
            Gets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="M:Pawnmorph.AnimalClassBase.Contains(Pawnmorph.AnimalClassBase)">
            <summary>
            Determines whether this instance contains the given class.
            </summary>
            <param name="aClass">a class.</param>
            <returns>
              <c>true</c> if contains the specified a class; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Pawnmorph.AnimalClassDefOf">
            <summary>
                def of for animal classifications
            </summary>
        </member>
        <member name="T:Pawnmorph.AnimalClassUtilities">
            <summary>
                static container for various animal classification related utility functions
            </summary>
        </member>
        <member name="M:Pawnmorph.AnimalClassUtilities.GetAllMutationIn(Pawnmorph.AnimalClassDef)">
            <summary>
            Gets all mutation in this class 
            </summary>
            <param name="animalClass">The animal class.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">animalClass</exception>
        </member>
        <member name="M:Pawnmorph.AnimalClassUtilities.FillInfluenceDict(System.Collections.Generic.List{Pawnmorph.Hediff_AddedMutation},System.Collections.Generic.Dictionary{Pawnmorph.AnimalClassBase,System.Single})">
            <summary>
                Fills the influence dictionary.
            </summary>
            <param name="mutations">The mutations.</param>
            <param name="outDict">The out dictionary.</param>
            <exception cref="T:System.ArgumentNullException">
                mutations
                or
                outDict
            </exception>
        </member>
        <member name="M:Pawnmorph.AnimalClassUtilities.GetAllMorphsInClass(Pawnmorph.AnimalClassBase)">
            <summary>
                Gets all morphs in the given class.
            </summary>
            <param name="classDef">The class definition.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.AnimalClassUtilities.CalculateAccumulatedInfluence(System.Collections.Generic.Dictionary{Pawnmorph.AnimalClassBase,System.Single})">
            <summary>
                Calculates the accumulated influence.
            </summary>
            here we iterate over the classification tree in postorder, accumulating the influence points upward
            <param name="initialDict">The initial dictionary.</param>
        </member>
        <member name="M:Pawnmorph.AnimalClassUtilities.CalculateTrickledInfluence(System.Collections.Generic.Dictionary{Pawnmorph.AnimalClassBase,System.Single})">
            <summary>
                Calculates the trickled influence.
            </summary>
            now iterate over the classification tree in preorder, bringing down accumulated influence from parent to highest influence child 
            also fill the _pickedInfluencesCache with nodes with non zero influence and no child nodes with non zero influence
            <param name="initialDict">The initial dictionary.</param>
        </member>
        <member name="T:Pawnmorph.AnimalDrafterComp">
            <summary>
            thing comp to make animals draft-able when they have the 'former human (sapient)' hediff 
            </summary>
            <seealso cref="T:Verse.ThingComp" />
        </member>
        <member name="M:Pawnmorph.AnimalDrafterComp.Initialize(Verse.CompProperties)">
            <summary>
            called to initialize this comp
            </summary>
            <param name="props">The props.</param>
        </member>
        <member name="M:Pawnmorph.AnimalDrafterComp.CompGetGizmosExtra">
            <summary>
            add gizmos to the thing 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Aspect">
            <summary> 
            Base class for all "mutation affinities". <br />
            Affinities are things that are more global than hediffs but more temporary than traits.
            </summary>
        </member>
        <member name="F:Pawnmorph.Aspect.def">
            <summary>
            the def of this aspect 
            </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.Priority">
            <summary>
            priority of this aspect, lower priorities should show up first in the Mutation ITab
            </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.IsBad">
            <summary>
            Gets a value indicating whether this instance is bad.
            </summary>
            <value>
              <c>true</c> if this instance is bad; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.Aspect.LabelColor">
            <summary>
            the color of the label in the mutation ITab 
            </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.CapMods">
            <summary>
            all cap mods that are active on this aspect (changes when the aspect's stage changes) 
            </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.HasCapMods">
            <summary>
            if this aspect has any CapMods (may change when the aspects stage changes) 
            </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.StageIndex">
            <summary> The current stage index. </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.CurrentStage">
            <summary> The current stage. </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.Label">
            <summary>
            the label of this aspect 
            </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.Description">
            <summary> The description of the aspect, taking into account it's current stage </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.Pawn">
            <summary> The pawn this is attached to. </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.ShouldRemove">
            <summary> If this affinity should be removed or not. </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.NullifiedThoughts">
            <summary>
            Gets all thoughts nullified by this aspect.
            </summary>
            <value>
            The nullified thoughts.
            </value>
        </member>
        <member name="P:Pawnmorph.Aspect.Stages">
            <summary>
            list of all stages in this Aspect 
            </summary>
        </member>
        <member name="P:Pawnmorph.Aspect.SkillMods">
            <summary>
            all skillMods that are active for this aspect 
            </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.GetBoostOffset(Verse.Hediff)">
            <summary>
            get the offset to the hediff's severity 
            </summary>
            <param name="hediff"></param>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.Aspect.ProductionBoosts">
            <summary> The production boosts of the current stage. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.GetBoostOffset(Verse.HediffDef)">
            <summary> Get the production boost for the given mutation hediff. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.Added(Verse.Pawn,System.Int32)">
            <summary> Called after this affinity is added to the pawn. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.Initialize">
            <summary> Called during startup to initialize all affinities. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.PostDeSpawn">
            <summary> Called after the pawn is despawned. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.PostTransfer(Pawnmorph.Aspect)">
            <summary> Called after transfer to/from animal </summary>
            <param name="newAspect">Aspect on destination pawn</param>
        </member>
        <member name="M:Pawnmorph.Aspect.PostRaceChange(Verse.ThingDef)">
            <summary> Called when the pawn's race changes. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.PostRemove">
            <summary> Called after this affinity is removed from the pawn. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.PostSpawnSetup(System.Boolean)">
            <summary> Called after the pawn is spawned. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.PostTick">
            <summary> Called every tick. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.StageToRemove">
            <summary> Call to set ShouldRemove to true. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.ExposeData">
            <summary> Called during IExposable's ExposeData to serialize data. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.PostAdd">
            <summary> Called after this instance is added to the pawn. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.PostInit">
            <summary> Called after the base instance is initialize. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.PostStageChanged(System.Int32)">
            <summary>
            called after this aspect stage changes 
            </summary>
            <param name="lastStage"></param>
        </member>
        <member name="P:Pawnmorph.Aspect.StatOffsets">
            <summary>
            an enumerable collection of all stat modifiers currently active for this stage 
            </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.Start">
            <summary> Called once during the startup of this instance, either after initialization or after being added to the pawn. </summary>
        </member>
        <member name="M:Pawnmorph.Aspect.UndoEffectsOfStage(Pawnmorph.AspectStage)">
            <summary>
            called when the effects of the given stage must be undone 
            </summary>
            <param name="lastStage"></param>
        </member>
        <member name="M:Pawnmorph.Aspect.TipString(Verse.Pawn)">
            <summary>
            generate a tip string for this aspect to be displayed in the mutation ITab 
            </summary>
            <param name="pawn"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.AspectCapacityImpactor">
            <summary>
            capacity impactor for aspects 
            </summary>
        </member>
        <member name="M:Pawnmorph.AspectCapacityImpactor.#ctor(Pawnmorph.Aspect)">
            <summary>
            create a new aspect impactor instance 
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="P:Pawnmorph.AspectCapacityImpactor.Aspect">
            <summary>
            the aspect that is impacting the pawn 
            </summary>
        </member>
        <member name="P:Pawnmorph.AspectCapacityImpactor.IsDirect">
            <summary>
            if this impactor is direct or not 
            </summary>
        </member>
        <member name="M:Pawnmorph.AspectCapacityImpactor.Readable(Verse.Pawn)">
            <summary>
            return a string describing what is impacting the capacity of the pawn 
            </summary>
            <param name="pawn"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.AspectDef">
            <summary> Def for all affinities. </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.aspectType">
            <summary>
                the Type of the aspect
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.stages">
            <summary>
                the aspect stages, must be at least one
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.labelColor">
            <summary>
                the color of the aspect's label
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.removedByReverter">
            <summary>
                if this aspect should be removed by a reverter or not
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.priority">
            <summary>
                the priority of this aspect
                lower priorities come first
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.transferToAnimal">
            <summary>
                if true, this aspect should be transferred to the new animal pawn if the original pawn has this aspect
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.nullifiedThoughts">
            <summary>
                list of thoughts this aspect nullifies
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.conflictingAspects">
            <summary>
                The conflicting aspects
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.requiredTraits">
            <summary>
                The required traits
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectDef.conflictingTraits">
            <summary>
                The conflicting traits
            </summary>
        </member>
        <member name="M:Pawnmorph.AspectDef.ConfigErrors">
            <summary>
                get all configuration errors with this def
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.AspectDef.CreateInstance">
            <summary>
                create a new aspect instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.AspectDef.Named(System.String)">
            <summary> Get the affinity def with the given defName. </summary>
        </member>
        <member name="M:Pawnmorph.AspectDef.ResolveReferences">
            <summary>
                resolve all def references in this def, called after DefOfs are loaded
            </summary>
        </member>
        <member name="T:Pawnmorph.AspectDefOf">
            <summary> DefOf class for commonly referenced Aspects. </summary>
        </member>
        <member name="F:Pawnmorph.AspectDefOf.EtherState">
            <summary>
            aspect that represents the pawns 'EtherState'
            </summary>
        </member>
        <member name="T:Pawnmorph.AspectGiver">
            <summary>
            base class for all 'aspect givers'
            </summary>
        </member>
        <member name="P:Pawnmorph.AspectGiver.AvailableAspects">
            <summary>
            Gets the aspects available to be given to pawns.
            </summary>
            <value>
            The available aspects.
            </value>
        </member>
        <member name="M:Pawnmorph.AspectGiver.TryGiveAspects(Verse.Pawn,System.Collections.Generic.List{Pawnmorph.Aspect})">
            <summary>
            Tries to give aspects to the given pawn 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="outList">if not null, all given aspects will be placed into the list</param>
            <returns>if any aspects were successfully given to the pawn</returns>
        </member>
        <member name="M:Pawnmorph.AspectGiver.ApplyAspect(Verse.Pawn,Pawnmorph.AspectDef,System.Int32,System.Collections.Generic.List{Pawnmorph.Aspect})">
            <summary>
            Applies the aspect to the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="aspect">The aspect.</param>
            <param name="stageIndex">Index of the stage.</param>
            <param name="outLst">The out LST.</param>
            <returns>
            if the aspect was successfully added or not
            </returns>
        </member>
        <member name="M:Pawnmorph.AspectGiver.ConfigErrors">
            <summary>
            get all configuration errors with this instance 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.AspectGiver.HasConflictingAspect(Pawnmorph.AspectTracker,Pawnmorph.AspectDef)">
            <summary>
            Determines whether the specified tracker has a conflicting aspect.
            </summary>
            <param name="tracker">The tracker.</param>
            <param name="testAspect">The test aspect.</param>
            <returns>
              <c>true</c> if the specified tracker has conflicting aspect ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.AspectGiver.CheckPawnTraits(RimWorld.TraitSet,Pawnmorph.AspectDef)">
            <summary>
            Checks if the pawn has any traits that block the given aspect
            </summary>
            <param name="traitSet">The trait set.</param>
            <param name="testAspect">The test aspect.</param>
            <returns>if given trait set is valid for the given aspect</returns>
        </member>
        <member name="T:Pawnmorph.AspectStage">
            <summary> Class representing a single stage of a mutation 'aspect'. </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.label">
            <summary>
            the label of the stage 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.modifier">
            <summary>
            prefix to add to the aspects label 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.description">
            <summary>
            the description of the aspect at this stage 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.mentalBreakMtbDays">
            <summary>
            how often the mental state givers give breaks 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.labelColor">
            <summary>
            optional override to the aspects label color 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.isBad">
            <summary>
            if an aspect at this stage should be considered 'bad'
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.messageText">
            <summary>
            text displayed in a message when a pawn is given this aspect 
            </summary>
            this is adjusted for [PAWN_nameDef] kinds of substitution 
        </member>
        <member name="F:Pawnmorph.AspectStage.messageDef">
            <summary>
            The message definition, if null NeutralEvent is used 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.nullifiedThoughts">
            <summary>
            list of thoughts this aspect stage nullifies 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.capMods">
            <summary>
            all capacity modifiers that will be active during this stage 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.skillMods">
            <summary>
            all skill modifiers that will be active during this stage 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.statOffsets">
            <summary>
            all stat offsets that will be active during this stage 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.mentalStateGivers">
            <summary>
            all mental states that can be given by the aspect in this stage 
            </summary>
        </member>
        <member name="F:Pawnmorph.AspectStage.productionBoosts">
            <summary>
            all production boosts an aspect gives in this stage 
            </summary>
        </member>
        <member name="T:Pawnmorph.Aspects.ColorationAspect">
            <summary>
            Aspect that applies non-standard skin/hair coloration to the pawn.
            </summary>
        </member>
        <member name="P:Pawnmorph.Aspects.ColorationAspect.ColorSet">
            <summary> Color set assigned to this instance </summary>
        </member>
        <member name="P:Pawnmorph.Aspects.ColorationAspect.IsFullOverride">
            <summary> True if color should apply at 100% regardless of current putation percentage, false otherwise </summary>
        </member>
        <member name="M:Pawnmorph.Aspects.ColorationAspect.ExposeData">
            <inheritdoc />
        </member>
        <member name="M:Pawnmorph.Aspects.ColorationAspect.RemoveOthers">
            <summary>
            Remove other ColorationAspects from parent pawn
            </summary>
        </member>
        <member name="M:Pawnmorph.Aspects.ColorationAspect.PostTransfer(Pawnmorph.Aspect)">
            <inheritdoc />
        </member>
        <member name="M:Pawnmorph.Aspects.ColorationAspect.PostAdd">
            <inheritdoc />
        </member>
        <member name="M:Pawnmorph.Aspects.ColorationAspect.PostRemove">
            <inheritdoc />
        </member>
        <member name="M:Pawnmorph.Aspects.ColorationAspect.UpdatePawn">
            <summary>
            Update parent pawn's coloration via standard channels.
            </summary>
        </member>
        <member name="M:Pawnmorph.Aspects.ColorationAspect.TryDirectRecolorAnimal(Verse.PawnGraphicSet)">
            <summary>
            Apply this coloration to a pawn directly.
            </summary>
            <param name="graphics">Pawn's graphics set</param>
        </member>
        <member name="M:Pawnmorph.Aspects.ColorationAspect.GenerateColorSet">
            <summary>
            Generate color set using generators based on this instance's aspectDef
            </summary>
        </member>
        <member name="M:Pawnmorph.Aspects.ColorationAspect.TryGenerateColorationAspectColor(Pawnmorph.SimplePawnColorSet.PawnColorSlot)">
            <summary>
            Generate a color using base Rand generator and the slot-appropriate color generator
            </summary>
            <param name="colorSlot">Color slot</param>
            <returns>Generated color, or null if base color should be used</returns>
        </member>
        <member name="T:Pawnmorph.Aspects.ColorationAspectDefOfs">
            <summary>
            Helper clas for ColorationAspect defs
            </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.ColorationAspectDefOfs.ColorationNatural">
            <summary> Mild, natural colors </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.ColorationAspectDefOfs.ColorationAlbinism">
            <summary> Albinism </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.ColorationAspectDefOfs.ColorationMelanism">
            <summary> Melanism </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.ColorationAspectDefOfs.ColorationUnnatural">
            <summary> High-contrast, saturated colors </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.ColorationAspectDefOfs.ColorationPlayerPicked">
            <summary> Colors picked by player </summary>
        </member>
        <member name="T:Pawnmorph.Aspects.MeatLover">
            <summary>
            controller for the meat lover aspect 
            </summary>
            <seealso cref="T:Pawnmorph.Aspect" />
            <seealso cref="T:Pawnmorph.Thoughts.IFoodThoughtModifier" />
        </member>
        <member name="M:Pawnmorph.Aspects.MeatLover.ModifyThoughtsFromFood(Verse.Thing,System.Collections.Generic.List{RimWorld.ThoughtDef})">
            <summary>
            Modifies the thoughts from food.
            </summary>
            <param name="food">The food.</param>
            <param name="thoughts">The list of thoughts already added</param>
        </member>
        <member name="T:Pawnmorph.Aspects.PrimalWishGiver">
            <summary>
            aspect giver for the primal wish giver 
            </summary>
            <seealso cref="T:Pawnmorph.AspectGiver" />
        </member>
        <member name="P:Pawnmorph.Aspects.PrimalWishGiver.AvailableAspects">
            <summary>
                Gets the aspects available to be given to pawns.
            </summary>
            <value>
                The available aspects.
            </value>
        </member>
        <member name="F:Pawnmorph.Aspects.PrimalWishGiver.normalChance">
            <summary>
            The normal chance to give the primal wish aspect 
            </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.PrimalWishGiver.mutationAffinityChance">
            <summary>
            the chance for mutation affinity pawns to get the aspect 
            </summary>
        </member>
        <member name="M:Pawnmorph.Aspects.PrimalWishGiver.TryGiveAspects(Verse.Pawn,System.Collections.Generic.List{Pawnmorph.Aspect})">
            <summary>
            Tries to give aspects to the given pawn 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="outList">if not null, all given aspects will be placed into the list</param>
            <returns>if any aspects were successfully given to the pawn</returns>
        </member>
        <member name="T:Pawnmorph.Aspects.RandomGiver">
            <summary>
                a aspect giver that gives random aspects
            </summary>
            <seealso cref="T:Pawnmorph.AspectGiver" />
        </member>
        <member name="F:Pawnmorph.Aspects.RandomGiver.entries">
            <summary>
                The entries
            </summary>
        </member>
        <member name="P:Pawnmorph.Aspects.RandomGiver.AvailableAspects">
            <summary>
                Gets the aspects available to be given to pawns.
            </summary>
            <value>
                The available aspects.
            </value>
        </member>
        <member name="M:Pawnmorph.Aspects.RandomGiver.ConfigErrors">
            <summary>
                get all configuration errors with this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Aspects.RandomGiver.TryGiveAspects(Verse.Pawn,System.Collections.Generic.List{Pawnmorph.Aspect})">
            <summary>
                Tries to give aspects to the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="outList">if not null, all given aspects will be placed into the list</param>
            <returns>if any aspects were successfully given to the pawn</returns>
        </member>
        <member name="M:Pawnmorph.Aspects.RandomGiver.GiveOneAspect(Verse.Pawn)">
            <summary>
                Tries to give a single aspect to the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>the aspect if any was successfully given to the pawn</returns>
        </member>
        <member name="T:Pawnmorph.Aspects.RandomGiver.Entry">
            <summary>
                simple class for storing individual entries in the giver
            </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.RandomGiver.Entry.aspect">
            <summary>
                The aspect to give
            </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.RandomGiver.Entry.chance">
            <summary>
                The percent chance to give the aspect
            </summary>
            note 1 / percent is the expected number of mutations needed before the aspect is added
        </member>
        <member name="F:Pawnmorph.Aspects.RandomGiver.Entry.aspectStage">
            <summary>
                The aspect stage
            </summary>
        </member>
        <member name="T:Pawnmorph.Aspects.SapienceHit">
            <summary>
            aspect that affects sapience in a negative way 
            </summary>
            <seealso cref="T:Pawnmorph.Aspect" />
        </member>
        <member name="M:Pawnmorph.Aspects.SapienceHit.PostAdd">
            <summary> Called after this instance is added to the pawn. </summary>
        </member>
        <member name="M:Pawnmorph.Aspects.SapienceHit.PostInit">
            <summary> Called after the base instance is initialize. </summary>
        </member>
        <member name="T:Pawnmorph.Aspects.SkillBasedGiver">
            <summary>
             aspect giver that only gives an aspect when a skill is above a certain threshold 
            </summary>
            <seealso cref="T:Pawnmorph.AspectGiver" />
        </member>
        <member name="P:Pawnmorph.Aspects.SkillBasedGiver.AvailableAspects">
            <summary>
            Gets the aspects available to be given to pawns.
            </summary>
            <value>
            The available aspects.
            </value>
        </member>
        <member name="M:Pawnmorph.Aspects.SkillBasedGiver.TryGiveAspects(Verse.Pawn,System.Collections.Generic.List{Pawnmorph.Aspect})">
            <summary>
            Tries to give aspects to the given pawn 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="outList">if not null, all given aspects will be placed into the list</param>
            <returns>if any aspects were successfully given to the pawn</returns>
        </member>
        <member name="F:Pawnmorph.Aspects.SkillBasedGiver.aspect">
            <summary>
            The aspect def to give 
            </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.SkillBasedGiver.chance">
            <summary>
            The chance to give the aspect when above the given skill threshold
            should be between 0-1 
            </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.SkillBasedGiver.stageIndex">
            <summary>
            The stage index
            </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.SkillBasedGiver.skillDef">
            <summary>
            The skill definition
            </summary>
        </member>
        <member name="F:Pawnmorph.Aspects.SkillBasedGiver.skillThreshold">
            <summary>
            The skill threshold, the pawn's skill must be above this to give the aspect 
            </summary>
        </member>
        <member name="M:Pawnmorph.Aspects.SkillBasedGiver.ConfigErrors">
            <summary>
            get all configuration errors with this giver 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Aspects.SplitMind">
            <summary>
            aspect for the giving merged pawns a 'split mind'
            </summary>
            <seealso cref="T:Pawnmorph.Aspect" />
        </member>
        <member name="M:Pawnmorph.Aspects.SplitMind.PostTick">
            <summary> Called every tick. </summary>
        </member>
        <member name="T:Pawnmorph.AspectTracker">
            <summary> Thing comp for tracking 'mutation aspects'. </summary>
        </member>
        <member name="T:Pawnmorph.AspectTracker.AspectAddedHandle">
            <summary>
                delegate for the <see cref="E:Pawnmorph.AspectTracker.AspectAdded" /> event
            </summary>
            <param name="sender">The sender.</param>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="T:Pawnmorph.AspectTracker.AspectRemovedHandle">
            <summary>
                delegate for the <see cref="E:Pawnmorph.AspectTracker.AspectRemoved" /> event
            </summary>
            <param name="sender">The sender.</param>
            <param name="aspect">The aspect.</param>
        </member>
        <member name="E:Pawnmorph.AspectTracker.AspectAdded">
            <summary>
                Occurs when an aspect is added
            </summary>
        </member>
        <member name="E:Pawnmorph.AspectTracker.AspectRemoved">
            <summary>
                Occurs when when an aspect is removed
            </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.System#Collections#IEnumerable#GetEnumerator">
            <summary> Returns an enumerator that iterates through a collection. </summary>
            <returns> An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection. </returns>
        </member>
        <member name="M:Pawnmorph.AspectTracker.GetEnumerator">
            <summary> Returns an enumerator that iterates through the collection. </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="P:Pawnmorph.AspectTracker.AspectCount">
            <summary>
                gets the total number of aspects this pawn has.
            </summary>
            <value>
                The aspect count.
            </value>
        </member>
        <member name="P:Pawnmorph.AspectTracker.Aspects">
            <summary>
                an enumerable collection of all aspects in this instance
            </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.Add(Pawnmorph.Aspect,System.Int32)">
            <summary> Add the aspect to this pawn at the given stage. </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.Add(Pawnmorph.AspectDef,System.Int32)">
            <summary> Add the given aspect to this pawn at the specified stage index. </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.CompTick">
            <summary>
                called every tick after it's parent is updated
            </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.Contains(Pawnmorph.Aspect)">
            <summary>
                if this tracker contains the given aspect
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.AspectTracker.Contains(Pawnmorph.AspectDef)">
            <summary>
                if this tracker contains an aspect with the given def
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.AspectTracker.Contains(Pawnmorph.AspectDef,System.Int32)">
            <summary>
                Determines whether this instance contains the given aspect at the given stage.
            </summary>
            <param name="aspectDef">The aspect definition.</param>
            <param name="stage">The stage.</param>
            <returns>
                <c>true</c> if this instance contains the specified aspect at the given stage; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.AspectTracker.GetAspect(Pawnmorph.AspectDef)">
            <summary> Get the aspect in this tracker of the given def, if one exists. </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.Initialize(Verse.CompProperties)">
            <summary>
                initializes this instance (Note: other comps may or may not be initialized themselves)
            </summary>
            <param name="props"></param>
        </member>
        <member name="M:Pawnmorph.AspectTracker.Notify_AspectChanged(Pawnmorph.Aspect)">
            <summary>
                notify this tracker that the given aspect has changed in some way
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="M:Pawnmorph.AspectTracker.PostExposeData">
            <summary>
                save or load
            </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.Remove(Pawnmorph.Aspect)">
            <summary>
                queue the given aspect to be removed from this tracker
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="M:Pawnmorph.AspectTracker.Remove(Pawnmorph.AspectDef)">
            <summary> Removes the aspect with the given def from the pawn. </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.HandleMorphChangeAffinities(Pawnmorph.MorphDef,Pawnmorph.MorphDef)">
            <summary> Handle affinities that need to be removed or added after a pawn changes race. </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.GetAspect``1">
            <summary> Get the aspect in this tracker of the given type, if one exists. </summary>
        </member>
        <member name="M:Pawnmorph.AspectTracker.AspectComparer.Compare(Pawnmorph.Aspect,Pawnmorph.Aspect)">
            <summary>
                Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the
                other.
            </summary>
            <returns>
                Value Condition Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero
                <paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than
                <paramref name="y" />.
            </returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="T:Pawnmorph.AspectUtils">
            <summary>
            a collection of aspect related utilities 
            </summary>
        </member>
        <member name="M:Pawnmorph.AspectUtils.GetAspectTracker(Verse.Pawn)">
            <summary>
            get the aspect tracker from this pawn 
            </summary>
            <param name="pawn"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.AspectUtils.GetProductionBoost(System.Collections.Generic.IEnumerable{Pawnmorph.Aspect},Verse.HediffDef)">
            <summary> Get the total production multiplier for the given mutation. </summary>
        </member>
        <member name="M:Pawnmorph.AspectUtils.TryApplyAspectsFrom(Verse.HediffDef,Verse.Pawn)">
            <summary>
            Tries the apply aspects from this instance 
            </summary>
            <param name="morphDef">The morph hediff definition. this should be a 'transformative' hediff like 'wolfmorph', but in theory any hediffDef will do</param>
            <param name="pawn">The pawn.</param>
        </member>
        <member name="M:Pawnmorph.AspectUtils.TryApplyAspectsFrom(Pawnmorph.MutagenDef,Verse.Pawn)">
            <summary>
            Tries the apply aspects from this instance 
            </summary>
            <param name="mutagen">The mutagen.</param>
            <param name="pawn">The pawn.</param>
            <exception cref="T:System.ArgumentNullException">
            mutagen
            or
            pawn
            </exception>
        </member>
        <member name="M:Pawnmorph.AspectUtils.CanReceiveRareMutations(Verse.Pawn)">
            <summary>
            Determines whether this instance can receive rare mutations 
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this instance can receive rare mutations  otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.AspectUtils.CanGrowMutagenicPlants(Verse.Pawn)">
            <summary>
            Determines whether this instance can grow mutagenic plants.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this instance can grow mutagenic plants; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.BodyUtilities">
            <summary>
            a collection of various body related utilities 
            </summary>
        </member>
        <member name="M:Pawnmorph.BodyUtilities.GetAddress(Verse.BodyPartRecord)">
            <summary>
                Gets the part address for this body part record.
            </summary>
            <param name="record">The record.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">record</exception>
        </member>
        <member name="M:Pawnmorph.BodyUtilities.GetRecordAt(Verse.BodyDef,Pawnmorph.PartAddress)">
            <summary>
                Gets the body part record at the given part address
            </summary>
            <param name="bodyDef">The body definition.</param>
            <param name="address">The address.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                bodyDef
                or
                address
            </exception>
        </member>
        <member name="M:Pawnmorph.BodyUtilities.GetAllNonMissingParts(Verse.Pawn,System.Collections.Generic.IEnumerable{Verse.BodyPartDef})">
            <summary>
            Gets all non missing parts of the given part defs 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="partDefs">The part defs.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.BodyUtilities.GetAllNonMissingParts(Verse.Pawn)">
            <summary>
            Gets all non missing parts on this pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.BodyUtilities.GetAllNonMissingParts(Verse.Pawn,System.Collections.Generic.IReadOnlyList{Verse.BodyPartDef})">
            <summary>
            Gets all non missing parts of the given part defs 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="partDefs">The part defs.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.BuildingDefOf">
            <summary>
            def of for frequently accessed building thingDefs 
            </summary>
        </member>
        <member name="T:Pawnmorph.Buildings.MutaniteCentrifuge">
            <summary>
                building class for the mutanite centrifuge
            </summary>
            <seealso cref="T:Verse.Building" />
        </member>
        <member name="T:Pawnmorph.Buildings.MutaniteCentrifuge.RunningMode">
            <summary>
                the running mode of the centrifuge
            </summary>
        </member>
        <member name="F:Pawnmorph.Buildings.MutaniteCentrifuge.RunningMode.Normal">
            <summary>
                normal production
            </summary>
        </member>
        <member name="F:Pawnmorph.Buildings.MutaniteCentrifuge.RunningMode.HighYield">
            <summary>
                more efficient production at a cost of mutagenic buildup
            </summary>
        </member>
        <member name="P:Pawnmorph.Buildings.MutaniteCentrifuge.CurrentMode">
            <summary>
                Gets or sets the current mode.
            </summary>
            <value>
                The current mode.
            </value>
        </member>
        <member name="P:Pawnmorph.Buildings.MutaniteCentrifuge.Enabled">
            <summary>
                Gets a value indicating whether this <see cref="T:Pawnmorph.Buildings.MutaniteCentrifuge" /> is enabled.
            </summary>
            <value>
                <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.Buildings.MutaniteCentrifuge.AdjCellsCardinalInBounds">
            <summary>
                Gets the adjacent cells cardinal in bounds.
            </summary>
            <value>
                The adjacent cells cardinal in bounds.
            </value>
        </member>
        <member name="M:Pawnmorph.Buildings.MutaniteCentrifuge.ExposeData">
            <summary>
                Exposes the data.
            </summary>
        </member>
        <member name="M:Pawnmorph.Buildings.MutaniteCentrifuge.GetGizmos">
            <summary>
            Gets the gizmos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Buildings.MutaniteCentrifuge.SpawnSetup(Verse.Map,System.Boolean)">
            <summary>
            set up the object on spawn
            </summary>
            <param name="map">The map.</param>
            <param name="respawningAfterLoad">if set to <c>true</c> [respawning after load].</param>
        </member>
        <member name="M:Pawnmorph.Buildings.MutaniteCentrifuge.Tick">
            <summary>
                called every tick
            </summary>
        </member>
        <member name="M:Pawnmorph.Buildings.MutaniteCentrifuge.GetInspectString">
            <summary>
            Gets the inspect string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Chambers.ChamberJobDefOf">
            <summary>
            def of for jobs related to mutagenic chambers 
            </summary>
        </member>
        <member name="T:Pawnmorph.Chambers.ChamberState">
            <summary>
                enum for the different states a mutagenic chamber can be in
            </summary>
        </member>
        <member name="F:Pawnmorph.Chambers.ChamberState.Idle">
            <summary>
                the chamber isn't doing anything
            </summary>
        </member>
        <member name="F:Pawnmorph.Chambers.ChamberState.Transforming">
            <summary>turning a pawn into an animal</summary>
        </member>
        <member name="F:Pawnmorph.Chambers.ChamberState.MergeInto">
            <summary>pawns are being merged in this chamber </summary>
        </member>
        <member name="F:Pawnmorph.Chambers.ChamberState.MergeOutOf">
            <summary>the pawn is being merged into a different chamber </summary>
        </member>
        <member name="T:Pawnmorph.Chambers.DatabaseUtilities">
            <summary>
            static class for various chamber database utility functions 
            </summary>
        </member>
        <member name="M:Pawnmorph.Chambers.DatabaseUtilities.IsValidAnimal(Verse.ThingDef)">
            <summary>
            Determines whether this instance is the def of an animal that can be added to the chamber database
            </summary>
            <param name="inst">The inst.</param>
            <returns>
              <c>true</c> if this instance can be added to the chamber database ; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">inst</exception>
        </member>
        <member name="M:Pawnmorph.Chambers.DatabaseUtilities.IsChao(Verse.ThingDef)">
            <summary>
            Determines whether the specified definition for a chaomorph.
            </summary>
            <param name="def">The definition.</param>
            <returns>
              <c>true</c> if the specified definition is a chaomorph; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Pawnmorph.Chambers.ThingComp_ModulatorOptions">
            <summary>
            comp representing the mutation chamber modulator options 
            </summary>
            <seealso cref="T:Verse.ThingComp" />
        </member>
        <member name="T:Pawnmorph.Chambers.ThingCompProperties_ModulatorOptions">
            <summary>
            property for the mutagen chamber to get it's default set animal options 
            </summary>
            <seealso cref="T:Verse.CompProperties" />
        </member>
        <member name="F:Pawnmorph.Chambers.ThingCompProperties_ModulatorOptions.defaultAnimals">
            <summary>The default animals to be available without having to tag them</summary>
        </member>
        <member name="F:Pawnmorph.Chambers.ThingCompProperties_ModulatorOptions.merges">
            <summary>The merges that this modulator can create</summary>
        </member>
        <member name="M:Pawnmorph.Chambers.ThingCompProperties_ModulatorOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.Chambers.ThingCompProperties_ModulatorOptions"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.ColorGenerator_HSV">
            <summary>
            Color generator that generates colors in a given Hue-Saturation-Value range
            </summary>
        </member>
        <member name="F:Pawnmorph.ColorGenerator_HSV.HueRange">
            <summary> Hue range </summary>
        </member>
        <member name="F:Pawnmorph.ColorGenerator_HSV.SatuationRange">
            <summary> Saturation range </summary>
        </member>
        <member name="F:Pawnmorph.ColorGenerator_HSV.ValueRange">
            <summary> Value range </summary>
        </member>
        <member name="M:Pawnmorph.ColorGenerator_HSV.#ctor">
            <summary> Constructor </summary>
        </member>
        <member name="M:Pawnmorph.ColorGenerator_HSV.#ctor(Verse.FloatRange,Verse.FloatRange,Verse.FloatRange)">
            <summary> Constructor </summary>
        </member>
        <member name="M:Pawnmorph.ColorGenerator_HSV.NewRandomizedColor">
            <inheritdoc/>
        </member>
        <member name="T:Pawnmorph.CompMutagenicRadius">
            <summary>
            comp for mutating things within a radius 
            </summary>
        </member>
        <member name="M:Pawnmorph.CompMutagenicRadius.PostExposeData">
            <summary>
            call to save/load data 
            </summary>
        </member>
        <member name="M:Pawnmorph.CompMutagenicRadius.CompTick">
            <summary>
            called every tick after it's parent updates 
            </summary>
        </member>
        <member name="T:Pawnmorph.CompProperties_TfResurrect">
            <summary>
                properties for the Tf Resurrect effect
            </summary>
            <seealso cref="T:Verse.CompProperties" />
        </member>
        <member name="F:Pawnmorph.CompProperties_TfResurrect.makePermanentlyFeral">
            <summary>
                if true, the resurrector will always make the resultant animal permanently feral
            </summary>
        </member>
        <member name="F:Pawnmorph.CompProperties_TfResurrect.animalFilter">
            <summary>
                an optional filter to restrict the kinds of animals the resurrector will turn dead pawns into
            </summary>
        </member>
        <member name="F:Pawnmorph.CompProperties_TfResurrect.genderTf">
            <summary>
                The gender tf options for the resurrector
            </summary>
        </member>
        <member name="F:Pawnmorph.CompProperties_TfResurrect.taleDef">
            <summary>
                The tale definition to add to the tale database when the pawn is resurrected
            </summary>
        </member>
        <member name="M:Pawnmorph.CompProperties_TfResurrect.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.CompProperties_TfResurrect" /> class.
            </summary>
        </member>
        <member name="P:Pawnmorph.CompProperties_TfResurrect.Animals">
            <summary>
                list of animals that the pawn can be transformed into
            </summary>
        </member>
        <member name="M:Pawnmorph.CompProperties_TfResurrect.ConfigErrors(Verse.ThingDef)">
            <summary>
                gets all configuration errors with this instance
            </summary>
            <param name="parentDef">The parent definition.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.CompProps_MutagenicFixWorstCondition">
            <summary>
            properties for the MutagenicFixWorstCondition comp 
            </summary>
            <seealso cref="T:Verse.CompProperties" />
        </member>
        <member name="M:Pawnmorph.CompProps_MutagenicFixWorstCondition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.CompProps_MutagenicFixWorstCondition"/> class.
            </summary>
        </member>
        <member name="M:Pawnmorph.CompProperties_TransformableCorpse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.CompProperties_TransformableCorpse"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.CompTargetEffect_TfResurrect">
            <summary>
                resurrector effect that will turn the pawn into an animal
            </summary>
            <seealso cref="T:RimWorld.CompTargetEffect" />
        </member>
        <member name="M:Pawnmorph.CompTargetEffect_TfResurrect.DoEffectOn(Verse.Pawn,Verse.Thing)">
            <summary>
                Does the effect on.
            </summary>
            <param name="user">The user.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:Pawnmorph.Comp_MutagenicFixWorstCondition">
            <summary>
            comp that heals the worst condition, and adds a random mutation if the condition healed is either a missing body part or permanent injury 
            </summary>
            <seealso cref="T:RimWorld.CompUseEffect" />
        </member>
        <member name="P:Pawnmorph.Comp_MutagenicFixWorstCondition.Props">
            <summary>
            Gets the props.
            </summary>
            <value>
            The props.
            </value>
            <exception cref="T:System.InvalidCastException">unable to convert compProps {props.GetType().Name} to {nameof(CompProps_MutagenicFixWorstCondition)}</exception>
        </member>
        <member name="M:Pawnmorph.Comp_MutagenicFixWorstCondition.DoEffect(Verse.Pawn)">
            <summary>
            Does the effect.
            </summary>
            <param name="usedBy">the pawn that used this instance</param>
        </member>
        <member name="M:Pawnmorph.Comp_MutagenicFixWorstCondition.AddMutationToPart(Verse.BodyPartRecord,Verse.Pawn,Pawnmorph.AnimalClassBase,System.Boolean,Pawnmorph.MutagenDef)">
            <summary> Add mutations to the given part. </summary>
        </member>
        <member name="T:Pawnmorph.Comp_MutaniteBed">
            <summary>
            comp for the mutanite bed 
            </summary>
            <seealso cref="T:Verse.ThingComp" />
        </member>
        <member name="M:Pawnmorph.Comp_MutaniteBed.PostSpawnSetup(System.Boolean)">
            <summary>
            called when the parent is spawned 
            </summary>
            <param name="respawningAfterLoad">if set to <c>true</c> [respawning after load].</param>
        </member>
        <member name="M:Pawnmorph.Comp_MutaniteBed.TickLong">
            <summary>called every 2000 ticks</summary>
        </member>
        <member name="T:Pawnmorph.Comp_PlayerPickedRecoloration">
            <summary>
            Thing comp that applies a ColorationAspect with dialog-chosen colors
            </summary>
        </member>
        <member name="M:Pawnmorph.Comp_PlayerPickedRecoloration.DoEffect(Verse.Pawn)">
            <summary>
            Apply effect on use
            </summary>
            <param name="usedBy">Pawn using parent thing</param>
        </member>
        <member name="T:Pawnmorph.Comp_SapientAnimal">
            <summary>
                component for controlling instinct and mental breaks of sapient animals
            </summary>
            <seealso cref="T:Verse.ThingComp" />
        </member>
        <member name="P:Pawnmorph.Comp_SapientAnimal.MentalBreaker">
            <summary>
                Gets the mental breaker.
            </summary>
            <value>
                The mental breaker.
            </value>
        </member>
        <member name="P:Pawnmorph.Comp_SapientAnimal.InstinctLevel">
            <summary>
                Gets or sets the 'instinct level'.
            </summary>
            <value>
                the instinct level
            </value>
        </member>
        <member name="M:Pawnmorph.Comp_SapientAnimal.CompTick">
            <summary>
                called every tick
            </summary>
        </member>
        <member name="M:Pawnmorph.Comp_SapientAnimal.HandleInstinctEffect(Pawnmorph.DefExtensions.InstinctEffector)">
            <summary>
                Handles the instinct effect.
            </summary>
            <param name="instinctEffect">The instinct effect.</param>
        </member>
        <member name="M:Pawnmorph.Comp_SapientAnimal.Initialize(Verse.CompProperties)">
            <summary>
                Initializes this comp
            </summary>
            <param name="props">The props.</param>
        </member>
        <member name="M:Pawnmorph.Comp_SapientAnimal.OnRecoveredFromMentalState(Verse.AI.MentalState)">
            <summary>
                call this to notify the comp that the attached pawn has recovered from the given mental state
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Pawnmorph.Comp_SapientAnimal.PostExposeData">
            <summary>
                called to expose this instances data.
            </summary>
        </member>
        <member name="T:Pawnmorph.CustomBodyAddon">
            <summary>
            custom body addon that only shows up on specific body types 
            </summary>
            <seealso cref="T:AlienRace.AlienPartGenerator.BodyAddon" />
        </member>
        <member name="F:Pawnmorph.CustomBodyAddon.bodyFilter">
            <summary>
            filter that specifies what kind of body types this addon will be drawn on 
            </summary>
        </member>
        <member name="M:Pawnmorph.CustomBodyAddon.CanDrawAddon(Verse.Pawn)">
            <summary>
            Determines whether this instance can draw on the given pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this instance can be draw on the specified pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Pawnmorph.Damage.MutagenicDamageExtension">
            <summary>
            def extension to give damage types mutagenic effects 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.Damage.MutagenicDamageExtension.mutagenicBuildup">
            <summary>
            The mutagenic buildup hediff def 
            </summary>
        </member>
        <member name="F:Pawnmorph.Damage.MutagenicDamageExtension.severityPerDamage">
            <summary>
            The hediff severity per damage point
            </summary>
        </member>
        <member name="F:Pawnmorph.Damage.MutagenicDamageExtension.reduceValue">
            <summary>the amount by which to reduce the raw damage to the pawn, mutagenic</summary>
        </member>
        <member name="F:Pawnmorph.Damage.MutagenicDamageExtension.mutagen">
            <summary>
            The mutagen to use for the mutagenic damage
            if null the default is used 
            </summary>
        </member>
        <member name="M:Pawnmorph.Damage.MutagenicDamageExtension.ConfigErrors">
            <summary>
            gets all Configuration errors with this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Damage.MutagenicDamageUtilities">
            <summary>
                static class containing utilities related to mutagenic damage
            </summary>
        </member>
        <member name="F:Pawnmorph.Damage.MutagenicDamageUtilities.SEVERITY_PER_DAMAGE">
            <summary>the amount of hediff severity to add per point of damage </summary>
        </member>
        <member name="F:Pawnmorph.Damage.MutagenicDamageUtilities.REDUCE_VALUE">
            <summary>the fraction by which the dInfo damage will be reduced by</summary>
        </member>
        <member name="M:Pawnmorph.Damage.MutagenicDamageUtilities.ApplyMutagenicDamage(System.Single,Verse.DamageInfo,Verse.Pawn,Verse.DamageWorker.DamageResult,Verse.HediffDef,System.Single,Pawnmorph.MutagenDef)">
            <summary>Applies the mutagenic damage.</summary>
            <param name="originalDamage">The original damage.</param>
            <param name="damageInfo">The damage information.</param>
            <param name="pawn">The pawn.</param>
            <param name="result">The result.</param>
            <param name="mutagenicDef">The definition of the mutagenic damage hediff to add.</param>
            <param name="severityPerDamage">The severity per damage.</param>
            <param name="mutagen">The mutagen.</param>
            <exception cref="T:System.ArgumentNullException">
                pawn
                or
                result
            </exception>
        </member>
        <member name="M:Pawnmorph.Damage.MutagenicDamageUtilities.ApplyPureMutagenicDamage(Verse.DamageInfo,Verse.Pawn,Verse.HediffDef,System.Single,Pawnmorph.MutagenDef)">
            <summary>
                Applies the pure mutagenic damage.
            </summary>
            this does not actually damage the pawn
            <param name="dInfo">The damage info.</param>
            <param name="pawn">The pawn.</param>
            <param name="mutationHediffDef">The mutation hediff definition.</param>
            <param name="severityPerDamage">The severity per damage.</param>
            <param name="mutagen">The mutagen.</param>
        </member>
        <member name="M:Pawnmorph.Damage.MutagenicDamageUtilities.GetSeverityPerDamage(Verse.DamageInfo)">
            <summary>Gets the severity per damage.</summary>
            <param name="dInfo">The damage information.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Damage.MutagenicDamageUtilities.ReduceDamage(Verse.DamageInfo,System.Single)">
            <summary>Reduces the damage by some amount.</summary>
            <param name="dInfo">The d information.</param>
            <param name="reduceAmount">The reduce amount.</param>
            <returns>a new damage info struct with the modified damage</returns>
        </member>
        <member name="T:Pawnmorph.Damage.Worker_MutagenicCut">
            <summary>
            damage worker for mutagenic cut 
            </summary>
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicCut.ChooseHitPart(Verse.DamageInfo,Verse.Pawn)">
            <summary>Chooses the hit part.</summary>
            <param name="dinfo">The dinfo.</param>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicCut.ApplySpecialEffectsToPart(Verse.Pawn,System.Single,Verse.DamageInfo,Verse.DamageWorker.DamageResult)">
            <summary>Applies the special effects to part.</summary>
            <param name="pawn">The pawn.</param>
            <param name="totalDamage">The total damage.</param>
            <param name="dinfo">The dinfo.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:Pawnmorph.Damage.Worker_MutagenicBlunt">
            <summary>
                damage worker for mutagenic blunt damage
            </summary>
            <seealso cref="T:Verse.DamageWorker_Blunt" />
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicBlunt.ApplySpecialEffectsToPart(Verse.Pawn,System.Single,Verse.DamageInfo,Verse.DamageWorker.DamageResult)">
            <summary>
                Applies the special effects to part.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="totalDamage">The total damage.</param>
            <param name="dinfo">The dinfo.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicBlunt.ChooseHitPart(Verse.DamageInfo,Verse.Pawn)">
            <summary>
                Chooses the hit part.
            </summary>
            <param name="dinfo">The dinfo.</param>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Damage.Worker_MutagenicInjury">
            <summary>
                damage worker that adds mutagenic buildup hediff in addition to regular injuries
            </summary>
            <seealso cref="T:Verse.DamageWorker_AddInjury" />
        </member>
        <member name="F:Pawnmorph.Damage.Worker_MutagenicInjury.EPSILON">
            <summary>
                values below this should be considered 0
            </summary>
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicInjury.Apply(Verse.DamageInfo,Verse.Thing)">
            <summary>
                Applies the specified dinfo.
            </summary>
            <param name="dinfo">The dinfo.</param>
            <param name="thing">The thing.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicInjury.AddExtraBuildup(Verse.Pawn,Verse.DamageInfo)">
            <summary>
                Adds some extra buildup. taking into account toxic resistance and immunities
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="dInfo">The d information.</param>
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicInjury.AddMutationOn(Verse.BodyPartRecord,Verse.Pawn)">
            <summary>
                Adds the mutation on.
            </summary>
            <param name="forceHitPart">The force hit part.</param>
            <param name="pawn">The pawn.</param>
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicInjury.ExplosionDamageThing(Verse.Explosion,Verse.Thing,System.Collections.Generic.List{Verse.Thing},System.Collections.Generic.List{Verse.Thing},Verse.IntVec3)">
            <summary>
            does explosive damage to a thing 
            </summary>
            <param name="explosion">The explosion.</param>
            <param name="t">The t.</param>
            <param name="damagedThings">The damaged things.</param>
            <param name="ignoredThings">The ignored things.</param>
            <param name="cell">The cell.</param>
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicInjury.ReduceDamage(Verse.DamageInfo,Verse.Pawn)">
            <summary>Reduces the damage.</summary>
            <param name="dInfo">The d information.</param>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Damage.Worker_MutagenicStab">
            <summary>
                damage worker for a mutagenic stab attack
            </summary>
            <seealso cref="T:Pawnmorph.Damage.Worker_MutagenicInjury" />
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicStab.ApplySpecialEffectsToPart(Verse.Pawn,System.Single,Verse.DamageInfo,Verse.DamageWorker.DamageResult)">
            <summary>Applies the special effects to part.</summary>
            <param name="pawn">The pawn.</param>
            <param name="totalDamage">The total damage.</param>
            <param name="dInfo">The dInfo.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Pawnmorph.Damage.Worker_MutagenicStab.ChooseHitPart(Verse.DamageInfo,Verse.Pawn)">
            <summary>Chooses the hit part.</summary>
            <param name="dinfo">The dInfo.</param>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.DebugUtils.DBG_TrainingWorkGiver">
            <summary>
            debug class for the training work giver 
            </summary>
            <seealso cref="T:RimWorld.WorkGiver_Train" />
        </member>
        <member name="M:Pawnmorph.DebugUtils.DBG_TrainingWorkGiver.JobOnThing(Verse.Pawn,Verse.Thing,System.Boolean)">
            <summary>
            Jobs the on thing.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="t">The t.</param>
            <param name="forced">if set to <c>true</c> [forced].</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.DebugUtils.DebugLogUtils.HediffStageInfo.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
        </member>
        <member name="M:Pawnmorph.DebugUtils.DebugLogUtils.Results.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Pawnmorph.DebugUtils.DebugLogUtils.Assert(System.Boolean,System.String)">
            <summary>
                Asserts the specified condition. if false an error message will be displayed
            </summary>
            <param name="condition">if false will display an error message</param>
            <param name="message">The message.</param>
            <returns>the condition</returns>
        </member>
        <member name="T:Pawnmorph.DebugUtils.IDebugString">
            <summary>
            interface for things that want to give more information about their state that won't fit in ToString
            </summary>
        </member>
        <member name="M:Pawnmorph.DebugUtils.IDebugString.ToStringFull">
            <summary>
            returns a full, detailed, representation of the object in string form 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.DebugUtils.LogLevel">
            <summary>
            enum to control how much logging should be done 
            </summary>
        </member>
        <member name="F:Pawnmorph.DebugUtils.LogLevel.Error">
            <summary>
            only log errors 
            </summary>
        </member>
        <member name="F:Pawnmorph.DebugUtils.LogLevel.Warnings">
            <summary>
            log warnings and errors 
            </summary>
        </member>
        <member name="F:Pawnmorph.DebugUtils.LogLevel.Messages">
            <summary>
            log messages, warnings and errors 
            </summary>
        </member>
        <member name="F:Pawnmorph.DebugUtils.LogLevel.Pedantic">
            <summary>
            log everything 
            </summary>
        </member>
        <member name="M:Pawnmorph.DebugUtils.Pawnmorpher_DebugDialogue.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.DebugUtils.Pawnmorpher_DebugDialogue" /> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.DefExtensions.AspectGiverExtension">
            <summary>
            def extension for adding aspect givers to defs 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.AspectGiverExtension.aspectGivers">
            <summary>
            The aspect givers
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.AspectGiverExtension.TryApply(Verse.Pawn)">
            <summary>
            Tries to apply aspects to the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.DefExtensions.AspectRestriction">
            <summary>
                restriction def extension that restricts a def to pawns with/without specific aspects
            </summary>
            <seealso cref="T:Pawnmorph.DefExtensions.RestrictionExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.AspectRestriction.aspectEntries">
            <summary>
                The aspect entries
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.AspectRestriction.ConfigErrors">
            <summary>
                gets all errors with this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.DefExtensions.AspectRestriction.PassesRestrictionImpl(Verse.Pawn)">
            <summary>
                checks if the given pawn passes the restriction.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                if the def can be used with the given pawn
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.DefExtensions.AspectRestriction.Entry">
            <summary>
                simple class for storing entries about an aspect and stage
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.AspectRestriction.Entry.aspectDef">
            <summary>
                The aspect definition to look for
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.AspectRestriction.Entry.stageIndex">
            <summary>
                The stage index to look for
            </summary>
            if less then 0 then any stage will do
        </member>
        <member name="T:Pawnmorph.DefExtensions.DefExtensionUtilities">
            <summary>
            static class for commonly used def extension functions 
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.DefExtensionUtilities.IsValidFor(Verse.Def,Verse.Pawn,System.Boolean)">
            <summary>
            Determines whether this def is valid for the specified pawn.
            </summary>
            <param name="def">The definition.</param>
            <param name="pawn">The pawn.</param>
            <param name="mustPassAll">if set to <c>true</c> if the pawn must pass all restrictions.</param>
            <returns>
              <c>true</c> if this is valid for the specified pawn; otherwise, <c>false</c>.
            </returns>
            this function checks for all defExtensions that inherit from <see cref="T:Pawnmorph.DefExtensions.RestrictionExtension" /> and check the pawn against them
        </member>
        <member name="T:Pawnmorph.DefExtensions.FormerHumanRestriction">
            <summary>
            
            </summary>
            <seealso cref="T:Pawnmorph.DefExtensions.RestrictionExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.FormerHumanRestriction.filter">
            <summary>
            The filter for specific kinds of former humans 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.FormerHumanRestriction.raceFilter">
            <summary>
            The race filter
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.FormerHumanRestriction.mustBeFormerHuman">
            <summary>
            if true, then to use the attached def the pawn must be a former human 
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.FormerHumanRestriction.PassesRestrictionImpl(Verse.Pawn)">
            <summary>
            checks if the given pawn passes the restriction.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
            if the def can be used with the given pawn
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.DefExtensions.FormerHumanSettings">
            <summary>
            def extension meant to be used on race defs to add setting specific to former human 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.FormerHumanSettings.neverFormerHuman">
            <summary>
            if true, the attached race will never be a former human 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.FormerHumanSettings.backstory">
            <summary>
            The backstory, uses a default if not set 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.FormerHumanSettings.foodThoughtSettings">
            <summary>
            The food thought settings
            </summary>
        </member>
        <member name="T:Pawnmorph.DefExtensions.InstinctEffector">
            <summary>
            def extension to make a def affect a sapient animal's instinct/sapience level 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.InstinctEffector.baseInstinctOffset">
            <summary>
            The base instinct offset
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.InstinctEffector.thought">
            <summary>
            The thought to add to the sapient animal 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.InstinctEffector.taleDef">
            <summary>
            The tale definition to add 
            </summary>
        </member>
        <member name="T:Pawnmorph.DefExtensions.InstinctInfluenceExtension">
            <summary>
            def extension that adds information about changing the instinct level of a sapient animal 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
            exactly what this does depends on what kind of def it is attached to 
        </member>
        <member name="F:Pawnmorph.DefExtensions.InstinctInfluenceExtension.instinctOffset">
            <summary>
            The instinct offset to add 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.InstinctInfluenceExtension.tale">
            <summary>
            The tale to add for the sapient animal 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.InstinctInfluenceExtension.thought">
            <summary>
            The thought to add 
            </summary>
        </member>
        <member name="T:Pawnmorph.DefExtensions.InteractionGroupExtension">
            <summary>
            extension to add onto a interaction def to list possible alternatives 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.InteractionGroupExtension.interactions">
            <summary>
            the possible interactions to use 
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.InteractionGroupExtension.TryGetAlternativeFor(Verse.Pawn,Verse.Pawn)">
            <summary>
            Tries to get alternative for.
            </summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns>the alternative interaction, null if one couldn't be picked</returns>
        </member>
        <member name="T:Pawnmorph.DefExtensions.MorphRestriction">
            <summary>
            def extension for making something restricted based on 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.MorphRestriction.morphFilter">
            <summary>
            The morph filter
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.MorphRestriction.PassesRestrictionImpl(Verse.Pawn)">
            <summary>
            checks if the given pawn passes the restriction.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
            if the def can be used with the given pawn
            </returns>
        </member>
        <member name="T:Pawnmorph.DefExtensions.MutagenicBuildupSourceSettings">
            <summary>
            def extension for settings for mutagen buildup sources 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutagenicBuildupSourceSettings.maxBuildup">
            <summary>
            the maximum severity this source should add 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutagenicBuildupSourceSettings.mutagenicBuildupDef">
            <summary>
            The mutagenic buildup definition to use 
            </summary>
            if null a default will be used instead 
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutagenicBuildupSourceSettings.mutagenDef">
            <summary>
            The mutagen definition
            </summary>
        </member>
        <member name="T:Pawnmorph.DefExtensions.MutagenExtension">
            <summary>
            mod extension for adding mutagens to defs to make them mutagenic 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutagenExtension.mutagen">
            <summary>
            The mutagen
            </summary>
        </member>
        <member name="T:Pawnmorph.DefExtensions.MutantPlantExtension">
            <summary>
            mod extension for plants that come from mutating other plants 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutantPlantExtension.ignore">
            <summary>
            if true, then the attached mutant plant will not be swapped for regular plants 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutantPlantExtension.priority">
            <summary>
            The priority
            </summary>
            this is used to determine what order the plants are checked,
            lower priority is checked first, then higher. mutagenic plants with the same priority are 'shuffled'  
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutantPlantExtension.sourcePlantFilter">
            <summary>
            The source plant filter
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutantPlantExtension.mustBeHarvestable">
            <summary>
            if true, the source plant must be harvestable for the mutation to occur
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutantPlantExtension.mustBeTree">
            <summary>
            if true, the source plant must be a tree 
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.MutantPlantExtension.CanMutateFrom(RimWorld.Plant)">
            <summary>
            Determines whether this instance can mutate from the specified source plant  
            </summary>
            <param name="sourcePlant">The source plant.</param>
            <returns>
              <c>true</c> if this this instance can mutate from the specified source plant    otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">sourcePlant</exception>
        </member>
        <member name="T:Pawnmorph.DefExtensions.MutationRestriction">
            <summary>
             def extension for making something restricted based on mutations 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.MutationRestriction.mutationFilter">
            <summary>
            The mutation filter 
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.MutationRestriction.PassesRestrictionImpl(Verse.Pawn)">
            <summary>
            checks if the given pawn passes the restriction.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
            if the def can be used with the given pawn
            </returns>
        </member>
        <member name="T:Pawnmorph.DefExtensions.RelationshipInteractionRestriction">
            <summary>
            mod extension to add a restriction to a <see cref="T:RimWorld.InteractionDef"/> based on the relationship status of the recipient 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.RelationshipInteractionRestriction.checkFormerHuman">
            <summary>
            if true, then check the past human pawn for a relationship if the recipient is a former human 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.RelationshipInteractionRestriction.mustBeColonist">
            <summary>
            if true, the recipient must be a colonist 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.RelationshipInteractionRestriction.relationFilter">
            <summary>
            The relationship 
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.RelationshipInteractionRestriction.ConfigErrors">
            <summary>
            Gets all configuration errors with this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.DefExtensions.RestrictionExtension">
            <summary>
                abstract base class for all def extensions that restrict the use of a def from pawns based on some sort of criteria
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.RestrictionExtension.invert">
            <summary>
                if true, inverts the normal behavior of this instance
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.RestrictionExtension.PassesRestriction(Verse.Pawn)">
            <summary>
                checks if the given pawn passes the restriction.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                if the def can be used with the given pawn
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.DefExtensions.RestrictionExtension.PassesRestrictionImpl(Verse.Pawn)">
            <summary>
                checks if the given pawn passes the restriction.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                if the def can be used with the given pawn
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.DefExtensions.SapienceStateRestriction">
            <summary>
            restriction so limit defs to pawns in certain sapience states 
            </summary>
            <seealso cref="T:Pawnmorph.DefExtensions.RestrictionExtension" />
        </member>
        <member name="M:Pawnmorph.DefExtensions.SapienceStateRestriction.ConfigErrors">
            <summary>
            Configurations the errors.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Pawnmorph.DefExtensions.SapienceStateRestriction.state">
            <summary>
            The state the pawn must be in 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.SapienceStateRestriction.sapienceFilter">
            <summary>
            The sapience filter
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.SapienceStateRestriction.PassesRestrictionImpl(Verse.Pawn)">
            <summary>
                checks if the given pawn passes the restriction.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                if the def can be used with the given pawn
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.DefExtensions.SapientRulePackVariant">
            <summary>
            def extension for attaching variants of rule packs based on the sapient level 
            </summary>
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.DefExtensions.SapientRulePackVariant.variants">
            <summary>
            The variants
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.SapientRulePackVariant.GetRulePackVariant(Pawnmorph.SapienceLevel)">
            <summary>
            Gets the rule pack variant.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.DefExtensions.SapientRulePackVariant.Item(Pawnmorph.SapienceLevel)">
            <summary>
            Gets the <see ref="T"/> with the specified key.
            </summary>
            <value>
            The <see ref="T"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.DefExtensions.TraitRestriction">
            <summary>
            restriction extension for only allowing pawns with specific traits to use the attached def 
            </summary>
            <seealso cref="T:Pawnmorph.DefExtensions.RestrictionExtension" />
        </member>
        <member name="T:Pawnmorph.DefExtensions.TraitRestriction.Entry">
            <summary>
            simple class for combining traitDef and degree info 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.TraitRestriction.Entry.trait">
            <summary>
            The trait
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.TraitRestriction.Entry.traitDegree">
            <summary>
            The trait degree
            if less then 0 any degree will do 
            </summary>
        </member>
        <member name="F:Pawnmorph.DefExtensions.TraitRestriction.entries">
            <summary>
            The entries
            </summary>
        </member>
        <member name="M:Pawnmorph.DefExtensions.TraitRestriction.PassesRestrictionImpl(Verse.Pawn)">
            <summary>
            checks if the given pawn passes the restriction.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
            if the def can be used with the given pawn
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.Designations.RecruitSapientFormerHuman">
            <summary>
            designation class for 'recruiting' sapient former humans
            </summary>
            <seealso cref="T:Verse.Designator" />
        </member>
        <member name="P:Pawnmorph.Designations.RecruitSapientFormerHuman.Designation">
            <summary>
            Gets the designation definition 
            </summary>
            <value>
            The designation.
            </value>
        </member>
        <member name="M:Pawnmorph.Designations.RecruitSapientFormerHuman.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.Designations.RecruitSapientFormerHuman"/> class.
            </summary>
        </member>
        <member name="P:Pawnmorph.Designations.RecruitSapientFormerHuman.DraggableDimensions">
            <summary>
            Gets the draggable dimensions.
            </summary>
            <value>
            The draggable dimensions.
            </value>
        </member>
        <member name="M:Pawnmorph.Designations.RecruitSapientFormerHuman.DesignateSingleCell(Verse.IntVec3)">
            <summary>
            Designates the single cell.
            </summary>
            <param name="loc">The loc.</param>
        </member>
        <member name="M:Pawnmorph.Designations.RecruitSapientFormerHuman.CanDesignateThing(Verse.Thing)">
            <summary>
            Determines whether this instance with the specified t [can designate thing] 
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Designations.RecruitSapientFormerHuman.FinalizeDesignationSucceeded">
            <summary>
            Finalizes the designation succeeded.
            </summary>
        </member>
        <member name="M:Pawnmorph.Designations.RecruitSapientFormerHuman.DesignateThing(Verse.Thing)">
            <summary>
            Designates the thing.
            </summary>
            <param name="t">The t.</param>
        </member>
        <member name="M:Pawnmorph.Designations.RecruitSapientFormerHuman.CanDesignateCell(Verse.IntVec3)">
            <summary>
            Determines whether this instance with the specified c [can designate cell] 
            </summary>
            <param name="c">The c.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Dialogs.ColonistColorPicker">
            <summary>
            A simple color picker dialog
            </summary>
        </member>
        <member name="M:Pawnmorph.Dialogs.ColonistColorPicker.showDialogForPawn(Verse.Pawn)">
            <summary> Show color picker dialog for given pawn </summary>
            <param name="pawn">Pawn</param>
        </member>
        <member name="M:Pawnmorph.Dialogs.ColonistColorPicker.#ctor(Verse.Pawn)">
            <summary> Constructor </summary>
            <param name="pawn">Pawn</param>
        </member>
        <member name="P:Pawnmorph.Dialogs.ColonistColorPicker.InitialSize">
            <inheritdoc />
        </member>
        <member name="M:Pawnmorph.Dialogs.ColonistColorPicker.Close(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Pawnmorph.Dialogs.ColonistColorPicker.DoWindowContents(UnityEngine.Rect)">
            <inheritdoc />
        </member>
        <member name="T:Pawnmorph.Factions.MorphGroupMakerUtilities">
            <summary>
                static container for applying mutations and morphs to pawns during generation
            </summary>
        </member>
        <member name="M:Pawnmorph.Factions.MorphGroupMakerUtilities.ApplyMutationExtensionToPawn(Verse.Pawn,System.Boolean,System.Boolean,Pawnmorph.MorphPawnKindExtension)">
            <summary>
                Applies the mutation extension to pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="canApplyRestricted">if set to <c>true</c> restricted mutations can be applied as well as regular ones.</param>
            <param name="setAtMaxStage">if set to <c>true</c>all mutations will be set at the maximum stage.</param>
            <param name="kindExtension">The kind extension.</param>
        </member>
        <member name="M:Pawnmorph.Factions.MorphGroupMakerUtilities.ApplyMutationsPostLoad(Verse.Pawn,System.Boolean,System.Boolean)">
            <summary>Applies the mutations after the pawn has been loaded by the game.</summary>
            <param name="pawn">The pawn.</param>
            <param name="canApplyRestricted">if set to <c>true</c> allow restricted mutations to be applied.</param>
            <param name="setAtMaxStage">if true, the hediffs added will be set to the maximum stage (familiar usually)</param>
        </member>
        <member name="T:Pawnmorph.FormerHumanStatus">
            <summary>
            enum that 
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumanStatus.Sapient">
            <summary>
            the former human still has most of their human intelligence 
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumanStatus.Feral">
            <summary>
            The animal is mostly just an animal at this point, they might still have some intelligence left though 
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumanStatus.PermanentlyFeral">
            <summary>
            they are an animal forever
            </summary>
        </member>
        <member name="T:Pawnmorph.SapienceLevel">
            <summary>
            enum that represents the 'quantized sapience level' of a former human 
            </summary>
        </member>
        <member name="F:Pawnmorph.SapienceLevel.Sapient">
            <summary>The former human if fully aware</summary>
        </member>
        <member name="F:Pawnmorph.SapienceLevel.MostlySapient">
            <summary> The pawn loses the ability to speak and perform work.</summary>
        </member>
        <member name="F:Pawnmorph.SapienceLevel.Conflicted">
            <summary>The conflicted</summary>
        </member>
        <member name="F:Pawnmorph.SapienceLevel.MostlyFeral">
            <summary>The pawn can no longer sleep in beds, does not care about being naked and can be trained a bit easier. Has "hunting" mental breaks.</summary>
        </member>
        <member name="F:Pawnmorph.SapienceLevel.Feral">
            <summary>The pawn cannot hold weapons in its mouth, is fine with eating kibble off the floor, is fine with sleeping outside, training is much easier</summary>
        </member>
        <member name="F:Pawnmorph.SapienceLevel.PermanentlyFeral">
            <summary>the pawn is permanently feral</summary>
        </member>
        <member name="T:Pawnmorph.FormerHumans.FoodThoughtSettings">
            <summary>
            simple POD for former human food settings 
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumans.FoodThoughtSettings.cannibalThought">
            <summary>
            The thought received for when the former human eats meat of the same species they are 
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumans.FoodThoughtSettings.cannibalThoughtGood">
            <summary>
            The thought received for when the former human eats meat of the same species they are and have the cannibal trait
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumans.FoodThoughtSettings.cannibalThoughtIngredientGood">
            <summary>
            The thought received for when a former human eats a meal with meat of the same species they are as an ingredient and have the cannibal trait 
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumans.FoodThoughtSettings.cannibalThoughtIngredient">
            <summary>
            The thought received for when a former human eats a meal with meat of the same species they are as an ingredient
            </summary>
        </member>
        <member name="T:Pawnmorph.FormerHumans.ISapientVariantHolder`1">
            <summary>
            interface for something that holds variants of a type for  use with various sapience levels  
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Pawnmorph.FormerHumans.ISapientVariantHolder`1.Item(Pawnmorph.SapienceLevel)">
            <summary>
            Gets the <see ref="T"/> with the specified key.
            </summary>
            <value>
            The <see ref="T"/>.
            </value>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.FormerHumans.SapientVariants`1">
            <summary>
            simple class for storing several 'variant' of things for different sapient levels 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Pawnmorph.FormerHumans.SapientVariants`1.sapient">
            <summary>
            The sapient variant
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumans.SapientVariants`1.mostlySapient">
            <summary>
            The mostly sapient variant
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumans.SapientVariants`1.conflicted">
            <summary>
            The conflicted variant
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumans.SapientVariants`1.mostlyFeral">
            <summary>
            The mostly feral variant
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumans.SapientVariants`1.feral">
            <summary>
            The feral variant
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumans.SapientVariants`1.permanentlyFeral">
            <summary>
            The permanently feral variant
            </summary>
        </member>
        <member name="P:Pawnmorph.FormerHumans.SapientVariants`1.Item(Pawnmorph.SapienceLevel)">
            <summary>
            Gets or sets the <see ref="T"/> with the specified key.
            </summary>
            <value>
            </value>
            <param name="key">The key.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            key - null
            or
            key - null
            </exception>
        </member>
        <member name="T:Pawnmorph.FormerHumanUtilities">
            <summary>
                static class containing various former human utilities
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumanUtilities.RELATED_WILD_FORMER_HUMAN_LETTER">
            <summary>
                The related wild former human letter
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumanUtilities.RELATED_WILD_FORMER_HUMAN_LETTER_LABEL">
            <summary>
                The related wild former human letter label
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumanUtilities.RELATED_SOLD_FORMER_HUMAN_LETTER">
            <summary>
                The related sold former human letter
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumanUtilities.RELATED_SOLD_FORMER_HUMAN_LETTER_LABEL">
            <summary>
                The related sold former human letter label
            </summary>
        </member>
        <member name="F:Pawnmorph.FormerHumanUtilities._sapienceThresholds">
            <summary>
            these are the minimum sapience levels needed to fall withing a given enum level 
            </summary>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.SapienceLevelThresholds">
            <summary>
                Gets the sapience level thresholds.
            </summary>
            <value>
                The sapience level thresholds.
            </value>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.AllMaps_FormerHumans">
            <summary>
                Gets all former humans on all maps
            </summary>
            <value>
                All maps player former humans.
            </value>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.AllMapsCaravansAndTravelingTransportPods_Alive">
            <summary>
                Gets all former humans on all maps, caravans and traveling transport pods that are alive
            </summary>
            <value>
                all former humans on all maps, caravans and traveling transport pods that are alive
            </value>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.AllPlayerFormerHumans">
            <summary>
                Gets all former humans belonging to the player
            </summary>
            <value>
                All player former humans.
            </value>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.AllSapientAnimalsMinorBreakRisk">
            <summary>
                Gets all sapient animals that are at risk of a minor break .
            </summary>
            <value>
                All sapient animals minor break risk.
            </value>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.AllSapientAnimalsMajorBreakRisk">
            <summary>
                Gets all sapient animals that are at risk of a major break .
            </summary>
            <value>
                All sapient animals that are at risk of a major break .
            </value>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.AllSapientAnimalsExtremeBreakRisk">
            <summary>
                Gets all sapient animals at risk of an extreme break.
            </summary>
            <value>
                All sapient animals at risk of an extreme break.
            </value>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.BreakAlertLabel">
            <summary>
                Gets the break alert label for sapient animals
            </summary>
            <value>
                The break alert label.
            </value>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.BreakAlertExplanation">
            <summary>
                Gets the break alert explanation for sapient animals .
            </summary>
            <value>
                The break alert explanation.
            </value>
        </member>
        <member name="P:Pawnmorph.FormerHumanUtilities.MutationTraits">
            <summary>
                Gets the traits that transfer between original pawn and transformed pawn
            </summary>
            <value>
                The mutation traits.
            </value>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.CreateMergedAnimalRequest(Verse.PawnKindDef,System.Collections.Generic.IEnumerable{Verse.Pawn},RimWorld.Faction,RimWorld.PawnGenerationContext,System.Nullable{Verse.Gender})">
            <summary>
                Creates the merged animal request.
            </summary>
            <param name="kind">The kind.</param>
            <param name="originals">The originals.</param>
            <param name="faction">The faction.</param>
            <param name="context">The context.</param>
            <param name="fixedGender">The fixed gender.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                kind
                or
                originals
            </exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.CreateSapientAnimalRequest(Verse.PawnKindDef,Verse.Pawn,RimWorld.Faction,RimWorld.PawnGenerationContext,System.Nullable{Verse.Gender})">
            <summary>
                Creates the sapient animal generation request.
            </summary>
            <param name="kind">The kind.</param>
            <param name="original">The original.</param>
            <param name="faction">The faction.</param>
            <param name="context">The context.</param>
            <param name="fixedGender">The fixed gender.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.FindRandomPreyFor(Verse.Pawn)">
            <summary>
                Finds the random prey for the given predator
            </summary>
            <param name="predator">The predator.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GetSapienceTracker(Verse.Pawn)">
            <summary>
                Gets the former human tracker.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GetOriginalPawnOfFormerHuman(Verse.Pawn)">
            <summary>
                Gets the original pawn of the given former human.
            </summary>
            <param name="formerHuman">The former human.</param>
            <returns>the original pawn if it exists, otherwise null</returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GetQuantizedSapienceLevel(Verse.Pawn)">
            <summary>Gets the quantized sapience level.</summary>
            <param name="pawn">The pawn.</param>
            <returns>returns null if the pawn isn't a former human</returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GetQuantizedSapienceLevel(System.Single)">
            <summary>
                Gets the quantized sapience level.
            </summary>
            <param name="sapienceLevel">The raw sapience level.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GetSapientAnimalComp(Verse.Pawn)">
            <summary>
                Gets the sapient animal comp.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GiveSapientAnimalHuntingThought(Verse.Pawn,Verse.Pawn)">
            <summary>
                Gives the sapient animal the hunting thought.
            </summary>
            <param name="sapientAnimal">The sapient animal.</param>
            <param name="prey">The prey.</param>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.InitializeWorkSettingsFor(Verse.Pawn,RimWorld.Pawn_WorkSettings)">
            <summary>
                Initializes the work settings for the given sapient animal
            </summary>
            <param name="sapientAnimal">The sapient animal.</param>
            <param name="workSettings">The pawn work settings.</param>
            <exception cref="T:System.ArgumentNullException">
                sapientAnimal
                or
                workSettings
            </exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.IsColonistAnimal(Verse.Pawn)">
            <summary>
                Determines whether this pawn is a colonist former human
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if this pawn is a colonist former human; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.IsColonistAnimal(Pawnmorph.SapienceLevel)">
            <summary>
                Determines whether this status is for a colonist animal.
            </summary>
            <param name="fhStatus">The fh status.</param>
            <returns>
                <c>true</c> if this status is for a colonist animal; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.IsFormerHuman(Verse.Pawn)">
            <summary>
                Determines whether the given pawn is a former human.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if the given pawn is former human; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GetSapienceState(Verse.Pawn)">
            <summary>
            Gets the current sapience state the pawn is in 
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.HasSapienceState(Verse.Pawn)">
            <summary>
            Determines this pawn's sapience is in a special state like FormerHuman or Animalistic
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this pawn's sapience is in a special state like FormerHuman or Animalistic; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.IsHumanlike(Verse.Pawn)">
            <summary>
            Determines whether this instance is humanlike.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if the specified pawn is humanlike; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.IsAnimal(Verse.Pawn)">
            <summary>
            Determines whether this instance is an animal.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if the specified pawn is an animal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.IsManhunter(Verse.Pawn)">
            <summary>
                Determines whether the specified pawn is a manhunter.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if the specified pawn is a manhunter; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.IsSapientFormerHuman(Verse.Pawn)">
            <summary>
                Determines whether this pawn is a sapient former human.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if this pawn is a sapient former human; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.IsSapientOrFeralFormerHuman(Verse.Pawn)">
            <summary>
                Determines whether this pawn is a sapient or mostly feral former human
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if this pawn is a sapient former human; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.IsToolUser(Verse.Pawn)">
            <summary>
                Determines whether the given pawn is a tool user.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if the given pawn is a tool user ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GetIntelligence(Verse.Pawn)">
            <summary>
            Gets the intelligence of this pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.MakeAnimalSapient(Verse.Pawn,Verse.Pawn,System.Single)">
            <summary>Makes the animal sapient. including adding necessary comps, need, training, etc  </summary>
            <param name="original">The original.</param>
            <param name="animal">The animal.</param>
            <param name="sapienceLevel">The sapience level.</param>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.InitializeTransformedPawn(Verse.Pawn,Verse.Pawn,System.Single)">
            <summary>
            Initializes the transformed pawn with the given original pawn and sapience level 
            </summary>
            <param name="original">The original.</param>
            <param name="animal">The animal.</param>
            <param name="sapienceLevel">The sapience level.</param>
            <exception cref="T:System.ArgumentNullException">
            original
            or
            animal
            </exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.MakeAnimalSapient(Verse.Pawn,System.Single,System.Boolean)">
            <summary>
                Makes the animal sapient.
            </summary>
            <param name="animal">The animal.</param>
            <param name="sapienceLevel">The sapience level.</param>
            <param name="joinIfRelated">
                if set to <c>true</c> and the resulting pawn is related to a colonist have the animal join
                the colony.
            </param>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GenerateRandomHumanForm(Verse.Pawn)">
            <summary>
            Generates the random human form of the given animal 
            </summary>
            <param name="animal">The animal.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.GenerateRandomUnmergedHuman(Verse.Pawn)">
            <summary>
            Generates the random unmerged humans for the given merged animal 
            </summary>
            <param name="mergedAnimal">The animal.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.MakePermanentlyFeral(Verse.Pawn)">
            <summary>
                Makes the pawn permanently feral.
            </summary>
            <param name="pawn">The pawn.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.NotifyRelatedPawnsFormerHuman(Verse.Pawn,System.String,System.String)">
            <summary>
                generates notification letters if the given former human is related to any colonists
            </summary>
            <param name="formerHuman">The former human.</param>
            <param name="letterContentID">The letter content identifier.</param>
            <param name="letterLabelID">The letter label identifier.</param>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.TransferEverything(Verse.Pawn,Verse.Pawn,Pawnmorph.PawnTransferUtilities.SkillTransferMode,Pawnmorph.PawnTransferUtilities.SkillPassionTransferMode)">
            <summary>
            transfers all relevant information from the original pawn to the transformed pawn
            </summary>
            <param name="original">The original.</param>
            <param name="transformedPawn">The pawn the original pawn was transformed into.</param>
            <param name="transferMode">The skill transfer mode.</param>
            <param name="passionTransferMode">The passion transfer mode.</param>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.TryAssignBackstoryToTransformedPawn(Verse.Pawn,Verse.Pawn)">
            <summary>
                Tries the assign the correct backstory to transformed pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="originalPawn">The original pawn.</param>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.TryGetSapientDefVariant``1(Verse.Def,Verse.Pawn,``0@)">
            <summary>
                Tries the get definition variant for the given formerHuman.
            </summary>
            this also checks if the variant is valid for the formerHuman, and keeps looking until a valid variant is found or all variants are exhausted
            <typeparam name="T"></typeparam>
            <param name="sourceDef">The source definition.</param>
            <param name="formerHuman">The former human.</param>
            <param name="variant">The variant.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                sourceDef
                or
                formerHuman
            </exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.TryGetSapientVariant``1(Verse.Def,Pawnmorph.SapienceLevel,``0@)">
            <summary>
                Tries the get sapient variant of the specified type for the given level
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceDef">The source definition.</param>
            <param name="level">The level.</param>
            <param name="variant">The variant.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.TryGetSapientVariant``1(Verse.Def,Verse.Pawn,``0@)">
            <summary>
                Tries the get a variant for the given formerHuman.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceDef">The source definition.</param>
            <param name="formerHuman">The former human.</param>
            <param name="variant">The variant.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                sourceDef
                or
                formerHuman
            </exception>
        </member>
        <member name="M:Pawnmorph.FormerHumanUtilities.TransferRelationsToOriginal(Verse.Pawn,Verse.Pawn)">
            <summary>
            Transfers the relations back to the original pawn after they've been transformed into the transformedPawn
            </summary>
            <param name="original">The original.</param>
            <param name="transformedPawn">The transformed pawn.</param>
            <exception cref="T:System.ArgumentNullException">
            original
            or
            transformedPawn
            </exception>
        </member>
        <member name="T:Pawnmorph.Hediffs.Comp_AcceleratedSeverity">
            <summary>
                hediff comp to make the hediffs severity follow a parabolic curve over time 
            </summary>
            <seealso cref="T:Pawnmorph.Utilities.HediffCompBase`1" />
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_AcceleratedSeverity.CompPostTick(System.Single@)">
            <summary>
            called every tick 
            </summary>
            <param name="severityAdjustment">The severity adjustment.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_AcceleratedSeverity.CompPostMake">
            <summary>
            called when this comp is first made.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_AcceleratedSeverity.CompPostMerged(Verse.Hediff)">
            <summary>
            called when the other is merged into this instance's parent
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_AcceleratedSeverity.CompExposeData">
            <summary>
            exposes this instance's data.
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.CompProperties_AcceleratedSeverity">
            <summary>
            properties for <see cref="T:Pawnmorph.Hediffs.Comp_AcceleratedSeverity"/>
            </summary>
            <seealso cref="T:Pawnmorph.Utilities.HediffCompPropertiesBase`1" />
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_AcceleratedSeverity.recoveryTime">
            <summary>
            the time in seconds it takes the hediff's severity to reach it's initial value 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_AcceleratedSeverity.peakSeverity">
            <summary>
            the maximum severity offset this comp will cause the hediff to have 
            </summary>
        </member>
        <member name="P:Pawnmorph.Hediffs.CompProperties_AcceleratedSeverity.A">
            <summary>
            Gets the acceleration of this comp 
            </summary>
            <value>
            the acceleration 
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.CompProperties_AcceleratedSeverity.V0">
            <summary>
            Gets the initial velocity of this comp.
            </summary>
            <value>
            The initial velocity 
            </value>
        </member>
        <member name="T:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust">
            <summary>
                hediff comp that acts like severity per day but if affected by the 'Mutation Adaptability Stat'
            </summary>
            <seealso cref="T:Pawnmorph.Utilities.HediffCompBase`1" />
        </member>
        <member name="P:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust.NaturalSeverityLimit">
            <summary>
                Gets the natural severity limit.
            </summary>
            this value is the value the attached hediff should reach if the pawn has had the mutation for an 'infinite' amount of time
            <value>
                The natural severity limit.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust.CompExposeData">
            <summary>
                called to save/load data for this comp.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust.Restart">
            <summary>
            Restarts this instance.
            </summary>
        </member>
        <member name="P:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust.Halted">
            <summary>
                Gets or sets a value indicating whether this <see cref="T:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust" /> is halted.
            </summary>
            <value>
                <c>true</c> if halted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust.CompPostTick(System.Single@)">
            <summary>
                called every tick
            </summary>
            <param name="severityAdjustment">The severity adjustment.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust.CompPostMerged(Verse.Hediff)">
            <summary>
                called when the parent is merged with a new hediff of the same type
            </summary>
            <param name="other">The other.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust.SeverityChangePerDay">
            <summary>
                get the change in severity per day
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.Hediffs.Comp_MutationSeverityAdjust.ChangePerDay">
            <summary>
            Gets the change per day.
            </summary>
            <value>
            The change per day.
            </value>
        </member>
        <member name="T:Pawnmorph.Hediffs.CompProperties_MutationSeverityAdjust">
            <summary>
                comp properties for mutation adjust hediff comp
            </summary>
            <seealso cref="T:Pawnmorph.Utilities.HediffCompPropertiesBase`1" />
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_MutationSeverityAdjust.statEffectMult">
            <summary>
                The stat effect multiplier
            </summary>
            values less then 1 will make the mutation adaptability stat have less of an effect
            values greater then 1 will increase it's effect
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProperties_MutationSeverityAdjust.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.Hediffs.CompProperties_MutationSeverityAdjust" /> class.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProperties_MutationSeverityAdjust.GetNaturalSeverityLimitFor(Verse.Pawn)">
            <summary>
                Gets the natural severity limit for the given pawn
            </summary>
            this value is the value the attached hediff should reach if the pawn has had the mutation for an 'infinite' amount of time
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.Comp_RestartMutationProgression">
            <summary>
            hediff comp that restarts 
            </summary>
            <seealso cref="T:Verse.HediffComp" />
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_RestartMutationProgression.CompPostPostAdd(System.Nullable{Verse.DamageInfo})">
            <summary>
            Comps the post post add.
            </summary>
            <param name="dinfo">The dinfo.</param>
        </member>
        <member name="T:Pawnmorph.Hediffs.Comp_TFStageConfigChecker">
            <summary>
            dummy comp for the tf stage config checker 
            </summary>
            <seealso cref="T:Verse.HediffComp" />
        </member>
        <member name="T:Pawnmorph.Hediffs.CompProps_TfStageConfigChecker">
            <summary>
            simple comp for hediffs that will check all transformation stages for errors 
            </summary>
            <seealso cref="T:Verse.HediffCompProperties" />
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProps_TfStageConfigChecker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.Hediffs.CompProps_TfStageConfigChecker"/> class.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProps_TfStageConfigChecker.ConfigErrors(Verse.HediffDef)">
            <summary>
            returns all configuration errors 
            </summary>
            <param name="parentDef">The parent definition.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.FullTransformationStage">
            <summary>
            hediff stage that controls
            </summary>
            <seealso cref="T:Pawnmorph.Hediffs.FullTransformationStageBase" />
        </member>
        <member name="F:Pawnmorph.Hediffs.FullTransformationStage.pawnkinds">
            The pawnKind of the animal to be transformed into.
        </member>
        <member name="M:Pawnmorph.Hediffs.FullTransformationStage.GetPawnKindDefFor(Verse.Pawn)">
            <summary>
            Gets the pawn kind definition to turn the given pawn into
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.FullTransformationStage.ConfigErrors">
            <summary>
            Gets all Configuration errors in this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.FullTransformationStageBase">
            <summary>
            base class for all full transformation stages 
            </summary>
            <seealso cref="T:Verse.HediffStage" />
            <seealso cref="T:Pawnmorph.Hediffs.IExecutableStage" />
            <seealso cref="T:Pawnmorph.IPawnTransformer" />
            <seealso cref="T:Pawnmorph.Hediffs.IInitializable" />
        </member>
        <member name="F:Pawnmorph.Hediffs.FullTransformationStageBase.transformationTale">
            Tale to add to the tales.
        </member>
        <member name="F:Pawnmorph.Hediffs.FullTransformationStageBase.forceGender">
            The gender that will be forced (i.e. a ChookMorph will be forced female).
        </member>
        <member name="F:Pawnmorph.Hediffs.FullTransformationStageBase.forceGenderChance">
            If forceGender is provided, this is the chance the gender will be forced.
        </member>
        <member name="M:Pawnmorph.Hediffs.FullTransformationStageBase.GetPawnKindDefFor(Verse.Pawn)">
            <summary>
            Gets the pawn kind definition to turn the given pawn into
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.FullTransformationStageBase.TryTransform(Verse.Pawn,Verse.Hediff)">
            <summary>Tries to transform the pawn</summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.FullTransformationStageBase.TransformPawn(Verse.Pawn,Verse.Hediff)">
            <summary>Transforms the pawn.</summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.FullTransformationStageBase.EnteredStage(Verse.Hediff)">
            <summary>called when the given hediff enters this stage</summary>
            <param name="hediff">The hediff.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.FullTransformationStageBase.ConfigErrors">
            <summary>
            Gets all Configuration errors in this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.Giver_MutationClass">
            <summary>
            hediff giver for giving mutation in a class 
            </summary>
            <seealso cref="T:Verse.HediffGiver" />
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationClass.animalClass">
            <summary>
            The animal classification to pull mutations from 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationClass.mtbDays">
            <summary>
                The MTB days
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationClass.mtbUnits">
            <summary>
                The MTB unit
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.Giver_MutationClass.OnIntervalPassed(Verse.Pawn,Verse.Hediff)">
            <summary>
                occurs every so often for all hediffs that have this giver
            </summary>
            <param name="pawn"></param>
            <param name="cause"></param>
        </member>
        <member name="M:Pawnmorph.Hediffs.Giver_MutationClass.TryApply(Verse.Pawn,Verse.Hediff,Pawnmorph.MutagenDef)">
            <summary>
                Tries to apply this hediff giver
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
            <param name="mutagen">The mutagen.</param>
        </member>
        <member name="T:Pawnmorph.Hediffs.IExecutableStage">
            <summary>
            interface for hediff stages that execute something when they are entered 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.IExecutableStage.EnteredStage(Verse.Hediff)">
            <summary>called when the given hediff enters this stage</summary>
            <param name="hediff">The hediff.</param>
        </member>
        <member name="T:Pawnmorph.Hediffs.IInitializable">
            <summary>
            interface for a hediff stage or hediff giver that needs to be initialized 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.IInitializable.ConfigErrors">
            <summary>
            Gets all Configuration errors in this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.MorphTf">
            <summary>
                simple implementation of TransformationBase
            </summary>
            <seealso cref="T:Pawnmorph.Hediffs.TransformationBase" />
        </member>
        <member name="P:Pawnmorph.Hediffs.MorphTf.ShouldRemove">
            <summary>
            Gets a value indicating whether this instance should be removed.
            </summary>
            <value>
              <c>true</c> if this instance should be removed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.MorphTf.MutationStatValue">
            <summary>
            Gets the mutation stat value.
            </summary>
            <value>
            The mutation stat value.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.MorphTf.MeanMutationsPerDay">
            <summary>
            the expected number of mutations to happen in a single day 
            </summary>
        </member>
        <member name="P:Pawnmorph.Hediffs.MorphTf.AllAvailableMutations">
            <summary>Gets the available mutations.</summary>
            <value>The available mutations.</value>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphTf.PostAdd(System.Nullable{Verse.DamageInfo})">
            <summary>called after this hediff is added to the pawn</summary>
            <param name="dinfo">The dinfo.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphTf.ResetMutationCaches">
            <summary>
            Resets the mutation caches.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphTf.Tick">
            <summary>Ticks this instance.</summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphTf.GetBaseMutationRate(Verse.HediffStage)">
            <summary>
            Gets the base mutation rate for this stage 
            </summary>
            gets the current mutation rate before the MutagenSensitivity or other stats are taken into account 
            <param name="currentStage">The current stage.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphTf.FillPartCheckList(System.Collections.Generic.List{Verse.BodyPartRecord})">
            <summary>Fills the part check list.</summary>
            the check list is a list of all parts in the parents body def in the order mutations should be added
            <param name="checkList">The check list.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphTf.GetAvailableMutations(Verse.HediffStage)">
            <summary>Gets the available the mutations from the given stage.</summary>
            <param name="currentStage">The current stage.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphTf.AnyMutationsInStage(Verse.HediffStage)">
            <summary>
            returns true if there are ny mutations in this stage 
            </summary>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.MorphTransformationStage">
            <summary>
            transformation stage that gets all it's mutations from a morph at runtime 
            </summary>
            <seealso cref="T:Pawnmorph.Hediffs.TransformationStageBase" />
        </member>
        <member name="F:Pawnmorph.Hediffs.MorphTransformationStage.morph">
            <summary>
            The morph or animal class def to get mutations from
            this cannot be null, and must be set in the xml 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MorphTransformationStage.blackList">
            <summary>
            optional black list 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MorphTransformationStage.addChance">
            <summary>
            an override to use for the chance to add mutations from the given morph 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphTransformationStage.ConfigErrors">
            <summary>
            returns all configuration errors in this stage
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphTransformationStage.GetEntries(Verse.Pawn,Verse.Hediff)">
            <summary>
            Gets the entries for the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.Hediffs.MorphTransformationStage.Entries">
            <summary>
            Gets all mutation entries in this stage 
            </summary>
            <value>
            The entries.
            </value>
        </member>
        <member name="T:Pawnmorph.Hediffs.MutationDef">
            <summary>
                custom hediff def for mutations
            </summary>
            <seealso cref="T:Verse.HediffDef" />
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.parts">
            <summary>
                list of body parts this mutation can be added to
            </summary>
            note: this does not affect HediffGiver_AddedMutation, this is for adding mutations without a hediff giver
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.countToAffect">
            <summary>the number of parts to add this mutation to</summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.categories">
            <summary>
                the various mutation categories this mutation belongs to
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.defaultAddChance">
            <summary>
                The default chance to add this mutation
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.defaultBlocks">
            <summary>
                The default value indicating weather or not this mutation blocks a transformation chain until it is added
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.blockList">
            <summary>
                list of other mutations this mutation blocks
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.blockSites">
            <summary>
            list of body part defs that this mutations blocks other mutations from being added onto 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.mutationLogRulePack">
            <summary>
                the rule pack to use when generating mutation logs for this mutation
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.mutationTale">
            <summary>The mutation tale</summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.classInfluence">
            <summary>
                The class this part gives influence for
            </summary>
            only should be set if morphInfluence is not set!
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.mutationMemory">
            <summary>The mutation memory</summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.memoryIgnoresLimit">
            <summary>
                if true, the mutation will not respect the max mutation thoughts mod setting
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.MutationDef.ToStringFull">
            <summary>
                returns a full, detailed, representation of the object in string form
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.Hediffs.MutationDef.AllMutations">
            <summary>
                Gets all mutations.
            </summary>
            <value>
                All mutations.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.MutationDef.RemoveComp">
            <summary>
                Gets the remover comp.
            </summary>
            this is the comp used to remove 'overlapping' mutations
            <value>
                The remove comp.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.MutationDef.IsRestricted">
            <summary>Gets a value indicating whether this instance is restricted to special PawnKindGroups</summary>
            <value>
                <c>true</c> if this instance is restricted the mutation can only be given to special PawnKindGroups; otherwise it
                can show up in any group, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.MutationDef.BlocksMutation(Pawnmorph.Hediffs.MutationDef,Verse.BodyPartRecord,Verse.BodyPartRecord)">
            <summary>
                checks if this mutation blocks the addition of the otherMutation.
            </summary>
            checks if this mutation on the 'thisPart' blocks the addition of the otherMutation on the 'addPart'
            checks if this mutation on the 'thisPart' blocks the addition of the otherMutation on the 'addPart'
            <param name="otherMutation">The other mutation.</param>
            <param name="thisPart">The part this mutation is already on.</param>
            <param name="addPart">The  part the otherMutation will be added to.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.MutationDef.ConfigErrors">
            <summary>
                Gets all configuration errors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.MutationDef.GivesInfluence(Pawnmorph.AnimalClassDef)">
            <summary>
                checks if this instance gives influence for the given animal class
            </summary>
            <param name="classDef">The class definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">classDef</exception>
        </member>
        <member name="M:Pawnmorph.Hediffs.MutationDef.GivesInfluence(Pawnmorph.MorphDef)">
            <summary>
                checks if this instance gives influence for the given morph
            </summary>
            <param name="morph">The morph.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">morph</exception>
        </member>
        <member name="M:Pawnmorph.Hediffs.MutationDef.ResolveReferences">
            <summary>
                Resolves the references.
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.MutationDef.BlockEntry">
            <summary>
                simple class for a single 'block entry'
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.BlockEntry.mutation">
            <summary>
                The mutation to block from being added
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationDef.BlockEntry.blockOnAnyPart">
            <summary>
                if true, the mutation will be block from any part, not just on the same part this mutation is on
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.MutationDef.BlockEntry.Blocks(Pawnmorph.Hediff_AddedMutation,Pawnmorph.Hediffs.MutationDef,Verse.BodyPartRecord)">
            <summary>
            Checks if the given source mutation blocks the given otherMutation being added at the given part
            </summary>
            <param name="sourceMutation">The source mutation.</param>
            <param name="otherMutation">The other mutation.</param>
            <param name="addPart">The add part.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.MutationEntry">
            <summary>
            simple POD that stores information about a mutation entry 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationEntry.mutation">
            <summary>
            The mutation
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationEntry.addChance">
            <summary>
            The chance to add this mutation 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationEntry.blocks">
            <summary>
            if true, a mutation chain will not progress further until this mutation is added 
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.MutationStage">
            <summary>
            hediff stage with an extra description field  
            </summary>
            <seealso cref="T:Verse.HediffStage" />
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationStage.aspectGivers">
            <summary>
            list of all aspect givers in this stage 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationStage.description">
            <summary>
            optional description override for a hediff in this stage 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationStage.labelOverride">
            <summary>
            The label override
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationStage.stopChance">
            <summary>
            the base chance that the mutation will stop progressing at this stage  
            </summary>
            this should be in [0,1]
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationStage.memory">
            <summary>
            memory to add when this stage is entered 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationStage.skipAspects">
            <summary>
            The skip aspects
            </summary>
        </member>
        <member name="P:Pawnmorph.Hediffs.MutationStage.SkipAspects">
            <summary>
            Gets the skip aspects.
            </summary>
            <value>
            The skip aspects.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.MutationStage.EnteredStage(Verse.Hediff)">
            <summary>called when the given hediff enters this stage</summary>
            <param name="hediff">The hediff.</param>
        </member>
        <member name="T:Pawnmorph.Hediffs.MutationStage.AspectEntry">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationStage.AspectEntry.aspect">
            <summary>
            The aspect the pawn must have 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationStage.AspectEntry.stage">
            <summary>
            The stage the aspect must be in to satisfy this entry, if null any stage will do 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.MutationStage.AspectEntry.Satisfied(Verse.Pawn)">
            <summary>
            checks if the given pawn satisfies this entry 
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.Hediffs.Giver_MutationCategoryGiver">
            <summary>
                mutation hediff giver that will only grab mutations from specific categories
            </summary>
            <seealso cref="T:Verse.HediffGiver" />
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationCategoryGiver.mutationCategories">
            <summary>
                list of mutation categories to look for
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationCategoryGiver.morphCategories">
            <summary>
                The morph categories to get mutations from
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationCategoryGiver.mtbDays">
            <summary>
                The MTB days
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationCategoryGiver.mtbUnits">
            <summary>
                The MTB unit
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.Giver_MutationCategoryGiver.OnIntervalPassed(Verse.Pawn,Verse.Hediff)">
            <summary>
                occurs every so often for all hediffs that have this giver
            </summary>
            <param name="pawn"></param>
            <param name="cause"></param>
        </member>
        <member name="M:Pawnmorph.Hediffs.Giver_MutationCategoryGiver.TryApply(Verse.Pawn,Verse.Hediff,Pawnmorph.MutagenDef)">
            <summary>
                Tries to apply this hediff giver
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
            <param name="mutagen">The mutagen.</param>
        </member>
        <member name="T:Pawnmorph.Hediffs.IDescriptiveStage">
            <summary>
            interface for a hediff stage that contains a description and label override
            </summary>
        </member>
        <member name="P:Pawnmorph.Hediffs.IDescriptiveStage.DescriptionOverride">
            <summary>
            Gets the description override.
            </summary>
            <value>
            The description override.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.IDescriptiveStage.LabelOverride">
            <summary>
            Gets the label override.
            </summary>
            <value>
            The label override.
            </value>
        </member>
        <member name="T:Pawnmorph.Hediffs.MorphDisease">
            <summary>
            hediff for morph diseases
            </summary>
            <seealso cref="T:Pawnmorph.Hediffs.MorphTf" />
        </member>
        <member name="P:Pawnmorph.Hediffs.MorphDisease.SeverityLabel">
            <summary>
            Gets the severity label.
            </summary>
            <value>
            The severity label.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.MorphDisease.AnyMutationsInStage(Verse.HediffStage)">
            <summary>
            returns true if there are ny mutations in this stage 
            </summary>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.FormerHuman">
            <summary>
                hediff class for the former human hediff
            </summary>
            <seealso cref="T:Verse.HediffWithComps" />
        </member>
        <member name="P:Pawnmorph.Hediffs.FormerHuman.LabelInBrackets">
            <summary>
                Gets the label in brackets.
            </summary>
            <value>
                The label in brackets.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.FormerHuman.ExposeData">
            <summary>Exposes the data.</summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.FormerHuman.PostAdd(System.Nullable{Verse.DamageInfo})">
            <summary>
                called after the hediff is added
            </summary>
            <param name="dinfo">The dinfo.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.FormerHuman.PostRemoved">
            <summary>
                called when the hediff is removed
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.FormerHuman.PostTick">
            <summary>called after the pawn's tick method.</summary>
        </member>
        <member name="P:Pawnmorph.Hediffs.FormerHuman.ShouldRemove">
            <summary>
            Gets a value indicating whether this instance should be removed.
            </summary>
            <value>
              <c>true</c> if this instance should be removed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Pawnmorph.Hediffs.RandomMorphFullTfStage">
            <summary>
            transformation stage that picks a random morph to turn the pawn into
            </summary>
            <seealso cref="T:Verse.HediffStage" />
            <seealso cref="T:Pawnmorph.Hediffs.IExecutableStage" />
            <seealso cref="T:Pawnmorph.Hediffs.IInitializable" />
        </member>
        <member name="F:Pawnmorph.Hediffs.RandomMorphFullTfStage.morph">
            <summary>
            The morph or class to pick random morphs from 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.RandomMorphFullTfStage.changeChance">
            <summary>
            The change chance
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.RandomMorphFullTfStage.categoryBlackList">
            <summary>
            a list of morph categories not to include 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.RandomMorphFullTfStage.ConfigErrors">
            <summary>
            Gets all Configuration errors in this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.RandomMorphFullTfStage.EnteredStage(Verse.Hediff)">
            <summary>called when the given hediff enters this stage</summary>
            <param name="hediff">The hediff.</param>
        </member>
        <member name="T:Pawnmorph.Hediffs.RandomMorphTransformationStage">
            <summary>
            transformation stage that picks a random set of mutations for each pawn 
            </summary>
            <seealso cref="T:Pawnmorph.Hediffs.TransformationStageBase" />
        </member>
        <member name="M:Pawnmorph.Hediffs.RandomMorphTransformationStage.ConfigErrors">
            <summary>
            returns all configuration errors in this stage
            </summary>
            <returns></returns>
        </member>
        <member name="F:Pawnmorph.Hediffs.RandomMorphTransformationStage.morph">
            <summary>
            The morph or class to pick from 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.RandomMorphTransformationStage.categoryBlackList">
            <summary>
            a list of morph categories not to include 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.RandomMorphTransformationStage.CYCLE_RATE">
            <summary>
            how fast the mutation types change 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.RandomMorphTransformationStage.GetEntries(Verse.Pawn,Verse.Hediff)">
            <summary>
            Gets the entries for the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.SimpleDescriptiveHediff">
            <summary>
            simple implementation of the <see cref="T:Pawnmorph.IDescriptiveHediff"/> interface 
            </summary>
            <seealso cref="T:Verse.HediffWithComps" />
            <seealso cref="T:Pawnmorph.IDescriptiveHediff" />
        </member>
        <member name="P:Pawnmorph.Hediffs.SimpleDescriptiveHediff.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.SimpleDescriptiveHediff.LabelBase">
            <summary>
            Gets the label base.
            </summary>
            <value>
            The label base.
            </value>
        </member>
        <member name="T:Pawnmorph.Hediffs.SyringeRifleTf">
            <summary>
            
            </summary>
            <seealso cref="T:Verse.Hediff" />
        </member>
        <member name="P:Pawnmorph.Hediffs.SyringeRifleTf.ShouldRemove">
            <summary>
            Gets a value indicating whether this instance should be removed.
            </summary>
            <value>
              <c>true</c> if this instance should be removed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.SyringeRifleTf.Initialize(Verse.Thing)">
            <summary>
            Initializes this instance with the given weapon
            </summary>
            <param name="weapon">The weapon.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.SyringeRifleTf.OnStageChanged(Verse.HediffStage)">
            <summary>
                Called when the stage changes.
            </summary>
            <param name="currentStage">The last stage.</param>
        </member>
        <member name="P:Pawnmorph.Hediffs.SyringeRifleTf.ChosenKind">
            <summary>
            Gets the kind of the chosen.
            </summary>
            <value>
            The kind of the chosen.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.SyringeRifleTf.ExposeData">
            <summary>
            Exposes the data.
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.SyringeTfStage">
            <summary>
            
            </summary>
            <seealso cref="T:Pawnmorph.Hediffs.TransformationStageBase" />
        </member>
        <member name="M:Pawnmorph.Hediffs.SyringeTfStage.GetEntries(Verse.Pawn,Verse.Hediff)">
            <summary>
            Gets the entries for the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.TransformationBase">
            <summary>abstract base class for all transformation hediffs</summary>
            <seealso cref="T:Pawnmorph.IDescriptiveHediff" />
            <seealso cref="T:Verse.Hediff" />
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.BlocksRaceCheck">
            <summary>
            Gets a value indicating whether this transformation hediff blocks the race checking 
            </summary>
            <value>
              <c>true</c> if this transformation hediff blocks the race checking; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.DebugString">
            <summary>
            Creates a debug string for this hediff 
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.Description">
            <summary>
                Gets the description.
            </summary>
            <value>
                The description.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.MeanMutationsPerDay">
            <summary>
            the expected number of mutations to happen in a single day 
            </summary>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.AllAvailableMutations">
            <summary>Gets the available mutations.</summary>
            <value>The available mutations.</value>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.FinishedAddingMutations">
            <summary>
                Gets a value indicating whether this instance has finished adding mutations or not.
            </summary>
            <value>
                <c>true</c> if this instance has finished adding mutations; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.LabelBase">
            <summary>Gets the label base.</summary>
            <value>The label base.</value>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.MinMutationsPerCheck">
            <summary>Gets the minimum mutations per check.</summary>
            if greater then 1, every-time a mutation is possible don't stop iterating over the parts until a mutable part is found
            <value>The minimum mutations per check.</value>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.CanReset">
            <summary>Gets a value indicating whether this instance can reset.</summary>
            <value><c>true</c> if this instance can reset; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.ExposeData">
            <summary>Exposes the data.</summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.PostAdd(System.Nullable{Verse.DamageInfo})">
            <summary>called after this hediff is added to the pawn</summary>
            <param name="dinfo">The dinfo.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.Tick">
            <summary>Ticks this instance.</summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.TransformationBase.forceRemove">
            <summary>
            set to true if this instance should be removed before severity reaches 0 
            </summary>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.ShouldRemove">
            <summary>
            Gets a value indicating whether this instance should be removed.
            </summary>
            <value>
              <c>true</c> if this instance should be removed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.FillPartCheckList(System.Collections.Generic.List{Verse.BodyPartRecord})">
            <summary>Fills the part check list.</summary>
            the check list is a list of all parts in the parents body def in the order mutations should be added
            <param name="checkList">The check list.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.GetAvailableMutations(Verse.HediffStage)">
            <summary>Gets the available the mutations from the given stage.</summary>
            <param name="currentStage">The current stage.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.Notify_AvailableMutationsChanged">
            <summary>Notifies this instance that the available mutations have changed.</summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.OnStageChanged(Verse.HediffStage)">
            <summary>
                Called when the stage changes.
            </summary>
            <param name="currentStage">The last stage.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.PostRemoved">
            <summary>
            called when the hediff is removed.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.TryGiveTransformations">
            <summary>Tries to give transformations</summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.AnyMutationsInStage(Verse.HediffStage)">
            <summary>
            returns true if there are ny mutations in this stage 
            </summary>
            <param name="stage"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.TryMergeWith(Verse.Hediff)">
            <summary>
            Tries the merge with the other hediff
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationBase.SingleComp">
            <summary>
            Gets the single comp for partial transformation hediffs 
            </summary>
            <value>
            The single comp.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.OnMutationsAdded(System.Int32)">
            <summary>
            Called when mutations are added the pawn.
            </summary>
            <param name="mutationsAdded">The mutations added.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.ResetMutationOrder">
            <summary>
            Resets the mutation order.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationBase.MarkForRemoval">
            <summary>
            Marks this hediff removal.
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.TransformationStage">
            <summary>
                hediff stage that adds the possibility of adding mutations
            </summary>
            <seealso cref="T:Verse.HediffStage" />
            <seealso cref="T:Pawnmorph.Hediffs.IDescriptiveStage" />
        </member>
        <member name="F:Pawnmorph.Hediffs.TransformationStage.mutations">
            <summary>The mutations that this stage can add</summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationStage.GetEntries(Verse.Pawn,Verse.Hediff)">
            <summary>
            Gets the entries for the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.TransformationStageBase">
            <summary>
            base class for all trans-formative hediff stages 
            </summary>
            <seealso cref="T:Verse.HediffStage" />
            <seealso cref="T:Pawnmorph.Hediffs.IDescriptiveStage" />
            <seealso cref="T:Pawnmorph.Hediffs.IExecutableStage" />
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationStageBase.GetEntries(Verse.Pawn,Verse.Hediff)">
            <summary>
            Gets the entries for the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationStageBase.ConfigErrors">
            <summary>
            returns all configuration errors in this stage
            </summary>
            <returns></returns>
        </member>
        <member name="F:Pawnmorph.Hediffs.TransformationStageBase.description">
            <summary>The description</summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.TransformationStageBase.labelOverride">
            <summary>The label override</summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.TransformationStageBase.letterText">
            <summary>The letter text</summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.TransformationStageBase.letterLabel">
            <summary>The letter label</summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.TransformationStageBase.letterDef">
            <summary>
            The letter definition
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.TransformationStageBase.meanMutationsPerDay">
            <summary>
            the expected number of mutations a pawn would get per day at this stage 
            </summary>
            note, this is affected by MutagenSensitivity stat 
        </member>
        <member name="M:Pawnmorph.Hediffs.TransformationStageBase.Pawnmorph#Hediffs#IExecutableStage#EnteredStage(Verse.Hediff)">
            <summary>called when the given hediff enters this stage</summary>
            <param name="hediff">The hediff.</param>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationStageBase.Pawnmorph#Hediffs#IDescriptiveStage#DescriptionOverride">
            <summary>
                Gets the description override.
            </summary>
            <value>
                The description override.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.TransformationStageBase.Pawnmorph#Hediffs#IDescriptiveStage#LabelOverride">
            <summary>
                Gets the label override.
            </summary>
            <value>
                The label override.
            </value>
        </member>
        <member name="T:Pawnmorph.Hediffs.WorkSettingsStage">
            <summary>
                hediff stage that affects what work the pawn is capable of doing
            </summary>
            <seealso cref="T:Verse.HediffStage" />
            <seealso cref="T:Pawnmorph.IWorkModifier" />
        </member>
        <member name="F:Pawnmorph.Hediffs.WorkSettingsStage.allowedWork">
            <summary>
                The allowed work tags
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.WorkSettingsStage.disallowedWork">
            <summary>
            The disallowed work tags
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.WorkSettingsStage.workFilter">
            <summary>
                a filter for work type defs
            </summary>
        </member>
        <member name="P:Pawnmorph.Hediffs.WorkSettingsStage.Pawnmorph#IWorkModifier#AllowedWorkTags">
            <summary>
                Gets the allowed work tags.
            </summary>
            <value>
                The allowed work tags.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.WorkSettingsStage.Pawnmorph#IWorkModifier#WorkTypeFilter">
            <summary>
                Gets the work type filter.
            </summary>
            <value>
                The work type filter.
            </value>
        </member>
        <member name="T:Pawnmorph.Hediffs.CompProperties_DependentPart">
            <summary>
            
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.CompProperties_RemoveType">
            <summary>
            hediff comp_properties for a comp that removes all hediffs of a certain type 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_RemoveType.removeType">
            <summary>
            The type of hediff to remove 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_RemoveType.blackList">
            <summary>
            a black list of hediffs to ignore 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProperties_RemoveType.ConfigErrors(Verse.HediffDef)">
            <summary>
            gets all configuration errors with this instance.
            </summary>
            <param name="parentDef">The parent definition.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProperties_RemoveType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.Hediffs.CompProperties_RemoveType"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.Comp_RemoveType">
            <summary>
            hediff comp that removes all hediffs of a given type 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_RemoveType.CompPostTick(System.Single@)">
            <summary>
            called every tick after the parent is updated.
            </summary>
            <param name="severityAdjustment">The severity adjustment.</param>
        </member>
        <member name="T:Pawnmorph.Hediffs.Comp_CheckRace">
            <summary>
            hediff component that checks the race of a pawn at the end of a Hediff_Morph 
            </summary>
            this is a component because it's set to go off just when a hediff_Morph ends naturally (after reeling) 
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_CheckRace.CompPostPostRemoved">
            <summary>
            called after the parent hediff is removed
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_CheckRace.CompPostTick(System.Single@)">
            <summary>
            called every tick after the thing updates 
            </summary>
            <param name="severityAdjustment"></param>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_CheckRace.CompExposeData">
            <summary>
            save or load data 
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.CompProperties_CheckRace">
            <summary>
            hediff comp that checks if the pawn should be turned into a hybrid at a certain stage 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_CheckRace.triggerStage">
            <summary>
            the stage to check the pawns race at 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProperties_CheckRace.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.Comp_TerrainProduction">
            <summary>
                hediff component that produces resources when over a certain area
            </summary>
            <seealso>
                <cref>Pawnmorph.Utilities.HediffCompBase{Pawnmorph.Hediffs.CompProperties_TerrainProduction}</cref>
            </seealso>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_TerrainProduction.ProduceNow">
            <summary>
            produces the corrected produced based on the current position of the pawn
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.CompProperties_TerrainProduction">
            <summary>
                CompProperties for a component that produces resources based on the terrain over a certain area
            </summary>
            <seealso>
                <cref>Pawnmorph.Utilities.HediffCompPropertiesBase{Pawnmorph.Hediffs.Comp_TerrainProduction}</cref>
            </seealso>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_TerrainProduction.entries">
            <summary>
            all entries that are used by the comp 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProperties_TerrainProduction.CanProduceOn(Verse.TerrainDef)">
            <summary>
            returns true if this comp can produce something on the given terrain 
            </summary>
            <param name="terrain"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProperties_TerrainProduction.ConfigErrors(Verse.HediffDef)">
            <summary>
            return all configuration errors with this instance 
            </summary>
            <param name="parentDef"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.CompProperties_TerrainProduction.Entry">
            <summary>
            a single production entry for
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_TerrainProduction.Entry.amount">
            <summary>
            the amount to produce 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_TerrainProduction.Entry.mtb">
            <summary>
            how often to produce this product 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_TerrainProduction.Entry.resource">
            <summary>
            the resource to produce 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_TerrainProduction.Entry.terrain">
            <summary>
            the terrain this is produced by 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_TerrainProduction.Entry.thought">
            <summary>
            the thought to add when the resource is produced 
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.Giver_MutationChaotic">
            <summary>
            hediff giver based off of HediffGiver_Mutation, but instead of one mutation it gives one of many 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationChaotic.blackListCategories">
            <summary>
            list of morph categories to exclude 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationChaotic.blackListDefs">
            <summary>
            list of hediff defs to ignore 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationChaotic.blackListMorphs">
            <summary>
            list of morphs to exclude 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationChaotic.allowRestricted">
            <summary>
            if true, then this giver can give restricted mutations as well
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationChaotic.mtbDays">
            <summary>
            how often to give mutations 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.Giver_MutationChaotic.mtbUnits">
            <summary>
            The MTB unit
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.Giver_MutationChaotic.OnIntervalPassed(Verse.Pawn,Verse.Hediff)">
            <summary>
            occurs every so often for all hediffs that have this giver 
            </summary>
            <param name="pawn"></param>
            <param name="cause"></param>
        </member>
        <member name="M:Pawnmorph.Hediffs.Giver_MutationChaotic.TryApply(Verse.Pawn,Verse.Hediff,Pawnmorph.MutagenDef)">
            <summary>
            Tries to apply this hediff giver 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
            <param name="mutagen">The mutagen.</param>
        </member>
        <member name="T:Pawnmorph.Hediffs.MutagenicBuildup">
            <summary>
            hediff type for mutagenic buildup
            </summary>
            <seealso cref="T:Pawnmorph.Hediffs.MorphTf" />
            should add more and more mutations as severity increases, with a full tf at a severity of 1
        </member>
        <member name="M:Pawnmorph.Hediffs.MutagenicBuildup.TryMergeWith(Verse.Hediff)">
            <summary>
            Tries the merge with the other hediff
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.Comp_MutationDependency">
            <summary>
            component representing a mutation dependency, some mutation that will be added to the pawn if not already there 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.Comp_MutationDependency.CompPostPostAdd(System.Nullable{Verse.DamageInfo})">
            <summary>
            called just after this instance's parent is added to a pawn 
            </summary>
            <param name="dinfo">The damage info.</param>
        </member>
        <member name="T:Pawnmorph.Hediffs.CompProperties_MutationDependency">
            <summary>
            a hediff component property for a mutation dependency, ie some hediff giver that fires when the mutation is added 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.CompProperties_MutationDependency.mutationDependency">
            <summary>
            The mutation dependency
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.CompProperties_MutationDependency.ConfigErrors(Verse.HediffDef)">
            <summary>
            Get all Configuration Errors with this instance
            </summary>
            <param name="parentDef">The parent definition.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediffs.MorphTransformationDefOf">
            <summary>
                static def of class containing morph transformation defs
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.RemoveFromPartComp">
            <summary>
                comp that removes other mutations when it's parent is added
            </summary>
            <seealso>
                <cref>Pawnmorph.Utilities.HediffCompBase{Pawnmorph.Hediffs.RemoveFromPartCompProperties}</cref>
            </seealso>
        </member>
        <member name="P:Pawnmorph.Hediffs.RemoveFromPartComp.AddedTick">
            <summary>
                Gets the tick (time) this comp was added.
            </summary>
            <value>
                The added tick.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediffs.RemoveFromPartComp.Layer">
            <summary>
                Gets the layer.
            </summary>
            <value>
                The layer.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediffs.RemoveFromPartComp.CompExposeData">
            <summary>
                exposes all data for this comp.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.RemoveFromPartComp.CompPostMake">
            <summary>
                called after this comp is created .
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.RemoveFromPartComp.CompPostPostAdd(System.Nullable{Verse.DamageInfo})">
            <summary>
                called after this instance was added to the pawn.
            </summary>
            <param name="dinfo">The damage info.</param>
        </member>
        <member name="P:Pawnmorph.Hediffs.RemoveFromPartComp.CompShouldRemove">
            <summary>
            Gets a value indicating whether the parent hediff should be removed.
            </summary>
            <value>
              <c>true</c> if hediff should be removed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Pawnmorph.Hediffs.RemoveFromPartCompProperties">
            <summary>
                properties for the comp that removes other mutations when it's parent is added
            </summary>
            <seealso>
                <cref>Pawnmorph.Utilities.HediffCompPropertiesBase{Pawnmorph.Hediffs.RemoveFromPartComp}</cref>
            </seealso>
        </member>
        <member name="F:Pawnmorph.Hediffs.RemoveFromPartCompProperties.layer">
            <summary>
                The layer to check for mutations
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.MutationLayer">
            <summary>
                flags representing the 'layer' a mutation resides on
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationLayer.Core">
            <summary>
                the mutation affects the core of the part
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediffs.MutationLayer.Skin">
            <summary>
                mutation affects the surface of a part
            </summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.SpreadingMutationComp">
            <summary>
            hediff comp for making a mutation spread over a body 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediffs.SpreadingMutationComp.CompPostTick(System.Single@)">
            <summary>called after its parent has been updated.</summary>
            <param name="severityAdjustment">The severity adjustment.</param>
        </member>
        <member name="M:Pawnmorph.Hediffs.SpreadingMutationComp.TryInfectPart(Verse.BodyPartRecord,System.Boolean,System.Int32)">
            <summary>
            try to infect a single part 
            </summary>
            <param name="record"></param>
            <param name="upward"></param>
            <param name="depth"></param>
            <returns>true if a part could be successfully infected </returns>
        </member>
        <member name="M:Pawnmorph.Hediffs.SpreadingMutationComp.CompExposeData">
            <summary>expose all data. in this comp</summary>
        </member>
        <member name="T:Pawnmorph.Hediffs.SpreadingMutationCompProperties">
            <summary>
            properties for the HediffComp Spreading 
            </summary>
            <seealso cref="T:Pawnmorph.Utilities.HediffCompPropertiesBase`1" />
        </member>
        <member name="F:Pawnmorph.Hediffs.SpreadingMutationCompProperties.maxTreeSearchDepth">
            <summary>
            how far from the parent's part will this comp search for a part to spread to
            </summary>
            setting this too high can cause lag 
        </member>
        <member name="F:Pawnmorph.Hediffs.SpreadingMutationCompProperties.mtb">
            <summary>The mean time between (units?) spread checks</summary>
        </member>
        <member name="M:Pawnmorph.HPatches.DrugPolicyPatches.DrugPolicyFix.Postfix(System.Collections.Generic.List{RimWorld.DrugTakeRecord})">
            <summary>
            simple fix to drug policy to account for thing defs being removed 
            </summary>
            <param name="___drugTakeRecords">The drug take records.</param>
        </member>
        <member name="M:Pawnmorph.HPatches.ImmunityHandlerPatches.FixImmunityHandler.Postfix(Verse.ImmunityHandler,System.Collections.Generic.List{Verse.ImmunityRecord})">
            <summary>
            fix for the immunity handler to remove records on load that are null or have null hediff defs .
            </summary>
            <param name="__instance">The instance.</param>
            <param name="___immunityList">The immunity list.</param>
        </member>
        <member name="T:Pawnmorph.HPatches.PawnGeneratorPatches">
            <summary>
            static class for containing HPatches to PawnGenerator class
            </summary>
        </member>
        <member name="M:Pawnmorph.HPatches.PawnCapacityUtilsPatch.GetTotalCapacityOffset(Verse.HediffSet,Verse.PawnCapacityDef)">
            <summary>
            find the original offset without setMax 
            </summary>
            <param name="hSet"></param>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hybrids.IPartTransformer">
            <summary>
            interface for something that turns a part record from one body def into a part record from another body def 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hybrids.IPartTransformer.Transform(Verse.BodyPartRecord,Verse.BodyDef)">
            <summary>
            Transforms the specified record into a record from the target def 
            </summary>
            <param name="record">The record.</param>
            <param name="targetDef">The target definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">record or targetDef</exception>
        </member>
        <member name="T:Pawnmorph.Hybrids.DefaultPartTransformer">
            <summary>
            default implementation of IPartTransformer 
            </summary>
            <seealso cref="T:Pawnmorph.Hybrids.IPartTransformer" />
        </member>
        <member name="M:Pawnmorph.Hybrids.DefaultPartTransformer.Transform(Verse.BodyPartRecord,Verse.BodyDef)">
            <summary>
            Transforms the specified record into a record from the target def 
            </summary>
            <param name="record">The record.</param>
            <param name="targetDef">The target definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">record or targetDef</exception>
        </member>
        <member name="T:Pawnmorph.Hybrids.HThoughtDefOf">
            <summary>
            static container for hybrid related thought defs
            </summary>
        </member>
        <member name="T:Pawnmorph.Hybrids.HTraitDefOf">
            <summary>
            static container for various hybrid race related traits 
            </summary>
        </member>
        <member name="T:Pawnmorph.Hybrids.HybridRaceSettings">
            <summary>
            class representing the hybrid race settings 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.foodSettings">
            <summary>unused</summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.statModifiers">
            <summary>The stat modifiers</summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.thoughtSettings">
            <summary>The thought settings</summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.restrictionSettings">
            <summary>
            the race restriction settings 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.graphicsSettings">
            <summary>The graphics settings</summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.traitSettings">
            <summary>The trait settings</summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.explicitHybridRace">
            <summary>
            The explicit hybrid race
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.transferHumanBodyAddons">
            <summary>
            if true and explicitHybridRace is set, human hediff graphics will be added onto the explicit hybrid race 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.requiredMutations">
            <summary>
            a list of mutations that will be added to a pawn when they become a hybrid if they do not have them already 
            </summary>
        </member>
        <member name="P:Pawnmorph.Hybrids.HybridRaceSettings.Transformer">
            <summary>
            Gets the transformer.
            </summary>
            <value>
            The transformer.
            </value>
            <exception cref="T:System.InvalidCastException">tried to cast {partTransformer.Name} to {nameof(IPartTransformer)}</exception>
        </member>
        <member name="T:Pawnmorph.Hybrids.HybridRaceSettings.HybridThoughtSettings">
            <summary>
            settings for the hybrid race's thoughts 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.HybridThoughtSettings.replacerList">
            <summary>list of thoughts that will be replaced </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.HybridThoughtSettings.ateAnimalThought">
            <summary>thought given when a pawn of this hybrid race eats an animal listed in the morphDef</summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.HybridThoughtSettings.butcheredAnimalThought">
            <summary>
            thought given when a pawn of this hybrid race butchers an animal listed in the morph def 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.HybridThoughtSettings.suppressHumanlikeCannibalThoughts">
            if true this morph will not get the cannibal thoughts 
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.HybridThoughtSettings.canEatRaw">
            if true then the AteRawFood thought will be suppressed 
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.HybridThoughtSettings.thoughtsBlackList">
            <summary>a list of thoughtDefs that this hybrid race cannot get </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.HybridThoughtSettings.ateThoughtsSpecifics">
            <summary>
            a list of thoughts when the pawn eats specific things 
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.HybridThoughtSettings.butcherThoughtsSpecifics">
            <summary>
            list of thoughts when a pawn of this race butchers specific things 
            </summary>
        </member>
        <member name="T:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings">
            <summary>
            class representing the graphic setting of a morph hybrid race
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.skinColorOverride">
            <summary>
            The skin color override.
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.femaleSkinColorOverride">
            <summary>
            The female skin color override.
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.skinColorOverrideSecond">
            <summary>
            The skin color override second.
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.femaleSkinColorOverrideSecond">
            <summary>
            The female skin color override second.
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.femaleHairColorOverride">
            <summary>
            The female hair color override.
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.hairColorOverride">
            <summary>
            The hair color override.
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.femaleHairColorOverrideSecond">
            <summary>
            The female hair color override second.
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.hairColorOverrideSecond">
            <summary>
            The hair color override second.
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.customDrawSize">
            <summary>
            The custom draw size.
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.GraphicsSettings.customHeadDrawSize">
            <summary>
            The custom head draw size.
            </summary>
        </member>
        <member name="T:Pawnmorph.Hybrids.HybridRaceSettings.FoodCategoryOverride">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.FoodCategoryOverride.foodFlags">
            <summary>The food flags</summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.FoodCategoryOverride.preferability">
            <summary>The preferability</summary>
        </member>
        <member name="T:Pawnmorph.Hybrids.HybridRaceSettings.FoodSettings">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.FoodSettings.foodOverrides">
            <summary>The food overrides</summary>
        </member>
        <member name="T:Pawnmorph.Hybrids.HybridRaceSettings.TraitSettings">
            <summary>
            obsolete
            </summary>
        </member>
        <member name="F:Pawnmorph.Hybrids.HybridRaceSettings.TraitSettings.forcedTraits">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pawnmorph.Hybrids.HybridRaceSettings.GenerateThoughtSettings(AlienRace.ThoughtSettings,Pawnmorph.MorphDef)">
            <summary>
            generate AlienRace thought settings with the given morph def 
            </summary>
            <param name="humanDefault"></param>
            <param name="morphDef"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hybrids.RaceGenerator">
            <summary> Static class responsible for generating the implicit races.</summary>
        </member>
        <member name="P:Pawnmorph.Hybrids.RaceGenerator.ImplicitRaces">
            <summary>an enumerable collection of all implicit races generated by the MorphDefs</summary>
            includes unused implicit races generated if the MorphDef has an explicit hybrid race 
            <value>The implicit races.</value>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceGenerator.TryGetMorphOfRace(Verse.ThingDef,Pawnmorph.MorphDef@)">
            <summary> Try to find the morph def associated with the given race.</summary>
            <param name="race"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceGenerator.GetMorphOfRace(Verse.ThingDef)">
            <summary> Gets the morph Def associated with this race, if any.</summary>
            <param name="race"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceGenerator.GenerateHybridGeneralSettings(AlienRace.GeneralSettings,Pawnmorph.MorphDef,AlienRace.ThingDef_AlienRace)">
            <summary>
            Generate general settings for the hybrid race given the human settings and morph def.
            </summary>
            <param name="human">The human.</param>
            <param name="morph">The morph.</param>
            <param name="impliedRace">The implied race.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceGenerator.GenerateHybridRestrictionSettings(AlienRace.RaceRestrictionSettings,Pawnmorph.MorphDef)">
            <summary> Generate the alien race restriction setting from the human default and the given morph.</summary>
            <param name="human"></param>
            <param name="morph"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceGenerator.IsMorphRace(Verse.ThingDef)">
            <summary>
            Determines whether this race is a morph hybrid race
            </summary>
            <param name="raceDef">The race definition.</param>
            <returns>
              <c>true</c> if the race is a morph hybrid race; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">raceDef</exception>
        </member>
        <member name="T:Pawnmorph.Hybrids.RaceShiftUtilities">
            <summary>
            a collection of utilities around changing a pawn's race 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceShiftUtilities.CompPropComparer.Equals(Verse.CompProperties,Verse.CompProperties)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type <paramref name="T" /> to compare.</param>
            <param name="y">The second object of type <paramref name="T" /> to compare.</param>
            <returns>
            <see langword="true" /> if the specified objects are equal; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceShiftUtilities.CompPropComparer.GetHashCode(Verse.CompProperties)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <see langword="null" />.</exception>
        </member>
        <member name="F:Pawnmorph.Hybrids.RaceShiftUtilities.RACE_CHANGE_MESSAGE_ID">
            <summary>
            The race change message identifier (used in the keyed translation file)
            </summary>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceShiftUtilities.IsMorphHybrid(Verse.Pawn)">
            <summary>
            Determines whether this pawn is a morph hybrid 
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if the specified pawn is a morph hybrid; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceShiftUtilities.ChangePawnRace(Verse.Pawn,Verse.ThingDef,System.Boolean)">
            <summary>
            safely change the pawns race
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="race">The race.</param>
            <param name="reRollTraits">if race related traits should be reRolled</param>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceShiftUtilities.ChangePawnToMorph(Verse.Pawn,Pawnmorph.MorphDef,System.Boolean,System.Boolean)">
            <summary>
            change the given pawn to the hybrid race of the desired morph
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="morph">the morph to change the pawn to</param>
            <param name="addMissingMutations">if true, any missing mutations will be applied to the pawn</param>
            <param name="displayNotifications">if set to <c>true</c> display race shit notifications.</param>
            <exception cref="T:System.ArgumentNullException">
            pawn
            or
            morph
            </exception>
        </member>
        <member name="M:Pawnmorph.Hybrids.RaceShiftUtilities.RevertPawnToHuman(Verse.Pawn)">
            <summary>
            change the race of the pawn back to human 
            </summary>
            <param name="pawn"></param>
        </member>
        <member name="T:Pawnmorph.IDescriptiveHediff">
            <summary>
            interface for hediffs that have a custom description 
            </summary>
        </member>
        <member name="P:Pawnmorph.IDescriptiveHediff.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="T:Pawnmorph.IMentalStateRecoveryReceiver">
            <summary>
            interface for things that receive notifications when a pawn recovers from a mental state 
            </summary>
        </member>
        <member name="M:Pawnmorph.IMentalStateRecoveryReceiver.OnRecoveredFromMentalState(Verse.AI.MentalState)">
            <summary>
            Called when the pawn recovered from the given mental state.
            </summary>
            <param name="mentalState">State of the mental.</param>
        </member>
        <member name="T:Pawnmorph.IncidentWorkers.MutagenicDiseasesHuman">
            <summary>
            incident worker for mutagenic diseases 
            </summary>
            <seealso cref="T:RimWorld.IncidentWorker_DiseaseHuman" />
        </member>
        <member name="M:Pawnmorph.IncidentWorkers.MutagenicDiseasesHuman.PotentialVictimCandidates(RimWorld.IIncidentTarget)">
            <summary>
            Gets all Potential victim candidates.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.IncidentWorkers.MutagenicDiseasesHuman.CanFireNowSub(RimWorld.IncidentParms)">
            <summary>
            Determines whether this instance with the specified parms can fire now
            </summary>
            <param name="parms">The parms.</param>
            <returns>
              <c>true</c> if this instance with the specified parms can fire now otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Pawnmorph.IncidentWorkers.MutagenicFallout">
            <summary>
            incident worker for the mutagenic fallout event 
            </summary>
            <seealso cref="T:RimWorld.IncidentWorker_MakeGameCondition" />
        </member>
        <member name="M:Pawnmorph.IncidentWorkers.MutagenicFallout.CanFireNowSub(RimWorld.IncidentParms)">
            <summary>
            Determines whether the incident can happen now 
            </summary>
            <param name="parms">The parms.</param>
            <returns>
              <c>true</c> if this incident can occur now otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Pawnmorph.IncidentWorker_MutagenicShipCrash">
            <summary>
                incident worker for mutagenic ship crash
            </summary>
            <seealso cref="T:RimWorld.IncidentWorker" />
        </member>
        <member name="P:Pawnmorph.IncidentWorker_MutagenicShipCrash.CountToSpawn">
            <summary>
                Gets the count to spawn.
            </summary>
            <value>
                The count to spawn.
            </value>
        </member>
        <member name="M:Pawnmorph.IncidentWorker_MutagenicShipCrash.CanFireNowSub(RimWorld.IncidentParms)">
            <summary>
                Determines whether this instance can fire now with the specified parms
            </summary>
            <param name="parms">The parms.</param>
            <returns>
                <c>true</c> if this instance can fire now with the specified parms otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.IncidentWorker_MutagenicShipCrash.TryExecuteWorker(RimWorld.IncidentParms)">
            <summary>
                Tries to execute the worker.
            </summary>
            <param name="parms">The parms.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.IngestionEffects.AddMorphCategoryTfHediff">
            <summary>
            ingestion outcome doer that adds a tf hediff picked from a given morph category 
            </summary>
            <seealso cref="T:RimWorld.IngestionOutcomeDoer" />
        </member>
        <member name="F:Pawnmorph.IngestionEffects.AddMorphCategoryTfHediff.fullTf">
            <summary>
            The full tf
            </summary>
        </member>
        <member name="F:Pawnmorph.IngestionEffects.AddMorphCategoryTfHediff.morphCategory">
            <summary>
            The morph category
            </summary>
        </member>
        <member name="F:Pawnmorph.IngestionEffects.AddMorphCategoryTfHediff.severity">
            <summary>
            The initial severity
            </summary>
        </member>
        <member name="M:Pawnmorph.IngestionEffects.AddMorphCategoryTfHediff.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>
            Does the special hediff effect 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_AddRandomAspect">
            <summary>
            ingestion out come doer that adds an aspect to a pawn
            </summary>
            <seealso cref="T:RimWorld.IngestionOutcomeDoer" />
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_AddRandomAspect.entries">
            <summary>The aspects to add</summary>
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_AddRandomAspect.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>Does the ingestion outcome special.</summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_RemoveAspects">
            <summary>
            ingestion out come doer that adds an aspect to a pawn
            </summary>
            <seealso cref="T:RimWorld.IngestionOutcomeDoer" />
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_RemoveAspects.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>Does the ingestion outcome special.</summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_AddMorphTf">
            <summary>
            ingestion outcome doer for adding morph tf based on a specific morph, or class of morphs 
            </summary>
            <seealso cref="T:RimWorld.IngestionOutcomeDoer" />
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_AddMorphTf.animalClass">
            <summary>
            The animal class or specific morph to pick the morph tf from 
            </summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_AddMorphTf.severity">
            <summary>
            The severity to add the hediff at 
            </summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_AddMorphTf.tfTypes">
            <summary>
            The tf types to pick from 
            </summary>
            this is a flag so you can pick both Full and partial if you want
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_AddMorphTf.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>
            Does the ingestion outcome special.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.IPMThingComp">
            <summary>
            interface for thing comps so they can receive messages when they are being added/remove dynamically by hybrid race changes  
            </summary>
        </member>
        <member name="M:Pawnmorph.IPMThingComp.PreRemove">
            <summary>
            called just before a comp is about to be removed from the pawn 
            </summary>
        </member>
        <member name="M:Pawnmorph.IPMThingComp.PostRemove">
            <summary>
            called just after a comp is removed from the pawn
            </summary>
        </member>
        <member name="M:Pawnmorph.IPMThingComp.Init">
            <summary>
            Initializes this instance after being added during a race change
            </summary>
        </member>
        <member name="T:Pawnmorph.IWorkModifier">
            <summary>
            interface for something that modifies the kind of work a pawn can do 
            </summary>
        </member>
        <member name="P:Pawnmorph.IWorkModifier.AllowedWorkTags">
            <summary>
            Gets the allowed work tags.
            </summary>
            <value>
            The allowed work tags.
            </value>
        </member>
        <member name="P:Pawnmorph.IWorkModifier.WorkTypeFilter">
            <summary>
            Gets the work type filter.
            </summary>
            <value>
            The work type filter.
            </value>
        </member>
        <member name="T:Pawnmorph.Jobs.Driver_InteractFormerHuman">
            <summary>
                abstract base class for all interactions with former humans
            </summary>
            <seealso cref="T:Verse.AI.JobDriver" />
        </member>
        <member name="F:Pawnmorph.Jobs.Driver_InteractFormerHuman.AnimalInd">
            <summary>
            The animal index
            </summary>
        </member>
        <member name="F:Pawnmorph.Jobs.Driver_InteractFormerHuman.FeedCount">
            <summary>
            The feed count
            </summary>
        </member>
        <member name="F:Pawnmorph.Jobs.Driver_InteractFormerHuman.MaxFoodPreferability">
            <summary>
            The maximum food preferability
            </summary>
        </member>
        <member name="P:Pawnmorph.Jobs.Driver_InteractFormerHuman.Animal">
            <summary>
            Gets the animal.
            </summary>
            <value>
            The animal.
            </value>
        </member>
        <member name="P:Pawnmorph.Jobs.Driver_InteractFormerHuman.CanInteractNow">
            <summary>
            Gets a value indicating whether this instance can interact now.
            </summary>
            <value>
              <c>true</c> if this instance can interact now; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_InteractFormerHuman.ExposeData">
            <summary>
            Exposes the data.
            </summary>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_InteractFormerHuman.RequiredNutritionPerFeed(Verse.Pawn)">
            <summary>
                gets the amount of nutrition needed per feed.
            </summary>
            <param name="animal">The animal.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_InteractFormerHuman.TryMakePreToilReservations(System.Boolean)">
            <summary>
            Tries the make pre toil reservations.
            </summary>
            <param name="errorOnFailed">if set to <c>true</c> [error on failed].</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_InteractFormerHuman.FinalInteractToil">
            <summary>
            Finals the interact toil.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_InteractFormerHuman.MakeNewToils">
            <summary>
            Makes the new toils.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_InteractFormerHuman.StartFeedAnimal(Verse.AI.TargetIndex)">
            <summary>
                gets the start feed animal toil
            </summary>
            <param name="tameeInd">The tamee ind.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_InteractFormerHuman.TalkToAnimal(Verse.AI.TargetIndex)">
            <summary>
                gets the 'talk to animal' toil
            </summary>
            <param name="tameeInd">The tamee ind.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_InteractFormerHuman.FeedToils">
            <summary>
            gets the Feeds toils.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Jobs.Driver_RecruitSapientFormerHuman">
            <summary>
            job driver for recruiting a sapient former human
            </summary>
            <seealso cref="T:Pawnmorph.Jobs.Driver_InteractFormerHuman" />
        </member>
        <member name="P:Pawnmorph.Jobs.Driver_RecruitSapientFormerHuman.CanInteractNow">
            <summary>
            Gets a value indicating whether this instance can interact now.
            </summary>
            <value>
              <c>true</c> if this instance can interact now; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_RecruitSapientFormerHuman.FinalInteractToil">
            <summary>
            Gets the Final indirect toil
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_RecruitSapientFormerHuman.MakeNewToils">
            <summary>
            Makes the new toils.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_RecruitSapientFormerHuman.FeedToils">
            <summary>
            gets the Feeds toils.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Jobs.Giver_FoodOptimized">
            <summary>
            job giver for the get food job that is optimized for morphs and former humans 
            </summary>
            <seealso cref="T:RimWorld.JobGiver_GetFood" />
        </member>
        <member name="T:Pawnmorph.Jobs.Driver_TerrainProduction">
            <summary>
                job driver for the 'find mushrooms' job
            </summary>
            <seealso cref="T:Verse.AI.JobDriver" />
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_TerrainProduction.TryMakePreToilReservations(System.Boolean)">
            <summary>
                Tries to make pre toil reservations.
            </summary>
            <param name="errorOnFailed">if set to <c>true</c> [error on failed].</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_TerrainProduction.MakeNewToils">
            <summary>
            Makes the new toils.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Jobs.Driver_ResurrectTf">
            <summary>
            job driver for the tf resurrector 
            </summary>
            <seealso cref="T:Verse.AI.JobDriver" />
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_ResurrectTf.TryMakePreToilReservations(System.Boolean)">
            <summary>
            Tries the make pre toil reservations.
            </summary>
            <param name="errorOnFailed">if set to <c>true</c> [error on failed].</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_ResurrectTf.MakeNewToils">
            <summary>
            Makes the new toils.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Jobs.Driver_MilkSelf">
            <summary> Job driver to make humanoid pawns milk themselves using HediffComp_Production. </summary>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_MilkSelf.Produce">
            <summary>
            Produce whatever resources this driver is producing.
            </summary>
        </member>
        <member name="T:Pawnmorph.Jobs.Driver_ProduceThing">
            <summary> Base class for productive mutation's job driver. </summary>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_ProduceThing.TryMakePreToilReservations(System.Boolean)">
            <summary>
            Tries the make pre toil reservations.
            </summary>
            <param name="errorOnFailed">if set to <c>true</c> error on failed.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_ProduceThing.MakeNewToils">
            <summary>
            Makes the new toils.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_ProduceThing.Produce">
            <summary>
            Produce whatever resources this driver is producing.
            </summary>
        </member>
        <member name="T:Pawnmorph.Jobs.Giver_MilkSelf">
            <summary>
            job giver for pawns milking themselves 
            </summary>
        </member>
        <member name="M:Pawnmorph.Jobs.Giver_MilkSelf.TryGiveJob(Verse.Pawn)">
            <summary>
            attempt to generate a job for the given pawn 
            </summary>
            <param name="pawn"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Jobs.Giver_SapientAnimalJoy">
            <summary>
            job giver to give sapient animals joy jobs 
            </summary>
            <seealso cref="T:RimWorld.JobGiver_GetJoy" />
        </member>
        <member name="M:Pawnmorph.Jobs.Giver_SapientAnimalJoy.TryGiveJobFromJoyGiverDefDirect(RimWorld.JoyGiverDef,Verse.Pawn)">
            <summary>
            Tries to give the pawn a job from joy giver definition
            </summary>
            <param name="def">The definition.</param>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Jobs.Giver_SapientAnimalJoy.GetPriority(Verse.Pawn)">
            <summary>
            Gets the priority.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Jobs.Giver_HuntingBreak">
            <summary>
            
            </summary>
            <seealso cref="T:Verse.AI.ThinkNode_JobGiver" />
        </member>
        <member name="M:Pawnmorph.Jobs.Giver_HuntingBreak.TryGiveJob(Verse.Pawn)">
            <summary>
            Tries the give a job to the pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Jobs.Driver_LayEgg">
            <summary> Job driver to make humanoid pawns lay eggs using HediffComp_Production. </summary>
        </member>
        <member name="M:Pawnmorph.Jobs.Driver_LayEgg.Produce">
            <summary>
            Produce whatever resources this driver is producing.
            </summary>
        </member>
        <member name="T:Pawnmorph.Jobs.Giver_LayEgg">
            <summary> Job giver for making a human pawn lay eggs. </summary>
        </member>
        <member name="M:Pawnmorph.Jobs.Giver_LayEgg.TryGiveJob(Verse.Pawn)">
            <summary>
            attempt to create a new job for the given pawn 
            </summary>
            <param name="pawn"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.MergedPawnUtilities">
            <summary>
                static class containing merged pawn related utilities
            </summary>
        </member>
        <member name="M:Pawnmorph.MergedPawnUtilities.TransferAspects(System.Collections.Generic.IEnumerable{Verse.Pawn},Verse.Pawn)">
            <summary>
                Transfers the aspects to the given meld.
            </summary>
            <param name="originalPawns">The original pawns.</param>
            <param name="mergedPawn">The merged pawn.</param>
        </member>
        <member name="M:Pawnmorph.MergedPawnUtilities.TransferToMergedPawn(System.Collections.Generic.IReadOnlyList{Verse.Pawn},Verse.Pawn)">
            <summary>
            Transfers traits, aspects, and relationships to a merged pawn.
            </summary>
            <param name="originals">The originals.</param>
            <param name="mergedPawn">The merged pawn.</param>
            <exception cref="T:System.ArgumentNullException">
            originals
            or
            mergedPawn
            </exception>
        </member>
        <member name="T:Pawnmorph.ModInitializationException">
            <summary>
            exception for when something goes very wrong during mod initialization 
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Pawnmorph.ModInitializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.ModInitializationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Pawnmorph.ModInitializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.ModInitializationException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Pawnmorph.ModInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.ModInitializationException"/> class.
            </summary>
            <param name="serializationInfo">The serialization information.</param>
            <param name="streamingContext">The streaming context.</param>
        </member>
        <member name="T:Pawnmorph.InstinctUtilities">
            <summary>
                static class containing useful instinct related utilities
            </summary>
        </member>
        <member name="F:Pawnmorph.InstinctUtilities.AVERAGE_MAX_SAPIENCE">
            <summary>
                The average resistance of pawns
            </summary>
            use this value to scale control values to a better range
        </member>
        <member name="F:Pawnmorph.InstinctUtilities.EPSILON">
            <summary>
            a very small value 
            </summary>
        </member>
        <member name="M:Pawnmorph.InstinctUtilities.GetInstinctChangePerTick(Verse.Pawn)">
            <summary>
            Gets the instinct change per tick.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.InstinctUtilities.GetLabel(Pawnmorph.SapienceLevel)">
            <summary>
            Gets the label.
            </summary>
            <param name="level">The level.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.InstinctUtilities.CalculateControl(Verse.Pawn,System.Single)">
            <summary>
                Calculates the total control has left
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="instinct">The instinct.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.InstinctUtilities.CalculateControlChange(Verse.Pawn,System.Single)">
            <summary>
                Calculates the change in control caused by the given instinct change.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="instinctChange">The instinct change.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.InstinctUtilities.CalculateNetResistance(Verse.Pawn)">
            <summary>
                Calculates the net resistance of this pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="F:Pawnmorph.InstinctUtilities.AVERAGE_RESISTANCE">
            <summary>
            The average resistance
            </summary>
        </member>
        <member name="M:Pawnmorph.InstinctUtilities.GetControlNeed(Verse.Pawn)">
            <summary>
            Gets the control need of the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.IPawnTransformer">
            <summary>
            interface for a thing that can transform a pawn 
            </summary>
        </member>
        <member name="M:Pawnmorph.IPawnTransformer.TryTransform(Verse.Pawn,Verse.Hediff)">
            <summary>
            Tries to transform the pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.IPawnTransformer.TransformPawn(Verse.Pawn,Verse.Hediff)">
            <summary>
            transforms pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
            <returns>if the transformation was successful or not, only false if there was an error</returns>
        </member>
        <member name="T:Pawnmorph.Joy.Giver_TerrainProduction">
            <summary>
            joy giver for terrain production jobs 
            </summary>
            <seealso cref="T:RimWorld.JoyGiver" />
        </member>
        <member name="M:Pawnmorph.Joy.Giver_TerrainProduction.TryGiveJob(Verse.Pawn)">
            <summary>
            Tries to give a job to the given pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Mental.StateWorker_Hunt">
            <summary>
            mental state worker for the 'hunting' former human break 
            </summary>
            <seealso cref="T:Verse.AI.MentalStateWorker" />
        </member>
        <member name="M:Pawnmorph.Mental.StateWorker_Hunt.StateCanOccur(Verse.Pawn)">
            <summary>
            States the can occur.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Mental.State_Hunting">
            <summary>
            mental state for the hunting mental break 
            </summary>
            <seealso cref="T:Verse.AI.MentalState" />
        </member>
        <member name="M:Pawnmorph.Mental.State_Hunting.PostStart(System.String)">
            <summary>
            called when the mental break starts
            </summary>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:Pawnmorph.Mental.State_Hunting.ExposeData">
            <summary>
            Exposes the data.
            </summary>
        </member>
        <member name="P:Pawnmorph.Mental.State_Hunting.Prey">
            <summary>
            Gets the prey.
            </summary>
            <value>
            The prey.
            </value>
        </member>
        <member name="M:Pawnmorph.Mental.State_Hunting.MentalStateTick">
            <summary>
            Mentals the state tick.
            </summary>
        </member>
        <member name="M:Pawnmorph.Mental.State_Hunting.Notify_AttackedTarget(Verse.LocalTargetInfo)">
            <summary>
            Notifies the attacked target.
            </summary>
            <param name="hitTarget">The hit target.</param>
        </member>
        <member name="M:Pawnmorph.Mental.State_Hunting.PostEnd">
            <summary>
            called when this state ends.
            </summary>
        </member>
        <member name="M:Pawnmorph.Mental.State_Hunting.PreStart">
            <summary>
            called before the mental state is started 
            </summary>
        </member>
        <member name="M:Pawnmorph.Mental.State_Hunting.GetBeginLetterText">
            <summary>
            Gets the begin letter text.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.MutagenicBuildupUtilities">
            <summary>
            static class for various mutagenic buildup related utilities 
            </summary>
        </member>
        <member name="M:Pawnmorph.MutagenicBuildupUtilities.GetMutagenicBuildupMultiplier(Verse.Pawn,Pawnmorph.MutagenDef)">
            <summary>
            Gets the net mutagenic buildup multiplier for this pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="mutagenDef">The mutagen definition.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutagenicBuildupUtilities.AdjustMutagenicBuildup(Verse.Def,Verse.Pawn,System.Single)">
            <summary>
            Adjusts the mutagenic buildup for the given pawn using the given source 
            </summary>
            <param name="source">The source.</param>
            <param name="pawn">The pawn.</param>
            <param name="adjustValue">The adjust value.</param>
        </member>
        <member name="T:Pawnmorph.MutationResult">
            <summary>
            struct that holds information about the result of a call to MutationUtility.AddMutation
            </summary>
            
        </member>
        <member name="P:Pawnmorph.MutationResult.Empty">
            <summary>
            an 'empty' mutation result 
            </summary>
            <value>
            The empty.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationResult.Parts">
            <summary>
            Gets the parts.
            </summary>
            <value>
            The parts.
            </value>
        </member>
        <member name="M:Pawnmorph.MutationResult.#ctor(System.Collections.Generic.IEnumerable{Pawnmorph.Hediff_AddedMutation})">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MutationResult"/> struct.
            </summary>
            <param name="mutations">The mutations.</param>
        </member>
        <member name="M:Pawnmorph.MutationResult.#ctor(Pawnmorph.Hediff_AddedMutation)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MutationResult"/> struct.
            </summary>
            <param name="mutation">The mutation.</param>
            <exception cref="T:System.ArgumentNullException">mutation</exception>
        </member>
        <member name="M:Pawnmorph.MutationResult.#ctor(Pawnmorph.Hediff_AddedMutation[])">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MutationResult"/> struct.
            </summary>
            <param name="mutations">The mutations.</param>
        </member>
        <member name="M:Pawnmorph.MutationResult.op_Implicit(Pawnmorph.MutationResult)~System.Boolean">
            <summary>
            Performs an implicit conversion from <see cref="T:Pawnmorph.MutationResult"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="result">The result.</param>
            <returns>
            true if any mutations were added, false otherwise 
            </returns>
        </member>
        <member name="M:Pawnmorph.MutationResult.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Pawnmorph.MutationResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Pawnmorph.MutationResult.Count">
            <summary>Gets the number of elements in the collection.</summary>
            <returns>The number of elements in the collection. </returns>
        </member>
        <member name="P:Pawnmorph.MutationResult.Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list.</summary>
            <param name="index">The zero-based index of the element to get. </param>
            <returns>The element at the specified index in the read-only list.</returns>
        </member>
        <member name="T:Pawnmorph.MutationRuleDef">
            <summary>
                def for all 'mutation' rules
            </summary>
            mutation rules are rules that are run on pawns every so often that will add mutations/hediffs if certain criteria are met
            <seealso cref="T:Verse.Def" />
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.CHECK_RATE">
            <summary>
                how often the rules are checked
            </summary>
        </member>
        <member name="P:Pawnmorph.MutationRuleDef.AllRules">
            <summary>
            Gets all rules in this def 
            </summary>
            <value>
            All rules.
            </value>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.mtth">
            <summary>
                the mean time to happen (in days)
            </summary>
            the mean time it takes for a rule to trigger one it's conditions are met'
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.ruleWorker">
            <summary>
                the type of the rule worker
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.priority">
            <summary>
                The priority of this rule
            </summary>
            rules with a 'lower' priority value are run before those with a higher priority value
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.conditions">
            <summary>
                The entries that are check against a pawn to see if the rule can be executed
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.aspectConditions">
            <summary>
            list of aspect conditions
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.results">
            <summary>
                The output entry when this rule is run
            </summary>
        </member>
        <member name="P:Pawnmorph.MutationRuleDef.Worker">
            <summary>
            Gets the instantiated mutation rule worker.
            </summary>
            <value>
            The worker.
            </value>
        </member>
        <member name="M:Pawnmorph.MutationRuleDef.ConfigErrors">
            <summary>
                gets all configuration errors on this object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationRuleDef.ResolveReferences">
            <summary>
                Resolves the references.
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationRuleDef.TryRule(Verse.Pawn)">
            <summary>
                Tries to execute the rule on the given pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>if the rule was successfully executed on the pawn</returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.MutationRuleDef.AspectEntry">
            <summary>
            aspect rule entry
            </summary>
            <seealso cref="T:Pawnmorph.MutationRuleDef.IMRuleEntry" />
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.AspectEntry.aspectDef">
            <summary>
                The aspect definition to look for
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.AspectEntry.aspectStage">
            <summary>
                if set, then the aspect must be in this given stage
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationRuleDef.AspectEntry.Satisfied(Verse.Pawn)">
            <summary>
            check if this entry is satisfied by the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.MutationRuleDef.Result">
            <summary>
                simple POD for rule results
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.Result.hediffDef">
            <summary>
                The hediff definition
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.Result.partDef">
            <summary>
                The record the hediff must be on
            </summary>
        </member>
        <member name="T:Pawnmorph.MutationRuleDef.HediffEntry">
            <summary>
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.HediffEntry.hediffs">
            <summary>
                list of hediffs to check for
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.HediffEntry.partDef">
            <summary>
                The record the hediff must be on
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.HediffEntry.anyPart">
            <summary>
                if true, this entry is satisfied if the pawn has any the hediff on any part
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationRuleDef.HediffEntry.stageIndex">
            <summary>
                if set, the hediff must be on this stage
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationRuleDef.HediffEntry.Satisfied(Verse.Pawn)">
            <summary>
                check if this entry is satisfied by the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.MutationRuleDef.IMRuleEntry">
            <summary>
            interface for all rule entries 
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationRuleDef.IMRuleEntry.Satisfied(Verse.Pawn)">
            <summary>
                check if this entry is satisfied by the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.MutationRuleWorker">
            <summary>
                base class for all 'worker' classes for mutation rules
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationRuleWorker.#ctor(Pawnmorph.MutationRuleDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.MutationRuleWorker" /> class.
            </summary>
            <param name="ruleDef">The rule definition.</param>
        </member>
        <member name="P:Pawnmorph.MutationRuleWorker.RuleDef">
            <summary>
                Gets the rule definition.
            </summary>
            <value>
                The rule definition.
            </value>
        </member>
        <member name="M:Pawnmorph.MutationRuleWorker.TryRule(Verse.Pawn)">
            <summary>
                Tries to execute the rule on the given pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>if the rule was successfully executed on the pawn</returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.MutationRuleWorker.ConditionsMet(Verse.Pawn)">
            <summary>
                checks if the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.MutationRuleWorker.DoRule(Verse.Pawn)">
            <summary>
                Does the rule on the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.DefaultMutationRuleWorker">
            <summary>
                simple implementation of MutationRuleWorker
            </summary>
            <seealso cref="T:Pawnmorph.MutationRuleWorker" />
        </member>
        <member name="M:Pawnmorph.DefaultMutationRuleWorker.#ctor(Pawnmorph.MutationRuleDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.MutationRuleWorker" /> class.
            </summary>
            <param name="ruleDef">The rule definition.</param>
        </member>
        <member name="M:Pawnmorph.DefaultMutationRuleWorker.ConditionsMet(Verse.Pawn)">
            <summary>
                checks if the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.DefaultMutationRuleWorker.DoRule(Verse.Pawn)">
            <summary>
                Does the rule on the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.DefaultMutationRuleWorker.OnRuleApplied(Verse.Pawn)">
            <summary>
            Called when the rule is successfully applied 
            </summary>
            <param name="pawn">The pawn.</param>
        </member>
        <member name="M:Pawnmorph.DefaultMutationRuleWorker.OnRuleApplied(Verse.Pawn,Pawnmorph.MutationRuleDef.Result)">
            <summary>
            Called when the rule is successfully applied
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="result">The result.</param>
        </member>
        <member name="M:Pawnmorph.DefaultMutationRuleWorker.DoRule(Verse.Pawn,Pawnmorph.MutationRuleDef.Result)">
            <summary>
                Does the rule on the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="result">The result.</param>
        </member>
        <member name="T:Pawnmorph.MutationRules.Worker_MorphHediff">
            <summary>
            rule worker combining the various 'morph hediffs' into a single morph hediff 
            </summary>
            <seealso cref="T:Pawnmorph.DefaultMutationRuleWorker" />
        </member>
        <member name="M:Pawnmorph.MutationRules.Worker_MorphHediff.#ctor(Pawnmorph.MutationRuleDef)">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.MutationRuleWorker" /> class.
            </summary>
            <param name="ruleDef">The rule definition.</param>
        </member>
        <member name="M:Pawnmorph.MutationRules.Worker_MorphHediff.OnRuleApplied(Verse.Pawn)">
            <summary>
            Called when the rule is successfully applied 
            </summary>
            <param name="pawn">The pawn.</param>
        </member>
        <member name="T:Pawnmorph.MutationRuleUtilities">
            <summary>
            various mutation rule related utilities 
            </summary>
        </member>
        <member name="P:Pawnmorph.MutationRuleUtilities.AllRules">
            <summary>
            Gets a sorted collection of all MutationRuleDefs 
            </summary>
            <value>
            All rules.
            </value>
        </member>
        <member name="M:Pawnmorph.MutationRuleUtilities.TryExecuteRulesOn(Verse.Pawn)">
            <summary>
            Tries to execute the rules on the given pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.MutationSite">
            <summary>
            readonly struct describing the 'slot' or 'site' a mutation can occupy 
            </summary>
            <seealso cref="T:Pawnmorph.MutationSite" />
        </member>
        <member name="M:Pawnmorph.MutationSite.#ctor(Verse.BodyPartRecord,Pawnmorph.Hediffs.MutationLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MutationSite"/> struct.
            </summary>
            <param name="record">The record.</param>
            <param name="layer">The layer.</param>
        </member>
        <member name="M:Pawnmorph.MutationSite.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>The fully qualified type name.</returns>
        </member>
        <member name="P:Pawnmorph.MutationSite.Record">
            <summary>
            Gets the body part record of this site
            </summary>
            <value>
            The record.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationSite.Layer">
            <summary>
            Gets the layer of this site
            </summary>
            <value>
            The layer.
            </value>
        </member>
        <member name="M:Pawnmorph.MutationSite.Equals(Pawnmorph.MutationSite)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="M:Pawnmorph.MutationSite.Equals(System.Object)">
            <summary>Indicates whether this instance and a specified object are equal.</summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>
            <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Pawnmorph.MutationSite.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Pawnmorph.MutationSite.op_Equality(Pawnmorph.MutationSite,Pawnmorph.MutationSite)">
            <summary>Returns a value that indicates whether the values of two <see cref="T:Pawnmorph.MutationSite" /> objects are equal.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise, false.</returns>
        </member>
        <member name="M:Pawnmorph.MutationSite.op_Inequality(Pawnmorph.MutationSite,Pawnmorph.MutationSite)">
            <summary>Returns a value that indicates whether two <see cref="T:Pawnmorph.MutationSite" /> objects have different values.</summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
        </member>
        <member name="T:Pawnmorph.Need_Control">
            <summary>
                need that represents a sapient animal's control or humanity left
            </summary>
        </member>
        <member name="T:Pawnmorph.Need_Control.SapienceLevelChangedHandle">
            <summary>
                delegate for the sapience level changed handle
            </summary>
            <param name="sender"></param>
            <param name="pawn"></param>
            <param name="sapienceLevel"></param>
        </member>
        <member name="E:Pawnmorph.Need_Control.SapienceLevelChanged">
            <summary>
                Occurs when the sapience level changes .
            </summary>
        </member>
        <member name="M:Pawnmorph.Need_Control.#ctor(Verse.Pawn)">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.Need_Control" /> class.
            </summary>
            <param name="pawn">The pawn.</param>
        </member>
        <member name="P:Pawnmorph.Need_Control.MaxLevel">
            <summary>
                Gets the maximum level.
            </summary>
            <value>
                The maximum level.
            </value>
        </member>
        <member name="P:Pawnmorph.Need_Control.CurInstantLevel">
            <summary>
                Gets the current instant level.
            </summary>
            <value>
                The current instant level.
            </value>
        </member>
        <member name="P:Pawnmorph.Need_Control.SeekerLevel">
            <summary>
                Gets the seeker level.
            </summary>
            <value>
                The seeker level.
            </value>
        </member>
        <member name="M:Pawnmorph.Need_Control.AddInstinctChange(System.Single)">
            <summary>
                Adds the instinct change to this need
            </summary>
            <param name="instinctChange">The instinct change.</param>
        </member>
        <member name="M:Pawnmorph.Need_Control.DrawOnGUI(UnityEngine.Rect,System.Int32,System.Single,System.Boolean,System.Boolean)">
            <summary>
                Draws the GUI.
            </summary>
            <param name="rect">The rect.</param>
            <param name="maxThresholdMarkers">The maximum threshold markers.</param>
            <param name="customMargin">The custom margin.</param>
            <param name="drawArrows">if set to <c>true</c> [draw arrows].</param>
            <param name="doTooltip">if set to <c>true</c> [do tooltip].</param>
        </member>
        <member name="M:Pawnmorph.Need_Control.ExposeData">
            <summary>
                Exposes the data.
            </summary>
        </member>
        <member name="M:Pawnmorph.Need_Control.IsEnabledFor(Verse.Pawn)">
            <summary>
                Determines whether the control need is enabled for the pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if control need is enabled for the given humanoid race; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.Need_Control.NeedInterval">
            <summary>
                called every so often by the need manager.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Pawnmorph.Need_Control.NotifyMaxLevelDirty">
            <summary>
                Notifies that the cached maximum level is dirty
            </summary>
        </member>
        <member name="P:Pawnmorph.Need_Control.Limit">
            <summary>
            Gets the upper limit of this pawns sapience
            </summary>
            <value>
            The limit.
            </value>
        </member>
        <member name="M:Pawnmorph.Need_Control.SetInitialLevel">
            <summary>
                Sets the initial level.
            </summary>
        </member>
        <member name="M:Pawnmorph.Need_Control.SetInitialLevel(System.Single)">
            <summary>
                Sets the initial level.
            </summary>
            <param name="sapiencePercent">The sapience level.</param>
        </member>
        <member name="M:Pawnmorph.Need_Control.SetSapience(System.Single)">
            <summary>
                Sets the sapience.
            </summary>
            <param name="sapience">The sapience.</param>
        </member>
        <member name="T:Pawnmorph.PartAddress">
            <summary>
                this class represents the 'address' of a body part on a pawn
            </summary>
        </member>
        <member name="M:Pawnmorph.PartAddress.LoadDataFromXmlCustom(System.Xml.XmlNode)">
            <summary>
            Loads the data from XML custom.
            </summary>
            <param name="xmlRoot">The XML root.</param>
        </member>
        <member name="M:Pawnmorph.PartAddress.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.PartAddress" /> class.
            </summary>
        </member>
        <member name="M:Pawnmorph.PartAddress.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.PartAddress" /> class.
            </summary>
            <param name="address">The address.</param>
            <exception cref="T:System.ArgumentNullException">address</exception>
        </member>
        <member name="M:Pawnmorph.PartAddress.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Pawnmorph.PartAddress.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Pawnmorph.PartAddress.Equals(Pawnmorph.PartAddress)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
                <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="P:Pawnmorph.PartAddress.Count">
            <summary>Gets the number of elements in the collection.</summary>
            <returns>The number of elements in the collection. </returns>
        </member>
        <member name="P:Pawnmorph.PartAddress.Item(System.Int32)">
            <summary>Gets the element at the specified index in the read-only list.</summary>
            <param name="index">The zero-based index of the element to get. </param>
            <returns>The element at the specified index in the read-only list.</returns>
        </member>
        <member name="M:Pawnmorph.PartAddress.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object. </param>
            <returns>
                <see langword="true" /> if the specified object  is equal to the current object; otherwise,
                <see langword="false" />.
            </returns>
        </member>
        <member name="M:Pawnmorph.PartAddress.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Pawnmorph.PartAddress.op_Equality(Pawnmorph.PartAddress,Pawnmorph.PartAddress)">
            <summary>
                Returns a value that indicates whether the values of two <see cref="T:Pawnmorph.PartAddress" /> objects are
                equal.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
                true if the <paramref name="left" /> and <paramref name="right" /> parameters have the same value; otherwise,
                false.
            </returns>
        </member>
        <member name="M:Pawnmorph.PartAddress.op_Inequality(Pawnmorph.PartAddress,Pawnmorph.PartAddress)">
            <summary>
                Returns a value that indicates whether two <see cref="T:Pawnmorph.PartAddress" /> objects have different
                values.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Pawnmorph.PartAddress.Parse(System.String)">
            <summary>
                Parses the specified string into a part address
            </summary>
            the input string is supposed to be in the form of torso.leg.toe etc.
            <param name="str">The string.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.PartAddress.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Pawnmorph.PawnColumnWorker_RecruitSapientAnimal">
            <summary>
            
            </summary>
            <seealso cref="T:RimWorld.PawnColumnWorker_Designator" />
        </member>
        <member name="P:Pawnmorph.PawnColumnWorker_RecruitSapientAnimal.DesignationType">
            <summary>
            Gets the type of the designation.
            </summary>
            <value>
            The type of the designation.
            </value>
        </member>
        <member name="M:Pawnmorph.PawnColumnWorker_RecruitSapientAnimal.GetTip(Verse.Pawn)">
            <summary>
            Gets the tip.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.PawnColumnWorker_RecruitSapientAnimal.HasCheckbox(Verse.Pawn)">
            <summary>
            Determines whether the specified pawn has checkbox.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if the specified pawn has checkbox; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.PawnColumnWorker_RecruitSapientAnimal.Notify_DesignationAdded(Verse.Pawn)">
            <summary>
            Notifies the designation added.
            </summary>
            <param name="pawn">The pawn.</param>
        </member>
        <member name="T:Pawnmorph.PawnTransferUtilities">
            <summary>
                static container for functions that transfer stuff between pawns
            </summary>
        </member>
        <member name="T:Pawnmorph.PawnTransferUtilities.SkillPassionTransferMode">
            <summary>
                the method to use when transferring skill passions
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnTransferUtilities.SkillPassionTransferMode.Ignore">
            do not transfer passions
        </member>
        <member name="F:Pawnmorph.PawnTransferUtilities.SkillPassionTransferMode.Min">
            <summary>
                take the minimum of the passions
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnTransferUtilities.SkillPassionTransferMode.Max">
            <summary>
                take the maximum of the passions
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnTransferUtilities.SkillPassionTransferMode.Set">
            <summary>
                just set the passion level
            </summary>
        </member>
        <member name="T:Pawnmorph.PawnTransferUtilities.SkillTransferMode">
            <summary>
                enum for the different modes of transferring skills
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnTransferUtilities.SkillTransferMode.Set">
            <summary>
                The target skill's level should be set to exactly that of the source skill
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnTransferUtilities.SkillTransferMode.Min">
            <summary>
                target skill's level should be the min of the original and that of the source skill
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnTransferUtilities.SkillTransferMode.Max">
            <summary>
                target skill's level should be the max of the original and that of the source skill
            </summary>
        </member>
        <member name="M:Pawnmorph.PawnTransferUtilities.MergeSkills(System.Collections.Generic.IEnumerable{Verse.Pawn},Verse.Pawn)">
            <summary>
                Merges the skills from the given original pawns into the given meld
            </summary>
            <param name="originals">The originals.</param>
            <param name="meld">The meld.</param>
        </member>
        <member name="M:Pawnmorph.PawnTransferUtilities.TransferAspects(Verse.Pawn,Verse.Pawn)">
            <summary>
                Transfers all transferable aspects from pawn1 to pawn2
            </summary>
            <param name="pawn1">The source pawn.</param>
            <param name="pawn2">The destination pawn.</param>
        </member>
        <member name="M:Pawnmorph.PawnTransferUtilities.TransferFavor(Verse.Pawn,Verse.Pawn)">
            <summary>
                Transfers the favor of all factions from pawn1 to pawn2
            </summary>
            <param name="pawn1">The pawn1.</param>
            <param name="pawn2">The pawn2.</param>
            <exception cref="T:System.ArgumentNullException">
                pawn1
                or
                pawn2
            </exception>
        </member>
        <member name="M:Pawnmorph.PawnTransferUtilities.TransferRelations(Verse.Pawn,Verse.Pawn,System.Predicate{RimWorld.PawnRelationDef})">
            <summary>
                Transfers the relations from pawn1 to pawn2
            </summary>
            <param name="pawn1">The original.</param>
            <param name="pawn2">The animal.</param>
            <param name="predicate">optional predicate to dictate which relations get transferred</param>
        </member>
        <member name="M:Pawnmorph.PawnTransferUtilities.TransferRelations(Verse.Pawn,Verse.Pawn,System.Predicate{RimWorld.DirectPawnRelation})">
            <summary>
                Transfers the relations from pawn1 to pawn2
            </summary>
            <param name="pawn1">The original.</param>
            <param name="pawn2">The animal.</param>
            <param name="predicate">optional predicate to dictate which relations get transferred</param>
        </member>
        <member name="M:Pawnmorph.PawnTransferUtilities.TransferRelations(System.Collections.Generic.IReadOnlyList{Verse.Pawn},Verse.Pawn,System.Func{RimWorld.PawnRelationDef,System.Boolean})">
            <summary>
                Transfers the relations from the original pawns to the given meld
            </summary>
            <param name="originals">The originals.</param>
            <param name="meld">The meld.</param>
            <param name="filter">The filter.</param>
            <exception cref="T:System.ArgumentNullException">
                originals
                or
                meld
            </exception>
        </member>
        <member name="M:Pawnmorph.PawnTransferUtilities.TransferSkills(Verse.Pawn,Verse.Pawn,Pawnmorph.PawnTransferUtilities.SkillTransferMode,Pawnmorph.PawnTransferUtilities.SkillPassionTransferMode)">
            <summary>
                Transfers skills from pawn1 to pawn2
            </summary>
            <param name="pawn1">The pawn1.</param>
            <param name="pawn2">The pawn2.</param>
            <param name="mode">The transfer mode.</param>
            <param name="passionTransferMode">The passion transfer mode.</param>
        </member>
        <member name="M:Pawnmorph.PawnTransferUtilities.TransferTraits(Verse.Pawn,Verse.Pawn,System.Func{RimWorld.TraitDef,System.Boolean})">
            <summary>
                move all mutation related traits from the original pawn to the transformed pawn if they are sapient
            </summary>
            <param name="originalPawn">The original pawn.</param>
            <param name="transformedPawn">The transformed pawn.</param>
            <param name="selector">The selector function for determining if a trait should be transferred</param>
            <exception cref="T:System.ArgumentNullException">
                transformedPawn
                or
                selector
                or
                originalPawn
            </exception>
        </member>
        <member name="F:Pawnmorph.PMDamageDefOf.MutagenCloud">
            <summary>
            The mutagen cloud (used with regular explosions like grenades) 
            </summary>
        </member>
        <member name="F:Pawnmorph.PMDamageDefOf.MutagenCloud_Large">
            <summary>
            The mutagen cloud large (used with artillery) 
            </summary>
        </member>
        <member name="T:Pawnmorph.PMFoodUtilities">
            <summary>
                static class for food related utilities
            </summary>
        </member>
        <member name="M:Pawnmorph.PMFoodUtilities.BestFoodSourceOnMapOptimized(Verse.Pawn,Verse.Pawn,System.Boolean,Verse.ThingDef@,RimWorld.FoodPreferability,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,RimWorld.FoodPreferability)">
            <summary>
                Gets the best food source on the map for the given getter and eater pawns
            </summary>
            this function gets the best food source on the map for the given pawns, making sure to optimize for the case where
            a humanoid pawn can eat plants
            <param name="getter">The getter.</param>
            <param name="eater">The eater.</param>
            <param name="desperate">if set to <c>true</c> [desperate].</param>
            <param name="foodDef">The food definition.</param>
            <param name="maxPref">The maximum preference.</param>
            <param name="allowPlant">if set to <c>true</c> [allow plant].</param>
            <param name="allowDrug">if set to <c>true</c> [allow drug].</param>
            <param name="allowCorpse">if set to <c>true</c> [allow corpse].</param>
            <param name="allowDispenserFull">if set to <c>true</c> [allow dispenser full].</param>
            <param name="allowDispenserEmpty">if set to <c>true</c> [allow dispenser empty].</param>
            <param name="allowForbidden">if set to <c>true</c> [allow forbidden].</param>
            <param name="allowSociallyImproper">if set to <c>true</c> [allow socially improper].</param>
            <param name="allowHarvest">if set to <c>true</c> [allow harvest].</param>
            <param name="forceScanWholeMap">if set to <c>true</c> [force scan whole map].</param>
            <param name="ignoreReservations">if set to <c>true</c> [ignore reservations].</param>
            <param name="minPrefOverride">The minimum preference override.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.PMFoodUtilities.GetStatusOfFoodForPawn(Verse.ThingDef,Verse.Thing)">
            <summary>
                Gets the cannibal status of food for pawn.
            </summary>
            <param name="raceDef">The race definition.</param>
            <param name="foodSource">The food source.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                raceDef
                or
                foodSource
            </exception>
        </member>
        <member name="M:Pawnmorph.PMFoodUtilities.TryFindBestFoodSourceForOptimized(Verse.Pawn,Verse.Pawn,System.Boolean,Verse.Thing@,Verse.ThingDef@,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,RimWorld.FoodPreferability)">
            <summary>
                Tries the find best food source for the given getter and eater.
            </summary>
            Tries to find the best food source for the given getter and eater, taking into account humanoids that can eat plants
            <param name="getter">The getter.</param>
            <param name="eater">The eater.</param>
            <param name="desperate">if set to <c>true</c> [desperate].</param>
            <param name="foodSource">The food source.</param>
            <param name="foodDef">The food definition.</param>
            <param name="canRefillDispenser">if set to <c>true</c> [can refill dispenser].</param>
            <param name="canUseInventory">if set to <c>true</c> [can use inventory].</param>
            <param name="allowForbidden">if set to <c>true</c> [allow forbidden].</param>
            <param name="allowCorpse">if set to <c>true</c> [allow corpse].</param>
            <param name="allowSociallyImproper">if set to <c>true</c> [allow socially improper].</param>
            <param name="allowHarvest">if set to <c>true</c> [allow harvest].</param>
            <param name="forceScanWholeMap">if set to <c>true</c> [force scan whole map].</param>
            <param name="ignoreReservations">if set to <c>true</c> [ignore reservations].</param>
            <param name="minPrefOverride">The minimum preference override.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.CannibalThoughtStatus">
            <summary>
                the status of the cannibal thought to receive
            </summary>
        </member>
        <member name="F:Pawnmorph.CannibalThoughtStatus.None">
            <summary>
                the pawn did not eat anything they would consider cannibalism
            </summary>
        </member>
        <member name="F:Pawnmorph.CannibalThoughtStatus.Direct">
            <summary>
                The pawn directly ate something they would consider cannibalism
            </summary>
        </member>
        <member name="F:Pawnmorph.CannibalThoughtStatus.Ingredient">
            <summary>
                the pawn ate something they would consider cannibalism as an ingredient
            </summary>
        </member>
        <member name="T:Pawnmorph.PMPlantUtilities">
            <summary>
                static class containing various plant related utility functions
            </summary>
        </member>
        <member name="P:Pawnmorph.PMPlantUtilities.MutantPlants">
            <summary>
                Gets all mutant plants.
            </summary>
            <value>
                The mutant plants.
            </value>
        </member>
        <member name="M:Pawnmorph.PMPlantUtilities.GetMutantVersionOf(RimWorld.Plant)">
            <summary>
                Gets the mutant version of the given plant
            </summary>
            <param name="plant">The plant.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">plant</exception>
        </member>
        <member name="M:Pawnmorph.PMPlantUtilities.IsMutantPlant(RimWorld.Plant)">
            <summary>
            Determines whether this instance is a mutant plant.
            </summary>
            <param name="plant">The plant.</param>
            <returns>
              <c>true</c> if this instance is a mutant plant ; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">plant</exception>
        </member>
        <member name="M:Pawnmorph.PMPlantUtilities.IsMutantPlant(Verse.ThingDef)">
            <summary>
                Determines whether this is a mutant plant .
            </summary>
            <param name="def">The definition.</param>
            <returns>
                <c>true</c> if this is a mutant plant; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.PMPlantUtilities.TryMutatePlant(RimWorld.Plant,System.Boolean,System.Boolean)">
            <summary>
            Tries to substitute the plant for its mutant variant.
            </summary>
            <param name="originalPlant">The original plant.</param>
            <param name="alwaysKillOriginal">if set to <c>true</c> always kill original even is there is no mutant plant variant.</param>
            <param name="canDoubleMutate">if set to <c>true</c> mutated plants can themselves mutate.</param>
        </member>
        <member name="T:Pawnmorph.PMRelationUtilities">
            <summary>
            static class for relationship utilities 
            </summary>
        </member>
        <member name="M:Pawnmorph.PMRelationUtilities.IsRelatedToColonistPawn(Verse.Pawn)">
            <summary>
            Determines whether this pawn is related to a colonist pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this pawn is related to a colonist pawn; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="T:Pawnmorph.PMStatDefOf">
            <summary>
                static def of class for commonly used stats
            </summary>
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.MutationAdaptability">
            <summary>
                stat that influences how fast a pawn adapts to new mutations
            </summary>
            has a range of [-1,2]
            values less then 0 means the pawn gets worse with mutations over time
            values greater then 0 mean the pawn gets better with mutations over time
            default value is 1
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.SapientAnimalA">
            <summary>
                stat that controls how large a change in control is caused by a change in instinct
            </summary>
            use the inverse of this value to get the multiplier
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.SapientAnimalResistance">
            <summary>
                stat that influences the amount of control a sapient animal has before going feral
            </summary>
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.MutationHaltChance">
            <summary>
                stat that determines how likely pawns will stop adapting to mutations
            </summary>
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.MutagenSensitivity">
            <summary>
                Multiplier on the impact of mutagenic buildup on this creature.
            </summary>
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.SapienceLimit">
            <summary>
            stat that controls the maximum a pawn's sapience can be 
            </summary>
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.DangerousFoodSensitivity">
            <summary>
            this stat is the %chance a pawn will get sick from dangerous foods 
            </summary>
            note, the check is applied after the initial check on the food itself, so the actual chance a pawn will get sick from
            a specific, dangerous food is this multiplied by the food's FoodPoisonChanceFixedHuman stat
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.RottenFoodSensitivity">
            <summary>
            this stat is the %chance a pawn will get sick from rotten foods 
            </summary>
            note, the check is applied after the initial check on the food itself, so the actual chance a pawn will get sick from
            a specific, rotten food is this multiplied by the base chance to get sick from rotten food 
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.MutaniteConcentration">
            <summary>
            the concentration of mutanite in a thing, this is used by refineries to determine how much of a thing is required to make mutanite 
            </summary>
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.TransformationSensitivity">
            <summary>
            stat that affects the likely hood that a pawn fully transforms
            this is a multiplier on the transformation chance 
            </summary>
        </member>
        <member name="F:Pawnmorph.PMStatDefOf.SapienceRecoverFactor">
            <summary>
            stat that determines how much 'sapience' a pawn recovers over time 
            </summary>
        </member>
        <member name="F:Pawnmorph.PMThingCategoryDefOf.Textiles">
            <summary> Not in base ThingCategoryDefOf </summary>
        </member>
        <member name="T:Pawnmorph.PMThingUtilities">
            <summary>
            static class for various thing/pawn related utilities
            </summary>
        </member>
        <member name="M:Pawnmorph.PMThingUtilities.GetCorrectPosition(Verse.Thing)">
            <summary>
            Gets the correct position, taking account of whether or not this thing is held by something 
            </summary>
            <param name="thing">The thing.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">thing</exception>
        </member>
        <member name="M:Pawnmorph.PMThingUtilities.GetDebugLabel(Verse.Thing)">
            <summary>
            Gets a debug label for the given thing. useful for debug printing 
            </summary>
            <param name="thing">The thing.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.PMThingUtilities.GetCorrectMap(Verse.Thing)">
            <summary>
            Gets the correct map, taking account of whether or not this thing is held by something 
            </summary>
            <param name="thing">The thing.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">thing</exception>
        </member>
        <member name="T:Pawnmorph.PMThoughtUtilities">
            <summary>
                static container for thought related utilities
            </summary>
        </member>
        <member name="M:Pawnmorph.PMThoughtUtilities.GetSubstitute(RimWorld.ThoughtDef,Verse.Pawn)">
            <summary>
                get the substitute thought for the given pawn
            </summary>
            <param name="def">The definition.</param>
            <param name="pawn">The pawn.</param>
            <returns>the substitute thought if one exists, if not the original thought</returns>
        </member>
        <member name="M:Pawnmorph.PMThoughtUtilities.GetSubstitute(RimWorld.Thought_Memory,Verse.Pawn)">
            <summary>
                Gets the substitute memory to be used with the given pawn
            </summary>
            <param name="memory">The memory.</param>
            <param name="pawn">The pawn.</param>
            <returns>
                the substitute memory to be used with the given pawn, if no substitute exists it just returns the original
                pawn
            </returns>
        </member>
        <member name="T:Pawnmorph.ProductionBoost">
            <summary>
            class representing a production boost
            </summary>
        </member>
        <member name="F:Pawnmorph.ProductionBoost.hediffFilter">
            <summary>filter to specify which hediffs to boost production to</summary>
        </member>
        <member name="F:Pawnmorph.ProductionBoost.productionBoost">
            <summary>is a increase/decrease in production Hediff's severity</summary>
        </member>
        <member name="M:Pawnmorph.ProductionBoost.GetBoost(Verse.HediffDef)">
            <summary>Gets the boost to the specific hediff.</summary>
            <param name="hediff">The hediff.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.SapienceState">
            <summary>
                a specific state c pawn's 'sapience/mind' can be in, like FormerHuman, Animalistic, ect.
            </summary>
            <seealso cref="T:Verse.IExposable" />
        </member>
        <member name="P:Pawnmorph.SapienceState.Pawn">
            <summary>
            Gets the pawn this state is for 
            </summary>
            <value>
            The pawn.
            </value>
        </member>
        <member name="P:Pawnmorph.SapienceState.IsFormerHuman">
            <summary>
            Gets a value indicating whether this state makes the pawn count as a 'former human'.
            </summary>
            <value>
              <c>true</c> if this state makes the pawn count as a 'former human'; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.SapienceState.AddOrRemoveDynamicComponents">
            <summary>
            Adds the or remove dynamic components.
            </summary>
        </member>
        <member name="P:Pawnmorph.SapienceState.CurrentSapience">
            <summary>
            Gets the current sapience level
            </summary>
            <value>
            The current sapience.
            </value>
        </member>
        <member name="M:Pawnmorph.SapienceState.Tick">
            <summary>
            called after every tick 
            </summary>
        </member>
        <member name="P:Pawnmorph.SapienceState.CurrentIntelligence">
            <summary>
                Gets the current intelligence.
            </summary>
            <value>
                The current intelligence.
            </value>
        </member>
        <member name="P:Pawnmorph.SapienceState.StateDef">
            <summary>
                Gets the state definition.
            </summary>
            <value>
                The state definition.
            </value>
        </member>
        <member name="P:Pawnmorph.SapienceState.Tracker">
            <summary>
                Gets the tracker.
            </summary>
            <value>
                The tracker.
            </value>
        </member>
        <member name="M:Pawnmorph.SapienceState.Enter">
            <summary>
                called when a pawn enters this sapience state
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceState.Exit">
            <summary>
            called when the pawn exits this state 
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceState.Init(Pawnmorph.ThingComps.SapienceTracker)">
            <summary>
                Initializes this instance with the specified sapience tracker.
            </summary>
            <param name="sapienceTracker">The sapience tracker.</param>
        </member>
        <member name="M:Pawnmorph.SapienceState.ExposeData">
            <summary>
                called to save/load all data.
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceState.Init">
            <summary>
                Initializes this instance.
            </summary>
            this is always called before enter and after loading a pawn
        </member>
        <member name="T:Pawnmorph.SapienceStateDef">
            <summary>
            def for specific state a pawns 'sapience/mind' can be in, such as FormerHuman, Animalistic, ect.
            </summary>
            <seealso cref="T:Verse.Def" />
        </member>
        <member name="F:Pawnmorph.SapienceStateDef.stateType">
            <summary>
            The state type
            </summary>
        </member>
        <member name="F:Pawnmorph.SapienceStateDef.forcedHediff">
            <summary>
            the hediff the pawn is given when in this sapience state
            </summary>
        </member>
        <member name="F:Pawnmorph.SapienceStateDef.canGoPermanentlyFeral">
            <summary>
            if a pawn in this state can go permanently feral
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceStateDef.CreateState">
            <summary>
            Creates a new state instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.SapienceStateDef.ConfigErrors">
            <summary>
            Gets all configuration errors with this instance 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.SapienceStates.Animalistic">
            <summary>
            sapience state for 'animalistic' humanoids 
            </summary>
            <seealso cref="T:Pawnmorph.SapienceState" />
        </member>
        <member name="P:Pawnmorph.SapienceStates.Animalistic.IsFormerHuman">
            <summary>
            Gets a value indicating whether this state makes the pawn count as a 'former human'.
            </summary>
            <value>
              <c>true</c> if this state makes the pawn count as a 'former human'; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.SapienceStates.Animalistic.CurrentIntelligence">
            <summary>
                Gets the current intelligence.
            </summary>
            <value>
                The current intelligence.
            </value>
        </member>
        <member name="M:Pawnmorph.SapienceStates.Animalistic.Tick">
            <summary>
                called after every tick
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceStates.Animalistic.ExposeData">
            <summary>
                called to save/load all data.
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceStates.Animalistic.AddOrRemoveDynamicComponents">
            <summary>
            Adds the or remove dynamic components.
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceStates.Animalistic.Enter">
            <summary>
                called when a pawn enters this sapience state
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceStates.Animalistic.Exit">
            <summary>
            called when the pawn exits this state 
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceStates.Animalistic.Init">
            <summary>
                Initializes this instance.
            </summary>
            this is always called before enter and after loading a pawn
        </member>
        <member name="T:Pawnmorph.SapienceStates.FormerHuman">
            <summary>
            sapience state for former humans 
            </summary>
            <seealso cref="T:Pawnmorph.SapienceState" />
        </member>
        <member name="P:Pawnmorph.SapienceStates.FormerHuman.IsFormerHuman">
            <summary>
            Gets a value indicating whether this state makes the pawn count as a 'former human'.
            </summary>
            <value>
              <c>true</c> if this state makes the pawn count as a 'former human'; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.SapienceStates.FormerHuman.Tick">
            <summary>
            called after every tick 
            </summary>
        </member>
        <member name="P:Pawnmorph.SapienceStates.FormerHuman.CurrentIntelligence">
            <summary>
                Gets the current intelligence.
            </summary>
            <value>
                The current intelligence.
            </value>
        </member>
        <member name="M:Pawnmorph.SapienceStates.FormerHuman.Exit">
            <summary>
            called when the pawn exits this state 
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceStates.FormerHuman.ExposeData">
            <summary>
                called to save/load all data.
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceStates.FormerHuman.AddOrRemoveDynamicComponents">
            <summary>
            Adds the or remove dynamic components.
            </summary>
        </member>
        <member name="M:Pawnmorph.SapienceStates.FormerHuman.Init">
            <summary>
                Initializes this instance.
            </summary>
            this is always called before enter and after loading a pawn
        </member>
        <member name="T:Pawnmorph.SapienceStates.MergedPawn">
            <summary>
            sapience stat for a merged pawn 
            </summary>
            <seealso cref="T:Pawnmorph.SapienceStates.FormerHuman" />
        </member>
        <member name="M:Pawnmorph.SapienceStates.MergedPawn.Init">
            <summary>
                Initializes this instance.
            </summary>
            this is always called before enter and after loading a pawn
        </member>
        <member name="T:Pawnmorph.SapientAnimalMentalBreaker">
            <summary>
                class for giving sapient animals mental breaks
            </summary>
        </member>
        <member name="M:Pawnmorph.SapientAnimalMentalBreaker.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.SapientAnimalMentalBreaker" /> class.
            </summary>
        </member>
        <member name="M:Pawnmorph.SapientAnimalMentalBreaker.#ctor(Verse.Pawn)">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.SapientAnimalMentalBreaker" /> class.
            </summary>
            <param name="pawn">The pawn.</param>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.BreakExtremeIsImminent">
            <summary>
                Gets a value indicating whether an extreme break is imminent.
            </summary>
            <value>
                <c>true</c> if an extreme break is imminent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.BreakMajorIsImminent">
            <summary>
                Gets a value indicating whether  a major break is imminent.
            </summary>
            <value>
                <c>true</c> if a major break is imminent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.BreakMinorIsImminent">
            <summary>
                Gets a value indicating whether a minor break is imminent.
            </summary>
            <value>
                <c>true</c> if a minor break is imminent; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.BreakExtremeIsApproaching">
            <summary>
                Gets a value indicating whether an extreme break is approaching.
            </summary>
            <value>
                <c>true</c> if an extreme break is approaching; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.CurMood">
            <summary>
                Gets the current mood.
            </summary>
            <value>
                The current mood.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.BreakThresholdExtreme">
            <summary>
                Gets the break threshold extreme.
            </summary>
            <value>
                The break threshold extreme.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.BreakThresholdMajor">
            <summary>
                Gets the break threshold major.
            </summary>
            <value>
                The break threshold major.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.BreakThresholdMinor">
            <summary>
                Gets the break threshold minor.
            </summary>
            <value>
                The break threshold minor.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.AllSapientAnimalMentalBreaks">
            <summary>
                Gets all sapient animal mental breaks.
            </summary>
            <value>
                All sapient animal mental breaks.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.Pawn">
            <summary>
                Gets the pawn this thing is attached to.
            </summary>
            <value>
                The pawn.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.CanDoRandomMentalBreaks">
            <summary>
                Gets a value indicating whether this instance can do random mental breaks.
            </summary>
            <value>
                <c>true</c> if this instance can do random mental breaks; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.SapientAnimalMentalBreaker.CurrentPossibleMoodBreaks">
            <summary>
            Gets the current possible mood breaks.
            </summary>
            <value>
            The current possible mood breaks.
            </value>
        </member>
        <member name="M:Pawnmorph.SapientAnimalMentalBreaker.GetMentalBreakThresholdFor(Verse.MentalBreakIntensity)">
            <summary>
            </summary>
            <param name="intensity">The intensity.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Pawnmorph.SapientAnimalMentalBreaker.NotifyRecoveredFromMentalBreak">
            <summary>
                Notifies this instance that the pawn recovered from mental break.
            </summary>
        </member>
        <member name="M:Pawnmorph.SapientAnimalMentalBreaker.Tick">
            <summary>
                Ticks this instance.
            </summary>
        </member>
        <member name="M:Pawnmorph.SapientAnimalMentalBreaker.TryDoRandomMoodCausedMentalBreak">
            <summary>
                Tries the do random mood caused mental break.
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Pawnmorph.SimplePawnColorSet">
            <summary>
            Stores color data needed to color a pawn.
            </summary>
        </member>
        <member name="T:Pawnmorph.SimplePawnColorSet.PawnColorSlot">
            <summary> Color slots </summary>
        </member>
        <member name="F:Pawnmorph.SimplePawnColorSet.PawnColorSlot.SkinFirst">
            <summary> Skin color 1 </summary>
        </member>
        <member name="F:Pawnmorph.SimplePawnColorSet.PawnColorSlot.SkinSecond">
            <summary> Skin color 2 </summary>
        </member>
        <member name="F:Pawnmorph.SimplePawnColorSet.PawnColorSlot.HairFirst">
            <summary> Hair color 1 </summary>
        </member>
        <member name="F:Pawnmorph.SimplePawnColorSet.PawnColorSlot.HairSecond">
            <summary> Hair color 2 </summary>
        </member>
        <member name="F:Pawnmorph.SimplePawnColorSet.skinColor">
            <summary> Skin color 1 </summary>
        </member>
        <member name="F:Pawnmorph.SimplePawnColorSet.skinColorTwo">
            <summary> Skin color 2 </summary>
        </member>
        <member name="F:Pawnmorph.SimplePawnColorSet.hairColor">
            <summary> Hair color 1 </summary>
        </member>
        <member name="F:Pawnmorph.SimplePawnColorSet.hairColorTwo">
            <summary> Hair color 2 </summary>
        </member>
        <member name="M:Pawnmorph.SimplePawnColorSet.ExposeData">
            <summary> Called during IExposable's ExposeData to serialize data. </summary>
        </member>
        <member name="T:Pawnmorph.Social.Worker_FormerHuman">
            <summary>
                interaction worker for former human recipients
            </summary>
            <seealso cref="T:RimWorld.InteractionWorker" />
        </member>
        <member name="P:Pawnmorph.Social.Worker_FormerHuman.BaseInteractionChance">
            <summary>
                Gets the base interaction chance.
            </summary>
            <value>
                The base interaction chance.
            </value>
        </member>
        <member name="M:Pawnmorph.Social.Worker_FormerHuman.Interacted(Verse.Pawn,Verse.Pawn,System.Collections.Generic.List{Verse.RulePackDef},System.String@,System.String@,Verse.LetterDef@,Verse.LookTargets@)">
            <summary>
                called when the initiator interacts with the specified recipient.
            </summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <param name="extraSentencePacks">The extra sentence packs.</param>
            <param name="letterText">The letter text.</param>
            <param name="letterLabel">The letter label.</param>
            <param name="letterDef">The letter definition.</param>
            <param name="lookTargets">The look targets.</param>
        </member>
        <member name="M:Pawnmorph.Social.Worker_FormerHuman.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>
                gets the random selection weight for the initiator and recipient interacting
            </summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Social.Worker_FormerHumanRecruitAttempt">
            <summary>
                interaction worker for recruiting former humans
            </summary>
            <seealso cref="T:RimWorld.InteractionWorker_RecruitAttempt" />
        </member>
        <member name="M:Pawnmorph.Social.Worker_FormerHumanRecruitAttempt.Interacted(Verse.Pawn,Verse.Pawn,System.Collections.Generic.List{Verse.RulePackDef},System.String@,System.String@,Verse.LetterDef@,Verse.LookTargets@)">
            <summary>
            performs the interaction between the initiator and recipient.
            </summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <param name="extraSentencePacks">The extra sentence packs.</param>
            <param name="letterText">The letter text.</param>
            <param name="letterLabel">The letter label.</param>
            <param name="letterDef">The letter definition.</param>
            <param name="lookTargets">The look targets.</param>
        </member>
        <member name="M:Pawnmorph.Social.Worker_FormerHumanRecruitAttempt.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>
                gets the selection weight
            </summary>
            <param name="initiator"></param>
            <param name="recipient"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Social.Worker_FormerHumanRecruitAttempt.DoRecruit(Verse.Pawn,Verse.Pawn,System.Single,System.String@,System.String@,System.Boolean,System.Boolean)">
            <summary>
            recruits the sapient animal
            </summary>
            <param name="recruiter">The recruiter.</param>
            <param name="recruitee">The recruitee.</param>
            <param name="recruitChance">The recruit chance.</param>
            <param name="letterLabel">The letter label.</param>
            <param name="letter">The letter.</param>
            <param name="useAudiovisualEffects">if set to <c>true</c> [use audiovisual effects].</param>
            <param name="sendLetter">if set to <c>true</c> [send letter].</param>
        </member>
        <member name="M:Pawnmorph.Social.Worker_FormerHumanRecruitAttempt.DoRecruit(Verse.Pawn,Verse.Pawn,System.Single,System.Boolean)">
            <summary>
            recruits the sapient animal
            </summary>
            <param name="recruiter">The recruiter.</param>
            <param name="recruitee">The recruitee.</param>
            <param name="recruitChance">The recruit chance.</param>
            <param name="useAudiovisualEffects">if set to <c>true</c> [use audiovisual effects].</param>
        </member>
        <member name="T:Pawnmorph.Social.InteractionWorker_Chitchat">
            <summary>
            interaction worker that functions like chitchat worker 
            </summary>
            <seealso cref="T:Pawnmorph.Social.PMInteractionWorkerBase" />
        </member>
        <member name="M:Pawnmorph.Social.InteractionWorker_Chitchat.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>gets the random selection weight.</summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Social.InteractionWorker_KindWords">
            <summary>
            interaction worker that functions like InteractionWorker_KindWords
            </summary>
            <seealso cref="T:Pawnmorph.Social.PMInteractionWorkerBase" />
        </member>
        <member name="M:Pawnmorph.Social.InteractionWorker_KindWords.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>gets the selection weight.</summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Social.InteractionWorker_Slight">
            <summary>
            interaction worker that functions like InteractionWorker_Slight 
            </summary>
            <seealso cref="T:Pawnmorph.Social.PMInteractionWorkerBase" />
        </member>
        <member name="M:Pawnmorph.Social.InteractionWorker_Slight.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>gets the selection weight.</summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Social.InteractionWorker_Insult">
            <summary>
            interaction worker that works like base InteractionWorker_Insult
            </summary>
            <seealso cref="T:Pawnmorph.Social.PMInteractionWorkerBase" />
        </member>
        <member name="M:Pawnmorph.Social.InteractionWorker_Insult.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>gets the selection weight.</summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Social.PMInteractionWorkerBase">
            <summary>
            base class for all Pawnmorph interaction workers
            </summary>
            <seealso cref="T:RimWorld.InteractionWorker" />
        </member>
        <member name="P:Pawnmorph.Social.PMInteractionWorkerBase.Def">
            <summary>Gets the interaction definition.</summary>
            <value>The definition.</value>
        </member>
        <member name="M:Pawnmorph.Social.PMInteractionWorkerBase.GetBaseWeight(Verse.Pawn,Verse.Pawn)">
            <summary>
            Gets the base weight for the given initiator and recipient pawns 
            </summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Social.PMInteractionDef">
            <summary>
            def for pawnmorph specific interactions 
            </summary>
            <seealso cref="T:RimWorld.InteractionDef" />
        </member>
        <member name="T:Pawnmorph.Social.PMInteractionDef.Weights">
            <summary>
            class that represents a single weight entry 
            </summary>
        </member>
        <member name="F:Pawnmorph.Social.PMInteractionDef.Weights.mutationWeights">
            <summary>The mutation weights</summary>
        </member>
        <member name="F:Pawnmorph.Social.PMInteractionDef.Weights.morphWeights">
            <summary>The morph weights</summary>
        </member>
        <member name="F:Pawnmorph.Social.PMInteractionDef.Weights.requiresBoth">
            <summary>if the pawn needs both a mutation and be a morph to get a non zero weight </summary>
        </member>
        <member name="M:Pawnmorph.Social.PMInteractionDef.Weights.GetTotalWeight(Verse.Pawn)">
            <summary>Gets the total weight.</summary>
            the higher the weight the more likely this interaction is going to be picked 
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Social.PMInteractionDef.ConfigErrors">
            <summary>Get all Configuration Errors with this instance</summary>
            <returns></returns>
        </member>
        <member name="F:Pawnmorph.Social.PMInteractionDef.initiatorWeights">
            <summary>The initiator weights</summary>
        </member>
        <member name="F:Pawnmorph.Social.PMInteractionDef.recipientWeights">
            <summary>The recipient weights</summary>
        </member>
        <member name="F:Pawnmorph.Social.PMInteractionDef.requiresBoth">
            <summary>if both the initiator and recipient need to have non zero weights for the resultant weight to be non zero </summary>
        </member>
        <member name="T:Pawnmorph.StockGenerator_Injectors">
            <summary>
            stock generator for getting all injectors of a specific morph or under an animal class 
            </summary>
            <seealso cref="T:RimWorld.StockGenerator" />
        </member>
        <member name="F:Pawnmorph.StockGenerator_Injectors.animalClass">
            <summary>
            The animal class or morph to get the injectors of 
            </summary>
        </member>
        <member name="M:Pawnmorph.StockGenerator_Injectors.GenerateThings(System.Int32,RimWorld.Faction)">
            <summary>
            Generates the things.
            </summary>
            <param name="forTile">For tile.</param>
            <param name="factionFor">The faction the things are being generated for.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.StockGenerator_Injectors.HandlesThingDef(Verse.ThingDef)">
            <summary>
            checks if this handles the specified thing definition.
            </summary>
            <param name="thingDef">The thing definition.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.ThingComps.AlwaysMergedPawn">
            <summary>
            thing comp to make the attached pawn always a 'merged' pawn
            </summary>
            <seealso cref="T:Verse.ThingComp" />
        </member>
        <member name="M:Pawnmorph.ThingComps.AlwaysMergedPawn.CompTick">
            <summary>
            called every tick 
            </summary>
        </member>
        <member name="M:Pawnmorph.ThingComps.AlwaysMergedPawn.PostSpawnSetup(System.Boolean)">
            <summary>
            Posts the spawn setup.
            </summary>
            <param name="respawningAfterLoad">if set to <c>true</c> [respawning after load].</param>
        </member>
        <member name="M:Pawnmorph.ThingComps.AlwaysMergedPawn.PostExposeData">
            <summary>
            called to save all data in this comp 
            </summary>
        </member>
        <member name="T:Pawnmorph.ThingComps.AnimalSelectorComp">
            <summary>
            </summary>
            <seealso cref="T:Verse.ThingComp" />
        </member>
        <member name="P:Pawnmorph.ThingComps.AnimalSelectorComp.Props">
            <summary>
                Gets the props.
            </summary>
            <value>
                The props.
            </value>
        </member>
        <member name="P:Pawnmorph.ThingComps.AnimalSelectorComp.ChosenKind">
            <summary>
            Gets the kind of the chosen.
            </summary>
            <value>
            The kind of the chosen.
            </value>
        </member>
        <member name="P:Pawnmorph.ThingComps.AnimalSelectorComp.AllAnimalsSelectable">
            <summary>
            Gets all animals selectable.
            </summary>
            <value>
            All animals selectable.
            </value>
        </member>
        <member name="M:Pawnmorph.ThingComps.AnimalSelectorComp.PostExposeData">
            <summary>
                Posts the expose data.
            </summary>
        </member>
        <member name="T:Pawnmorph.ThingComps.AnimalSelectorCompProperties">
            <summary>
            </summary>
            <seealso cref="T:Verse.CompProperties" />
        </member>
        <member name="F:Pawnmorph.ThingComps.AnimalSelectorCompProperties.requiresTag">
            <summary>
                if an animal must be tagged by the tagging rifle
            </summary>
        </member>
        <member name="F:Pawnmorph.ThingComps.AnimalSelectorCompProperties.raceFilter">
            <summary>
                The race filter
            </summary>
        </member>
        <member name="M:Pawnmorph.ThingComps.AnimalSelectorCompProperties.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Pawnmorph.ThingComps.AnimalSelectorCompProperties" /> class.
            </summary>
        </member>
        <member name="P:Pawnmorph.ThingComps.AnimalSelectorCompProperties.AllAnimals">
            <summary>
                Gets all animals that can be selected
            </summary>
            <value>
                All animals.
            </value>
        </member>
        <member name="T:Pawnmorph.ThingComps.SapienceTracker">
            <summary>
                thing comp to track the 'former human' status of a pawn
            </summary>
            <seealso cref="T:Verse.ThingComp" />
        </member>
        <member name="P:Pawnmorph.ThingComps.SapienceTracker.CurrentState">
            <summary>
            Gets the current sapience state that pawn is in 
            </summary>
            <value>
            Gets the current sapience state that pawn is in 
            </value>
        </member>
        <member name="M:Pawnmorph.ThingComps.SapienceTracker.ExitState">
            <summary>
            Exits the current sapience state.
            </summary>
        </member>
        <member name="M:Pawnmorph.ThingComps.SapienceTracker.CompTick">
            <summary>
            called every tick 
            </summary>
        </member>
        <member name="M:Pawnmorph.ThingComps.SapienceTracker.EnterState(Pawnmorph.SapienceStateDef,System.Single)">
            <summary>
            enter the given sapience state
            </summary>
            <param name="stateDef">The state definition.</param>
            <param name="initialLevel">The initial level.</param>
        </member>
        <member name="P:Pawnmorph.ThingComps.SapienceTracker.CurrentIntelligence">
            <summary>
            Gets the current intelligence of the attached pawn.
            </summary>
            <value>
            The current intelligence.
            </value>
        </member>
        <member name="P:Pawnmorph.ThingComps.SapienceTracker.SapienceNeed">
            <summary>
                Gets the sapience need.
            </summary>
            <value>
                The sapience need.
            </value>
        </member>
        <member name="P:Pawnmorph.ThingComps.SapienceTracker.IsFormerHuman">
            <summary>
                Gets a value indicating whether this instance is a former human.
            </summary>
            <value>
                <c>true</c> if this instance is a former human; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.ThingComps.SapienceTracker.IsPermanentlyFeral">
            <summary>
                Gets a value indicating whether this instance is permanently feral.
            </summary>
            <value>
                <c>true</c> if this instance is permanently feral; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.ThingComps.SapienceTracker.SapienceLevel">
            <summary>
                Gets or sets the sapience level.
            </summary>
            <value>
                The sapience level.
            </value>
        </member>
        <member name="P:Pawnmorph.ThingComps.SapienceTracker.Sapience">
            <summary>
                Gets the sapience level of the pawn
            </summary>
            <value>
                The sapience.
            </value>
        </member>
        <member name="P:Pawnmorph.ThingComps.SapienceTracker.Pawn">
            <summary>
            Gets the pawn this comp is attached to 
            </summary>
            <value>
            The pawn.
            </value>
        </member>
        <member name="M:Pawnmorph.ThingComps.SapienceTracker.Initialize(Verse.CompProperties)">
            <summary>
                Initializes the specified props.
            </summary>
            <param name="props">The props.</param>
        </member>
        <member name="M:Pawnmorph.ThingComps.SapienceTracker.MakeFormerHuman(System.Single)">
            <summary>
                Makes the parent a former human.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.ThingComps.SapienceTracker.MakePermanentlyFeral">
            <summary>
                Makes the parent thing permanently feral.
            </summary>
        </member>
        <member name="M:Pawnmorph.ThingComps.SapienceTracker.PostExposeData">
            <summary>
                saves/loads all data
            </summary>
        </member>
        <member name="M:Pawnmorph.ThingComps.SapienceTracker.SetSapience(System.Single)">
            <summary>
                Sets the sapience.
            </summary>
            <param name="sapience">The sapience.</param>
        </member>
        <member name="T:Pawnmorph.ThingComps.TFMilkable">
            <summary>
            thing comp for making certain animals drop tf milk if they are 'mutagen infused' 
            </summary>
            <seealso cref="T:RimWorld.CompMilkable" />
        </member>
        <member name="P:Pawnmorph.ThingComps.TFMilkable.ResourceDef">
            <summary>
            Gets the resource definition.
            </summary>
            <value>
            The resource definition.
            </value>
        </member>
        <member name="T:Pawnmorph.ThingComps.TFMilkableProps">
            <summary>
            
            </summary>
            <seealso cref="T:RimWorld.CompProperties_Milkable" />
        </member>
        <member name="M:Pawnmorph.ThingComps.TFMilkableProps.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.ThingComps.TFMilkableProps"/> class.
            </summary>
        </member>
        <member name="F:Pawnmorph.ThingComps.TFMilkableProps.mutagenicProduct">
            <summary>
            The mutagenic product
            </summary>
        </member>
        <member name="T:Pawnmorph.EtherState">
            <summary> Enum for the 3 possible states a pawn can be in (in relation to 'ether' hediffs). </summary>
        </member>
        <member name="F:Pawnmorph.EtherState.None">
            <summary>
            the pawn is not ether broken or bonded 
            </summary>
        </member>
        <member name="F:Pawnmorph.EtherState.Broken">
            <summary> pawn is considered 'broken' and should receive no or small penalties to producing </summary>
        </member>
        <member name="F:Pawnmorph.EtherState.Bond">
            <summary> pawn is considered 'bonded' and should receive bonuses for producing </summary>
        </member>
        <member name="T:Pawnmorph.FactionUtilities">
            <summary> Static container for faction related utilities. </summary>
        </member>
        <member name="M:Pawnmorph.FactionUtilities.Notify_MemberTransformed(RimWorld.Faction,Verse.Pawn,Verse.Pawn,System.Boolean,Verse.Map)">
            <summary> Notify this faction that one of their pawns has been transformed. </summary>
        </member>
        <member name="M:Pawnmorph.FactionUtilities.Notify_MemberReverted(RimWorld.Faction,Verse.Pawn,Verse.Pawn,System.Boolean,Verse.Map)">
            <summary>
            Notifies the this faction that their member was reverted by the player.
            </summary>
            <param name="faction">The faction.</param>
            <param name="member">The member.</param>
            <param name="animal">The animal.</param>
            <param name="wasWorldPawn">if set to <c>true</c> [was world pawn].</param>
            <param name="map">The map.</param>
            <exception cref="T:System.ArgumentNullException">
            faction
            or
            member
            or
            animal
            </exception>
        </member>
        <member name="M:Pawnmorph.FactionUtilities.Notify_LeaderTransformed(RimWorld.Faction,Verse.Pawn)">
            <summary> Notify this faction that it's leader has been transformed. </summary>
        </member>
        <member name="T:Pawnmorph.GameCondition_MutagenicFallout">
            <summary>
            game condition for mutagenic fallout 
            </summary>
        </member>
        <member name="M:Pawnmorph.GameCondition_MutagenicFallout.GameConditionTick">
            <summary>
            update this game condition 
            </summary>
        </member>
        <member name="M:Pawnmorph.GameCondition_MutagenicFallout.GameConditionDraw(Verse.Map)">
            <summary>
            draw the overlay to the map 
            </summary>
            <param name="map"></param>
        </member>
        <member name="M:Pawnmorph.GameCondition_MutagenicFallout.SkyTargetLerpFactor(Verse.Map)">
            <summary>
            
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.GameCondition_MutagenicFallout.SkyTarget(Verse.Map)">
            <summary>
            get the sky target for this condition 
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.GameCondition_MutagenicFallout.DoCellSteadyEffects(Verse.IntVec3,Verse.Map)">
            <summary>
            do a steady effect on the given cell 
            </summary>
            <param name="c"></param>
            <param name="map"></param>
        </member>
        <member name="M:Pawnmorph.GameCondition_MutagenicFallout.AnimalDensityFactor(Verse.Map)">
            <summary>
            return a modifier for the animal spawn rate 
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.GameCondition_MutagenicFallout.PlantDensityFactor(Verse.Map)">
            <summary>
            return a modifier for the plant spawn rate 
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.GameCondition_MutagenicFallout.AllowEnjoyableOutsideNow(Verse.Map)">
            <summary>
            if pawns can still do recreation outside 
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.GameCondition_MutagenicFallout.SkyOverlays(Verse.Map)">
            <summary>
            return all sky overlays used for this condition 
            </summary>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.GraphicSys.GraphicsUpdaterComp">
            <summary>
            Thing comp to update the graphics of a pawn as they gain/lose mutations. <br/>
            Requires that the pawn have a MutationTracker comp too.
            </summary>
        </member>
        <member name="T:Pawnmorph.GraphicSys.InitialGraphicsComp">
            <summary>
            comp for storing the initial graphics settings of a pawn for use latter
            </summary>
            <seealso cref="T:Verse.ThingComp" />
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.CustomDrawSize">
            <summary>Gets the draw size.</summary>
            <value>The size of the custom draw.</value>
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.CustomPortraitDrawSize">
            <summary>Gets the draw size of the custom portrait </summary>
            <value>The size of the custom portrait draw.</value>
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.FixGenderPostSpawn">
            <summary>
            Gets a value indicating whether [fix gender post spawn].
            </summary>
            <value><c>true</c> if [fix gender post spawn]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.SkinColor">
            <summary>Gets the color of the skin.</summary>
            <value>The color of the skin.</value>
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.HairColor">
            <summary>Gets the color of the hair.</summary>
            <value>The color of the hair.</value>
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.SkinColorSecond">
            <summary>Gets the skin color second.</summary>
            <value>The skin color second.</value>
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.HairColorSecond">
            <summary>Gets the hair color second.</summary>
            <value>The hair color second.</value>
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.CrownType">
            <summary>Gets the type of the crown.</summary>
            <value>The type of the crown.</value>
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.BodyType">
            <summary>
            Gets the initial body type of this pawn
            </summary>
            <value>
            The type of the body.
            </value>
        </member>
        <member name="P:Pawnmorph.GraphicSys.InitialGraphicsComp.HairDef">
            <summary>
            Gets the initial hair definition.
            </summary>
            <value>
            The hair definition.
            </value>
        </member>
        <member name="M:Pawnmorph.GraphicSys.InitialGraphicsComp.GetDebugStr">
            <summary>Gets the debug string.</summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.GraphicSys.InitialGraphicsComp.Initialize(Verse.CompProperties)">
            <summary>Initializes this instance with the specified properties.</summary>
            <param name="props">The properties.</param>
        </member>
        <member name="M:Pawnmorph.GraphicSys.InitialGraphicsComp.PostExposeData">
            <summary>expose data.</summary>
        </member>
        <member name="M:Pawnmorph.GraphicSys.InitialGraphicsComp.PostSpawnSetup(System.Boolean)">
            <summary>called after the pawn is spawned</summary>
            <param name="respawningAfterLoad">if set to <c>true</c> [respawning after load].</param>
        </member>
        <member name="M:Pawnmorph.GraphicSys.InitialGraphicsComp.RestoreGraphics">
            <summary>
                Restores the alien Comp attached to the parent from the ones stored earlier
                this does not resolve the graphics, that is the job of the caller
            </summary>
        </member>
        <member name="T:Pawnmorph.GraphicSys.MorphGraphicsUtils">
            <summary>
                collection of useful graphics related utility functions on morphs
            </summary>
        </member>
        <member name="M:Pawnmorph.GraphicSys.MorphGraphicsUtils.GetHairColorOverride(Pawnmorph.MorphDef,Verse.Pawn)">
            <summary>
                Gets the hair color override.
            </summary>
            <param name="def">The definition.</param>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">def</exception>
        </member>
        <member name="M:Pawnmorph.GraphicSys.MorphGraphicsUtils.GetHairColorOverrideSecond(Pawnmorph.MorphDef,Verse.Pawn)">
            <summary>
                Gets the hair color override second.
            </summary>
            <param name="def">The definition.</param>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">def</exception>
        </member>
        <member name="M:Pawnmorph.GraphicSys.MorphGraphicsUtils.GetSkinColorOverride(Pawnmorph.MorphDef,Verse.Pawn)">
            <summary>
                Gets the skin color override.
            </summary>
            <param name="def">The definition.</param>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">def</exception>
        </member>
        <member name="M:Pawnmorph.GraphicSys.MorphGraphicsUtils.GetSkinColorSecondOverride(Pawnmorph.MorphDef,Verse.Pawn)">
            <summary>
                Gets the skin color second override.
            </summary>
            <param name="def">The definition.</param>
            <param name="pawn">The pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">def</exception>
        </member>
        <member name="M:Pawnmorph.GraphicSys.MorphGraphicsUtils.RefreshGraphics(Verse.Pawn)">
            <summary>
                refresh the graphics associated with this pawn, including the portraits if it's a colonist
            </summary>
            <param name="pawn"></param>
        </member>
        <member name="T:Pawnmorph.HediffGiver_Mutation">
            <summary>
            hediff giver for giving a mutation 
            </summary>
            <seealso cref="T:Verse.HediffGiver" />
        </member>
        <member name="F:Pawnmorph.HediffGiver_Mutation.mtbDays">
            <summary> The mean time between when the parent Hedif is applied and this HediffGiver performs its opperations. </summary>
        </member>
        <member name="F:Pawnmorph.HediffGiver_Mutation.gender">
            <summary> The gender to preferentially apply this hediff to.</summary>
        </member>
        <member name="F:Pawnmorph.HediffGiver_Mutation.chance">
            <summary> The chance (out of 100) that the hediff will be applied. </summary>
        </member>
        <member name="F:Pawnmorph.HediffGiver_Mutation.tale">
            <summary> The tale to add to the art pool. </summary>
        </member>
        <member name="F:Pawnmorph.HediffGiver_Mutation.memory">
            <summary> The thought to add to the pawn if they acquire the hediff. </summary>
        </member>
        <member name="F:Pawnmorph.HediffGiver_Mutation.ignoreThoughtLimit">
            <summary> Whether or not the thought should be added despite what the mod's settings dictate. </summary>
        </member>
        <member name="F:Pawnmorph.HediffGiver_Mutation.mtbUnits">
            <summary>
            The MTB units
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffGiver_Mutation._triggered">
            <summary>
            Whether or not the curent HediffGiver has tried to add this hediff.<br />
            Used to prevent the chance from activating if spammed repeatedly.
            </summary>
        </member>
        <member name="M:Pawnmorph.HediffGiver_Mutation.ClearHediff(Verse.Hediff)">
            <summary> Clears the triggeredHediff from this giver so it can trigger again on the same hediff. </summary>
            <param name="triggeredHediff">The triggered hediff.</param>
        </member>
        <member name="M:Pawnmorph.HediffGiver_Mutation.OnIntervalPassed(Verse.Pawn,Verse.Hediff)">
            <summary> The function that does the heavy lifting for a HediffGiver. </summary>
            <param name="pawn"> The pawn the parent hediff is applied to. </param>
            <param name="cause"> The parent hediff where this HediffGiver is located in. </param>
        </member>
        <member name="M:Pawnmorph.HediffGiver_Mutation.TryApply(Verse.Pawn,Pawnmorph.MutagenDef,System.Collections.Generic.List{Verse.Hediff},Verse.Hediff,System.Boolean)">
            <summary>Tries the apply the mutation to the given pawn</summary>
            <param name="pawn">The pawn.</param>
            <param name="mutagenDef">The mutagen definition. used to determine if it's a valid target or not</param>
            <param name="outAddedHediffs">The out added hediffs.</param>
            <param name="cause">The cause.</param>
            <param name="addLogEntry">if set to <c>true</c> [add log entry].</param>
            <returns>if the mutation was added or not</returns>
        </member>
        <member name="M:Pawnmorph.HediffGiver_Mutation.TryApply(Verse.Pawn,System.Collections.Generic.List{Verse.BodyPartRecord},Pawnmorph.MutagenDef)">
            <summary>tries to apply the mutations to the given body part records</summary>
            <param name="pawn">The pawn.</param>
            <param name="recordsToAdd">The records to add.</param>
            <param name="mutagen">The mutagen.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.HediffGiver_Mutation.TryApply(Verse.Pawn,Verse.BodyPartRecord,Pawnmorph.MutagenDef)">
            <summary>Tries to apply the mutation to the given body part record</summary>
            <param name="pawn">The pawn.</param>
            <param name="recordToAdd">The record to add.</param>
            <param name="mutagen">The mutagen.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.IMutationEventReceiver">
            <summary> Interface for thing comps that want to receive events when the pawn gains or loses mutation. </summary>
        </member>
        <member name="M:Pawnmorph.IMutationEventReceiver.MutationAdded(Pawnmorph.Hediff_AddedMutation,Pawnmorph.MutationTracker)">
            <summary>called when a mutation is added</summary>
            <param name="mutation">The mutation.</param>
            <param name="tracker">The tracker.</param>
        </member>
        <member name="M:Pawnmorph.IMutationEventReceiver.MutationRemoved(Pawnmorph.Hediff_AddedMutation,Pawnmorph.MutationTracker)">
            <summary>called when a mutation is removed</summary>
            <param name="mutation">The mutation.</param>
            <param name="tracker">The tracker.</param>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_CompleteTF">
            <summary>
            ingestion outcome doer that forces a full transformation
            </summary>
            <seealso cref="T:RimWorld.IngestionOutcomeDoer" />
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_CompleteTF.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>Does the ingestion outcome special.</summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_EsotericRevert">
            <summary>
                ingestion outcome dooer for the reverter serum. reverts transformed pawns to their original state 
            </summary>
            <seealso cref="T:RimWorld.IngestionOutcomeDoer" />
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_EsotericRevert.blackList">
            <summary>The black list of mutagens this instance cannot revert</summary>
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_EsotericRevert.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>Does the ingestion outcome special.</summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_GiveHediffAll">
            <summary>
            ingestion outcome doer that gives all hediffs 
            </summary>
            <seealso cref="T:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase" />
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffAll.completeChance">
            <summary>the chance to give the complete tf instead of the partial</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffAll.severity">
            <summary>The severity to set the hediff at</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffAll.toleranceChemical">
            <summary>The tolerance chemical</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffAll.divideByBodySize">
            <summary>if true, the severity to set by is divided by the pawns body size</summary>
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_GiveHediffAll.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>Does the ingestion outcome special.</summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_GiveHediffIfNonePresent">
            <summary>
            ingestion outcome doer that gives hediffs if none are present 
            </summary>
            <seealso cref="T:RimWorld.IngestionOutcomeDoer" />
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffIfNonePresent.hediffDefs">
            <summary>list of partial hediffs to add</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffIfNonePresent.hediffDefsComplete">
            <summary>
            list of complete hediffs to add
            </summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffIfNonePresent.completeChance">
            <summary>The chance to add a hediff from the complete list rather then the partial list</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffIfNonePresent.severity">
            <summary>The severity</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffIfNonePresent.toleranceChemical">
            <summary>The tolerance chemical</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffIfNonePresent.divideByBodySize">
            <summary>if true the starting severity is modified by the pawns body size</summary>
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_GiveHediffIfNonePresent.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>Does the ingestion outcome special.</summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase">
            <summary> Base class for all ingestion outcome doers that pick from more then one tf hediff to add. </summary>
            <seealso cref="T:RimWorld.IngestionOutcomeDoer" />
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase.hediffDefs">
            <summary>the partial hediffs to add</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase.hediffDefsComplete">
            <summary>
            the complete hediffs to add
            </summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase.runtime">
            <summary>setting for getting hediffDefs at runtime </summary>
        </member>
        <member name="P:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase.AllCompleteDefs">
            <summary> Gets all complete defs. </summary>
            <value> All complete defs. </value>
        </member>
        <member name="P:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase.AllPartialDefs">
            <summary> Gets all partial defs. </summary>
            <value> All partial defs. </value>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase.RuntimeGetSettings">
            <summary>
            class representing the settings for getting hediff defs at runtime 
            </summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase.RuntimeGetSettings.types">
            <summary>The types to get</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase.RuntimeGetSettings.isBlackList">
            <summary>if true, the categories will exclude, not include things</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase.RuntimeGetSettings.categories">
            <summary>The categories to get hediffDefs from </summary>
        </member>
        <member name="T:Pawnmorph.JobDriver_CarryToMutagenChamber">
            <summary>
            job driver for carrying a pawn to a mutagenic chamber 
            </summary>
            <seealso cref="T:Verse.AI.JobDriver" />
        </member>
        <member name="P:Pawnmorph.JobDriver_CarryToMutagenChamber.Takee">
            <summary>Gets the pawn being taken</summary>
            <value>The takee.</value>
        </member>
        <member name="P:Pawnmorph.JobDriver_CarryToMutagenChamber.MutagenicChamber">
            <summary>Gets the mutagenic chamber</summary>
            <value>The drop pod.</value>
        </member>
        <member name="M:Pawnmorph.JobDriver_CarryToMutagenChamber.TryMakePreToilReservations(System.Boolean)">
            <summary>Tries the make pre toil reservations.</summary>
            <param name="errorOnFailed">if set to <c>true</c> [error on failed].</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.JobDriver_CarryToMutagenChamber.MakeNewToils">
            <summary>Makes the new toils.</summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.JobDriver_CarryToMutagenChamber.TaleParameters">
            <summary>gets the Tale parameters.</summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.JobDriver_EnterMutagenChamber">
            <summary>
            job driver for making a pawn enter a mutagenic chamber 
            </summary>
            <seealso cref="T:Verse.AI.JobDriver" />
        </member>
        <member name="M:Pawnmorph.JobDriver_EnterMutagenChamber.TryMakePreToilReservations(System.Boolean)">
            <summary>Tries the make pre toil reservations.</summary>
            <param name="errorOnFailed">if set to <c>true</c> [error on failed].</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.JobDriver_EnterMutagenChamber.MakeNewToils">
            <summary>Makes the new toils.</summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_BoostSeverity">
            <summary>
            ingestion outcome doer for adding severity to specific hediffs 
            </summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_BoostSeverity.hediffFilter">
            <summary>filter for hediffs to boost severity about</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_BoostSeverity.hediffTypes">
            <summary>filter for hediff types to boost severity for</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_BoostSeverity.mustPassAll">
            if a hediff must pass through all filters, otherwise they must pass through any filter 
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_BoostSeverity.severityToAdd">
            <summary>The severity to add</summary>
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_BoostSeverity.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>Does the ingestion outcome special.</summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_AddAspect">
            <summary>
            ingestion out come doer that adds an aspect to a pawn
            </summary>
            <seealso cref="T:RimWorld.IngestionOutcomeDoer" />
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_AddAspect.aspectDef">
            <summary>The aspect to add</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_AddAspect.increaseStage">
            If true will increase the stage of the aspect by 1 every time the thing is consumed.
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_AddAspect.stage">
            <summary>
            The stage to set the aspect at 
            </summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_AddAspect.force">
            <summary>
            if the pawn has the same aspect at a different stage, this will force it to the given stage
            </summary>
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_AddAspect.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>Does the ingestion outcome special.</summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.InteractionWorker_Bark">
            <summary>
            interaction worker for the bark interaction
            </summary>
            <seealso cref="T:RimWorld.InteractionWorker" />
        </member>
        <member name="M:Pawnmorph.InteractionWorker_Bark.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>gets the random selection weight.</summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.InteractionWorker_Bok">
            <summary>
            interaction worker for the bok interaction 
            </summary>
            <seealso cref="T:RimWorld.InteractionWorker" />
        </member>
        <member name="M:Pawnmorph.InteractionWorker_Bok.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>Gets the random selection weight.</summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.InteractionWorker_Meow">
            <summary>
            interaction worker for the meow interaction 
            </summary>
            <seealso cref="T:RimWorld.InteractionWorker" />
        </member>
        <member name="M:Pawnmorph.InteractionWorker_Meow.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>gets the random selection weight.</summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.InteractionWorker_Yip">
            <summary>
            interaction worker for the yip interaction 
            </summary>
            <seealso cref="T:RimWorld.InteractionWorker" />
        </member>
        <member name="M:Pawnmorph.InteractionWorker_Yip.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>gets the random selection weight.</summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.IRaceChangeEventReceiver">
            <summary> Interface for things that receive race change event. </summary>
        </member>
        <member name="M:Pawnmorph.IRaceChangeEventReceiver.OnRaceChange(Verse.ThingDef)">
            <summary>
            Called when the pawn's race changes.
            </summary>
            <param name="oldRace">The old race.</param>
        </member>
        <member name="T:Pawnmorph.MorphCategoryDef">
            <summary> Def for representing the 'category' a morph can be in. </summary>
        </member>
        <member name="P:Pawnmorph.MorphCategoryDef.AllMorphsInCategories">
            <summary>Gets all morphs in this category.</summary>
            <value>All morphs in categories.</value>
        </member>
        <member name="T:Pawnmorph.MorphCategoryDefOf">
            <summary> Static class containing commonly referenced MorphCategoryDefs. </summary>
        </member>
        <member name="T:Pawnmorph.MorphDef">
            <summary> Def class for a morph. Used to generate the morph's implicit race. </summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.categories">
            <summary>
                The categories that the morph belongs to. <br />
                For example, a Pigmorph belongs to the Farm and Production morph groups.
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.race">
            <summary>
                The creature this race is a morph of.<br />
                For example, a Wargmorph's race should be Warg.
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.associatedAnimals">
            <summary>
            The associated animals
            </summary>
            these are a list of animals that are associated with this morph but who don't influence the hybrid race
            transformation targets 
            setting this is useful for getting mutations for animals that don't have morphs yet
        </member>
        <member name="P:Pawnmorph.MorphDef.ExplicitHybridRace">
            <summary>
            Gets the explicit hybrid race.
            </summary>
            <value>
            The explicit hybrid race.
            </value>
        </member>
        <member name="F:Pawnmorph.MorphDef.allowAllRestrictedParts">
            <summary>
            if true, then all restricted mutations (not just those that are directly tied to this morph) will be added to <see cref="P:Pawnmorph.MorphDef.AllAssociatedMutations"/>
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.classification">
            <summary>
                The genus of this morph
                this should be a class like 'canis'
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.group">
            <summary>
                The group the morph belongs to. <br />
                For example, a Huskymorph belongs to the pack, while a Cowmorph is a member of the herd.
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.raceSettings">
            <summary> Various settings for the morph's implied race.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.transformSettings">
            <summary> Various settings determining what happens when a pawn is transformed or reverted.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.addedAspects">
            <summary> Aspects that a morph of this race get.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.fullTransformation">
            <summary>
                The full transformation chain
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.partialTransformation">
            <summary>
                The partial transformation chain
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.hybridRaceDef">
            <summary> The morph's implicit race.</summary>
        </member>
        <member name="P:Pawnmorph.MorphDef.Children">
            <summary>
                Gets the children.
            </summary>
            <value>
                The children.
            </value>
        </member>
        <member name="P:Pawnmorph.MorphDef.Label">
            <summary>
                Gets the label.
            </summary>
            <value>
                The label.
            </value>
        </member>
        <member name="P:Pawnmorph.MorphDef.ParentClass">
            <summary>
                Gets the parent class.
            </summary>
            <value>
                The parent class.
            </value>
        </member>
        <member name="P:Pawnmorph.MorphDef.AllDefs">
            <summary> Gets an enumerable collection of all the morph type's defs.</summary>
        </member>
        <member name="P:Pawnmorph.MorphDef.AllAssociatedMutations">
            <summary>Gets the collection of all mutations associated with this morph def</summary>
            <value>All associated mutations.</value>
        </member>
        <member name="M:Pawnmorph.MorphDef.ConfigErrors">
            <summary>
                get all configuration errors with this instance
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MorphDef.Contains(Pawnmorph.AnimalClassBase)">
            <summary>
                Determines whether this instance contains the object.
            </summary>
            <param name="other">The other.</param>
            <returns>
                <c>true</c> if [contains] [the specified other]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.MorphDef.GetMutationForPart(Verse.BodyPartDef)">
            <summary>Gets the mutation that affect the given part from this morph def</summary>
            <param name="partDef">The part definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">partDef</exception>
        </member>
        <member name="M:Pawnmorph.MorphDef.GetOverride(Verse.ThingDef)">
            <summary>
                obsolete, does nothing
            </summary>
            <param name="food"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MorphDef.IsAnAssociatedMutation(Verse.HediffDef)">
            <summary>
                Determines whether the specified hediff definition is an associated mutation .
            </summary>
            <param name="hediffDef">The hediff definition.</param>
            <returns>
                <c>true</c> if the specified hediff definition is an associated mutation; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">hediffDef</exception>
        </member>
        <member name="M:Pawnmorph.MorphDef.IsAnAssociatedMutation(Pawnmorph.Hediffs.MutationDef)">
            <summary>
                Determines whether the specified hediff definition is an associated mutation .
            </summary>
            <param name="mutationDef">The hediff definition.</param>
            <returns>
                <c>true</c> if the specified hediff definition is an associated mutation; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">hediffDef</exception>
        </member>
        <member name="M:Pawnmorph.MorphDef.IsAnAssociatedMutation(Verse.Hediff)">
            <summary>
                Determines whether the given hediff is an associated mutation.
            </summary>
            <param name="hediff">The hediff.</param>
            <returns>
                <c>true</c> if the specified hediff is an associated mutation ; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">hediff</exception>
        </member>
        <member name="M:Pawnmorph.MorphDef.ResolveReferences">
            <summary>
                resolves all references after DefOfs are loaded
            </summary>
        </member>
        <member name="T:Pawnmorph.MorphDef.TransformSettings">
            <summary> Settings to control what happens when a pawn changes race to this morph type.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.TransformSettings.transformTale">
            <summary> The TaleDef that should be used in art that occurs whenever a pawn shifts to this morph.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.TransformSettings.transformationMessage">
            <summary> The content of the message that should be spawned when a pawn shifts to this morph.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.TransformSettings.messageDef">
            <summary> The message type that should be used when a pawn shifts to this morph.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.TransformSettings.transformationMemory">
            <summary> Memory added when a pawn shifts to this morph.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.TransformSettings.revertedMemory">
            <summary>
                Memory added when the pawn reverts from this morph back to human if they have neither the body purist or
                furry traits.
            </summary>
        </member>
        <member name="T:Pawnmorph.MorphDef.AddedAspect">
            <summary> Aspects to add when a pawn changes race to this morph type and settings asociated with them.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.AddedAspect.def">
            <summary> The Def of the aspect to add.</summary>
        </member>
        <member name="F:Pawnmorph.MorphDef.AddedAspect.keepOnReversion">
            <summary> Whether or not the aspect should be kept even if the pawn switches race.</summary>
        </member>
        <member name="T:Pawnmorph.MorphGroupDef">
            <summary>
            Def for morph groups. <br/>
            i.e. Packs, Herds, ect.
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphGroupDef._associatedMorphs">
            <summary> A list of all morph types that are of this group. </summary>
        </member>
        <member name="P:Pawnmorph.MorphGroupDef.AnimalRaces">
            <summary>
            Gets the animal races in this morph group
            </summary>
            <value>
            The animal races.
            </value>
        </member>
        <member name="F:Pawnmorph.MorphGroupDef.animalRaces">
            <summary>
            The animal races that count toward this group 
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphGroupDef.hediff">
            hediff to give to morphs in this group,
        </member>
        <member name="F:Pawnmorph.MorphGroupDef.aspectDef">
            <summary>The aspect definition to add to all morphs in this group</summary>
        </member>
        <member name="P:Pawnmorph.MorphGroupDef.MorphsInGroup">
            <summary> An enumerable collection of all morphs in this group.</summary>
        </member>
        <member name="T:Pawnmorph.MorphPawnKindExtension">
            <summary> Mod extension for applying morphs to various PawnKinds. </summary>
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.hediffRange">
            <summary>the min and max number of hediffs this kind can have</summary>
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.aspectRange">
            <summary>The range for the number of aspects that can be added</summary>
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.morphChance">
            <summary>the chance that a given pawn will be a hybrid race</summary>
            percentage, [0,1]
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.pickAnyMutation">
            <summary>
                if true, then any mutation from <see cref="F:Pawnmorph.MorphPawnKindExtension.morphs" /> can be picked
                other wise just one morph is picked
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.aspects">
            <summary>The aspects that can be added by this extension </summary>
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.morphCategories">
            <summary>The morph categories that can be chosen from</summary>
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.mutationCategories">
            <summary>
                The mutation categories that can be chosen from, this is in addition to those added by
                <seealso cref="F:Pawnmorph.MorphPawnKindExtension.morphCategories" />
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.morphs">
            <summary>list of morphs to get mutations from</summary>
        </member>
        <member name="M:Pawnmorph.MorphPawnKindExtension.GetAllAspectDefs">
            <summary>Gets all aspect defs that can be added by this instance.</summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MorphPawnKindExtension.GetAvailableStagesFor(Pawnmorph.AspectDef)">
            <summary>Gets the available stages that can be added by the given aspect.</summary>
            <param name="def">The definition.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MorphPawnKindExtension.GetRandomMutations(System.Nullable{System.Int32})">
            <summary>
            Gets a random set of mutations to be added 
            </summary>
            <param name="seed">The seed.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MorphPawnKindExtension.ToStringFull">
            <summary>
            Converts this object to a full debug string 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.MorphPawnKindExtension.AspectEntry">
            <summary>
                class for a single aspect entry in the <see cref="T:Pawnmorph.MorphPawnKindExtension" />
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.AspectEntry.aspect">
            <summary>The aspect to add</summary>
        </member>
        <member name="F:Pawnmorph.MorphPawnKindExtension.AspectEntry.stage">
            <summary>The stage to add the aspect at</summary>
        </member>
        <member name="T:Pawnmorph.MorphTracker">
            <summary>
            map component for tracking morphs by type and group on a map 
            </summary>
        </member>
        <member name="T:Pawnmorph.MorphTracker.MorphCountChangedHandle">
            <summary>
            delegate for notifying when the morph count changed 
            </summary>
            <param name="sender">The sender.</param>
            <param name="morph">The morph.</param>
        </member>
        <member name="E:Pawnmorph.MorphTracker.MorphCountChanged">
            <summary> Event that is raised every time the morph count on the attached map changes. </summary>
        </member>
        <member name="M:Pawnmorph.MorphTracker.#ctor(Verse.Map)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MorphTracker"/> class.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:Pawnmorph.MorphTracker.NotifySpawned(Verse.Pawn)">
            <summary> Notify this tracker that the pawn has spawned. </summary>
        </member>
        <member name="M:Pawnmorph.MorphTracker.GetGroupCount(Pawnmorph.MorphGroupDef)">
            <summary> Get the number of morphs belonging to the given group active in the map. </summary>
        </member>
        <member name="P:Pawnmorph.MorphTracker.Item(Pawnmorph.MorphDef)">
            <summary> Get the number of morphs active on this map. </summary>
        </member>
        <member name="M:Pawnmorph.MorphTracker.NotifyDespawned(Verse.Pawn)">
            <summary> Notify the map that the pawn has despawned from the map. </summary>
        </member>
        <member name="M:Pawnmorph.MorphTracker.NotifyPawnRaceChanged(Verse.Pawn,Pawnmorph.MorphDef)">
            <summary> Notify this tracker that the pawn race has changed. </summary>
        </member>
        <member name="T:Pawnmorph.MorphTrackingComp">
            <summary> Component for tracking the morph related updates of a single pawn. </summary>
        </member>
        <member name="F:Pawnmorph.MorphTrackingComp.needsRaceCompCheck">
            <summary>
            flag to check if the pawn needs to have their comps check for any comps added or removed by a race change
            </summary>
        </member>
        <member name="M:Pawnmorph.MorphTrackingComp.Initialize(Verse.CompProperties)">
            <summary>Initializes this instance with the specified properties.</summary>
            <param name="props">The properties.</param>
        </member>
        <member name="M:Pawnmorph.MorphTrackingComp.PostSpawnSetup(System.Boolean)">
            <summary>called during post spawn setup</summary>
            <param name="respawningAfterLoad">if set to <c>true</c> [respawning after load].</param>
        </member>
        <member name="M:Pawnmorph.MorphTrackingComp.CompTick">
            <summary>
            called every tick
            </summary>
        </member>
        <member name="M:Pawnmorph.MorphTrackingComp.NotifyRaceChanged(Pawnmorph.MorphDef)">
            <summary> Notify that the parent has changed races. </summary>
            <param name="oldMorph"> The morph the parent used to be. </param>
        </member>
        <member name="M:Pawnmorph.MorphTrackingComp.PostDeSpawn(Verse.Map)">
            <summary>called when the pawn is de-spawned from the given map</summary>
            <param name="map">The map.</param>
        </member>
        <member name="T:Pawnmorph.MorphTrackingCompProperties">
            <summary>
            
            </summary>
            <seealso cref="T:Verse.CompProperties" />
        </member>
        <member name="M:Pawnmorph.MorphTrackingCompProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MorphTrackingCompProperties"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.MorphTransformationTypes">
            <summary>
            enum for telling the different kinds of morph transformation hediffs 
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphTransformationTypes.Full">
            <summary>a full transformation</summary>
        </member>
        <member name="F:Pawnmorph.MorphTransformationTypes.Partial">
            <summary>a partial transformation</summary>
        </member>
        <member name="T:Pawnmorph.MorphUtilities">
            <summary>
                Static collection of useful morph related functions. <br />
                TransformerUtilities was getting a bit crowded.
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphUtilities.HUMAN_CHANGE_FACTOR">
            <summary>
                scalar used to make it easier for pawns to become hybrids
            </summary>
        </member>
        <member name="F:Pawnmorph.MorphUtilities.CHIMERA_THRESHOLD">
            <summary>the percent influence needed for a single morph to be selected to turn the pawn into, rather then a chimera</summary>
        </member>
        <member name="F:Pawnmorph.MorphUtilities.MORPH_TF_THRESHOLD">
            <summary>
                the percent human influence below which a pawn is 'no longer considered human'
            </summary>
        </member>
        <member name="P:Pawnmorph.MorphUtilities.MaxHumanInfluence">
            <summary> The maximum possible human influence. </summary>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.GetMaxInfluenceOfRace(Verse.ThingDef)">
            <summary>
            Gets the maximum influence of race.
            </summary>
            <param name="raceDef">The race definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">raceDef</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.GetMorphOfAnimal(Verse.ThingDef)">
            <summary>
            Gets the morph of the given animal.
            </summary>
            <param name="animalDef">The animal definition.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.IsChimera(Pawnmorph.MorphDef)">
            <summary>
            Determines whether this instance is a chimera.
            </summary>
            <param name="morph">The morph.</param>
            <returns>
              <c>true</c> if the specified morph is a chimera; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">morph</exception>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.CheckRace(Verse.Pawn,System.Boolean,System.Boolean)">
            <summary>
            Checks the race of this pawn. If the pawn is mutated enough it's race is changed to one of the hybrids
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="addMissingMutations">if true, any missing mutations from the highest morph influence will be added</param>
            <param name="displayNotifications">if set to <c>true</c> display race shift notifications.</param>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="P:Pawnmorph.MorphUtilities.AllMorphs">
            <summary>Gets all morphs.</summary>
            <value>All morphs.</value>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.TryGetBestMorphOfAnimal(Verse.ThingDef)">
            <summary>
            Tries the get best morph of the specified animal.
            </summary>
            tries to get the best morph def of the given animal, checking first for a morph who's
            race is the given race then checks morph's associated animals 
            <param name="race">The race.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">race</exception>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.GetAssociatedMorph(Verse.HediffDef)">
            <summary> Gets all morphDefs associated with the given transformation. </summary>
            <param name="transformationDef"> The transformation definition. </param>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.GetHumanInfluence(Verse.Pawn,System.Boolean)">
            <summary> Gets the amount of influence a pawn has that's still human.</summary>
            <param name="pawn">the pawn</param>
            <param name="normalize"> Whether or not the resulting influence should be normalized between [0,1] </param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.GetTransformationType(Verse.HediffDef)">
            <summary> Gets the type of the transformation. </summary>
            <param name="inst"> The instance. </param>
            <returns> The type of the transformation. </returns>
            <exception cref="T:System.ArgumentNullException"> inst is null </exception>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.HybridsAreEnabledFor(Verse.ThingDef)">
            <summary>checks if the hybrid system is enabled for the given race def.</summary>
            <param name="raceDef">The race definition.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.IsChimeraMorph(Pawnmorph.MorphDef)">
            <summary>
                Determines whether this instance is a chimera morph.
            </summary>
            <param name="morphDef">The morph definition.</param>
            <returns>
                <c>true</c> if this instance is a chimera morph; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.IsHybridRace(Verse.Pawn)">
            <summary>
                Determines whether this pawn is a hybrid race.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if this pawn is a hybrid race ; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.IsHybridRace(Verse.ThingDef)">
            <summary>
                Determines whether this instance is hybrid race.
            </summary>
            <param name="raceDef">The race definition.</param>
            <returns>
                <c>true</c> if this instance is a hybrid race; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.ShouldBeConsideredHuman(Verse.Pawn)">
            <summary> Get whether or not the given pawn should still be considered 'human'. </summary>
        </member>
        <member name="M:Pawnmorph.MorphUtilities.GetHighestInfluence(Verse.Pawn)">
            <summary>
                get the largest influence on this pawn
            </summary>
            <param name="pawn"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.MutagenDef">
            <summary> Def for a mutagen strain. <br />
            A mutagen is a collection of transformation related hediff's ingestionOutcomeDoers that all share a common IFF system.
            </summary>
            <seealso cref="T:Verse.Def" />
        </member>
        <member name="F:Pawnmorph.MutagenDef.canInfectAnimals">
            <summary>if this instance can infect animals</summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.canInfectMechanoids">
            <summary>
            if this instance can infect mechanoids
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.mutagenType">
            <summary>The mutagen type</summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.revertedThoughtGood">
            <summary>
            the positive thought to add when a pawn is reverted
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.revertedThoughtBad">
            <summary>
            The negative thought to add when a pawn is reverted 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.transformedSapienceDrop">
            <summary>
            the sapience drop range when a pawn is transformed by this mutagen
            </summary>
            note, values returned by this range will be clamped to [0,1] 
        </member>
        <member name="F:Pawnmorph.MutagenDef.revertedPrimalWish">
            <summary>
            the reversion thought for pawns with primal wish 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.transformedSapienceState">
            <summary>
            sapience state for when a pawn is transformed by this mutagen 
            </summary>
            default is FormerHuman
        </member>
        <member name="F:Pawnmorph.MutagenDef.revertedSapienceState">
            <summary>
            sapience state for when a pawn is reverted from being transformed by this mutagen 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.damageProperties">
            <summary>
            The damage properties
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.immunizingHediffs">
            <summary>
            a list of hediffs that make a pawn immune to the effects of this mutagen source 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.aspectGivers">
            <summary>
            The aspect givers
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDef.tfAspectGivers">
            <summary>
            list of aspect givers that are tried when a pawn transforms 
            </summary>
        </member>
        <member name="M:Pawnmorph.MutagenDef.ConfigErrors">
            <summary>Get all Configuration Errors with this instance</summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutagenDef.CanTransform(Verse.Pawn)">
            <summary> Determines whether this instance can transform the specified pawn. </summary>
            <param name="pawn"> The pawn. </param>
            <returns> <c>true</c> if this instance can transform the specified pawn; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Pawnmorph.MutagenDef.CanTransform(Verse.ThingDef)">
            <summary>
            Determines whether this instance can transform the specified race definition.
            </summary>
            <param name="raceDef">The race definition.</param>
            <returns>
              <c>true</c> if this instance can transform the specified race definition; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Pawnmorph.MutagenDef.MutagenCached">
            <summary>Gets the cached mutagen </summary>
            <value>The cached mutagen </value>
        </member>
        <member name="M:Pawnmorph.MutagenDef.CanInfect(Verse.Pawn)">
            <summary>
            Determines whether this instance can infect the specified pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this instance can infect the specified pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Pawnmorph.MutagenDamageProperties">
            <summary>
            class that stores information about mutagenic damage 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDamageProperties.apparelDamageOffset">
            <summary>
            the minimum amount of damage to do to apparel 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDamageProperties.apparelDamageMultiplier">
            <summary>
            The apparel damage multiplier
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDamageProperties.spawnedBiproductMult">
            <summary>
            how much biproduct to spawn per point of damage 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutagenDamageProperties.biproduct">
            <summary>
            The biproduct to spawn when apparel takes damage 
            </summary>
        </member>
        <member name="T:Pawnmorph.MutagenUtilities">
            <summary>
            collection of mutagen related utility functions 
            </summary>
        </member>
        <member name="M:Pawnmorph.MutagenUtilities.ClearOverlappingHediffs(Pawnmorph.HediffGiver_Mutation,Verse.Pawn)">
            <summary>
            Clears the overlapping hediffs on the given pawn.
            </summary>
            <param name="mutationGiver">The mutation giver.</param>
            <param name="pawn">The pawn.</param>
            <exception cref="T:System.ArgumentNullException">
            mutationGiver
            or
            pawn
            </exception>
        </member>
        <member name="M:Pawnmorph.MutagenUtilities.TryApplyAspects(Pawnmorph.MutagenDef,Verse.Pawn)">
            <summary>
            Tries the apply aspects that might be given from this mutagen
            </summary>
            <param name="mutagen">The mutagen.</param>
            <param name="pawn">The pawn.</param>
            <exception cref="T:System.ArgumentNullException">
            mutagen
            or
            pawn
            </exception>
        </member>
        <member name="M:Pawnmorph.MutagenUtilities.CanInfect(Verse.HediffDef,Verse.Pawn)">
            <summary> Determines whether this instance can infect the specified pawn. </summary>
            <param name="mutationDef"> The mutation definition. </param>
            <param name="pawn"> The pawn. </param>
            <returns> <c>true</c> if this instance can infect the specified pawn; otherwise, <c>false</c>. </returns>
            <exception cref="T:System.ArgumentNullException"> mutationDef or pawn is null. </exception>
        </member>
        <member name="M:Pawnmorph.MutagenUtilities.GetMutagenDef(Pawnmorph.Hediffs.MorphTf)">
            <summary> Gets the mutagen associated with this tf hediff. </summary>
            <param name="morphTf"> The morph tf. </param>
            <exception cref="T:System.ArgumentNullException"> morphTf is null. </exception>
        </member>
        <member name="M:Pawnmorph.MutagenUtilities.GetMutagenDef(Verse.HediffDef)">
            <summary> Gets the mutagen associated with this tf hediff. </summary>
            <param name="morphTf"> The morph tf. </param>
            <exception cref="T:System.ArgumentNullException"> morphTf is null. </exception>
        </member>
        <member name="T:Pawnmorph.MutationCategoryDef">
            <summary>
            def representing a 'category' of mutations 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationCategoryDef.restricted">
            <summary>if mutations in this category should be restricted to special PawnGroupKinds</summary>
        </member>
        <member name="P:Pawnmorph.MutationCategoryDef.AllMutations">
            <summary>
            Gets all mutations in this category 
            </summary>
            <value>
            All mutations.
            </value>
        </member>
        <member name="T:Pawnmorph.MutationLogEntry">
            <summary> Log entry for when a pawn mutates. </summary>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MutationLogEntry"/> class.
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.#ctor(Verse.Pawn,Verse.HediffDef,System.Collections.Generic.IEnumerable{Verse.BodyPartDef})">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MutationLogEntry"/> class.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="mutationDef">The mutation definition.</param>
            <param name="mutatedParts">The mutated parts.</param>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.#ctor(Verse.Pawn,Verse.HediffDef,Verse.BodyPartDef[])">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MutationLogEntry"/> class.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="mutationDef">The mutation definition.</param>
            <param name="mutatedParts">The mutated parts.</param>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.Concerns(Verse.Thing)">
            <summary>
            true if this log is about the given thing.
            </summary>
            <param name="t">The t.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.ExposeData">
            <summary>
            Exposes the data.
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.GetConcerns">
            <summary>
            Gets everything this log is about.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.GetTipString">
            <summary>
            Gets the tip string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.ToString">
            <summary> Returns a string that represents the current object. </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.ToGameStringFromPOV_Worker(Verse.Thing,System.Boolean)">
            <summary>
            create the main log text 
            </summary>
            <param name="pov">The pov.</param>
            <param name="forceLog">if set to <c>true</c> [force log].</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationLogEntry.GetAAn(System.String)">
            <summary>
            if a word starts with a vowel, return 'an' else return 'a'
            </summary>
            <param name="word"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.MutationsDefOf">
            <summary> Static container for commonly referenced mutations. </summary>
        </member>
        <member name="T:Pawnmorph.MutationHediffExtension">
            <summary>
                Mod def extension for applying to hediffs to manually assign them a part without using a hediff giver. <br />
                Note, the results will be additive, so if a mutation has this extension and is in one or more hediff givers,
                the total set of parts it can be applied to is the union of this extension and the givers
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationHediffExtension.parts">
            <summary>
                list of body parts this mutation can be added to
            </summary>
            note: this does not affect HediffGiver_AddedMutation, this is for adding mutations without a hediff giver
        </member>
        <member name="F:Pawnmorph.MutationHediffExtension.countToAffect">
            <summary>the number of parts to add this mutation to</summary>
        </member>
        <member name="F:Pawnmorph.MutationHediffExtension.generationCost">
            <summary>The generation cost of this mutation. the better the mutation the higher the cost should be</summary>
        </member>
        <member name="F:Pawnmorph.MutationHediffExtension.categories">
            <summary>
                the various mutation categories this mutation belongs to
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationHediffExtension.mutationLogRulePack">
            <summary>
                the rule pack to use when generating mutation logs for this mutation
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationHediffExtension.mutationTale">
            <summary>The mutation tale</summary>
        </member>
        <member name="F:Pawnmorph.MutationHediffExtension.mutationMemory">
            <summary>The mutation memory</summary>
        </member>
        <member name="P:Pawnmorph.MutationHediffExtension.IsRestricted">
            <summary>Gets a value indicating whether this instance is restricted to special PawnKindGroups</summary>
            <value>
                <c>true</c> if this instance is restricted the mutation can only be given to special PawnKindGroups; otherwise it
                can show up in any group, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.MutationHediffExtension.ConfigErrors">
            <summary>Get all Configuration Errors with this instance</summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationHediffExtension.CreateMutationGiver(Verse.HediffDef)">
            <summary>
            Creates the mutation giver for the parent hediff.
            </summary>
            <param name="parentDef">The parent definition.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.MutationOutlook">
            <summary>
            enum for how a pawn views mutations 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationOutlook.Neutral">
            <summary>
            neutral
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationOutlook.Furry">
            <summary>
            they like the idea of having mutations 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationOutlook.BodyPurist">
            <summary>
            they especially dislike the idea of having mutations 
            </summary>
        </member>
        <member name="F:Pawnmorph.MutationOutlook.PrimalWish">
            <summary>
            the pawn wants to be a full animal 
            </summary>
        </member>
        <member name="T:Pawnmorph.MutationTracker">
            <summary> Tracker comp for tracking the current influence a pawn has of a given morph. </summary>
        </member>
        <member name="M:Pawnmorph.MutationTracker.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Pawnmorph.MutationTracker.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the
                collection.
            </returns>
        </member>
        <member name="P:Pawnmorph.MutationTracker.TotalNormalizedInfluence">
            <summary>
            Gets the total normalized non human influence 
            </summary>
            <value>
            The total normalized influence.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationTracker.TotalInfluence">
            <summary>
            Gets the non human influence on the pawn.
            </summary>
            <value>
            The total influence.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationTracker.MutationsCount">
            <summary>
                Gets the total number of mutations on the pawn being tracked.
            </summary>
            <value>
                The mutations count.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationTracker.Item(Pawnmorph.MorphDef)">
            <summary> Get the current influence associated with the given key. </summary>
        </member>
        <member name="P:Pawnmorph.MutationTracker.HighestInfluence">
            <summary>
            Gets the highest influence on this pawn 
            </summary>
            <value>
            The highest influence.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationTracker.AllMutations">
            <summary> All mutations the pawn has. </summary>
        </member>
        <member name="P:Pawnmorph.MutationTracker.Pawn">
            <summary>
                Gets the pawn this is tracking mutations for.
            </summary>
            <value>
                The pawn.
            </value>
        </member>
        <member name="M:Pawnmorph.MutationTracker.CompTick">
            <summary>
                called every tick
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationTracker.CheckPawnRace">
            <summary>
            Checks if the pawn's race should change .
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationTracker.GetDirectNormalizedInfluence(Pawnmorph.AnimalClassBase)">
            <summary>
                Gets the normalized direct influence of the given morph
            </summary>
            this does not take into account influence the children of the given class might have on the pawn
            <param name="class">The morph.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">morph</exception>
        </member>
        <member name="M:Pawnmorph.MutationTracker.Initialize(Verse.CompProperties)">
            <summary>
                Initializes this instance with given props.
            </summary>
            this is call just after it is added to the parent, so other comps may or may not be added yet
            <param name="props">The props.</param>
        </member>
        <member name="M:Pawnmorph.MutationTracker.PostSpawnSetup(System.Boolean)">
            <summary>
            called just before spawning in the pawn 
            </summary>
            <param name="respawningAfterLoad">if set to <c>true</c> [respawning after load].</param>
        </member>
        <member name="M:Pawnmorph.MutationTracker.RecalcIfNeeded">
            <summary>
            Recalculates the mutation influences if needed.
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationTracker.RecalculateMutationInfluences">
            <summary>
                preforms a full recalculation of all mutation influences
            </summary>
        </member>
        <member name="P:Pawnmorph.MutationTracker.InfluencesDirty">
            <summary>
            Gets or sets a value indicating whether the morph influences caches are dirty.
            if true the influences will be recalculated on the next tick 
            </summary>
            <value>
              <c>true</c> if [influences dirty]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.MutationTracker.NotifyMutationAdded(Pawnmorph.Hediff_AddedMutation)">
            <summary> Called to notify this tracker that a mutation has been added. </summary>
        </member>
        <member name="M:Pawnmorph.MutationTracker.NotifyMutationRemoved(Pawnmorph.Hediff_AddedMutation)">
            <summary> Called to notify this tracker that a mutation has been removed. </summary>
        </member>
        <member name="M:Pawnmorph.MutationTracker.PostExposeData">
            <summary>
                exposes this instances data after the parent.
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationTracker.Pawnmorph#IRaceChangeEventReceiver#OnRaceChange(Verse.ThingDef)">
            <summary>
            Called when the pawn's race changes.
            </summary>
            <param name="oldRace">The old race.</param>
        </member>
        <member name="T:Pawnmorph.MutationUtilities">
            <summary>
                static class containing mutation related utility functions
            </summary>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AllNonRestrictedMutations">
            <summary>
            Gets a list of all non restricted mutations.
            </summary>
            <value>
            All non restricted mutations.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.MinMutationAdaptabilityValue">
            <summary>
                Gets the minimum mutation adaptability stat value.
            </summary>
            <value>
                The minimum mutation adjust value.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.MaxMutationAdaptabilityValue">
            <summary>
                Gets the maximum mutation adaptability value.
            </summary>
            <value>
                The maximum mutation adaptability value.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AverageMutationAdaptabilityValue">
            <summary>
                Gets the average mutation adaptability value.
            </summary>
            <value>
                The average mutation adaptability value.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AllMutationMemories">
            <summary>
                an enumerable collection of all mutation related thoughts
            </summary>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AllMutationsWithGraphics">
            <summary>Gets all mutations with graphics.</summary>
            <value>All mutations with graphics.</value>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.AddAllMorphMutations(Verse.Pawn,Pawnmorph.MorphDef,System.Nullable{Pawnmorph.MutationUtilities.AncillaryMutationEffects})">
            <summary>
            Adds all morph mutations.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="morph">The morph.</param>
            <param name="ancillaryEffects">The ancillary effects.</param>
            <exception cref="T:System.ArgumentNullException">pawn
            or
            morph</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.TryAddMutationThought(Verse.Pawn,RimWorld.ThoughtDef,System.Boolean)">
            <summary>
            Tries to add a mutation thought.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="mutationMemory">The mutation memory.</param>
            <param name="ignoreLimit">if set to <c>true</c> ignore the mutation memory limit in the mod settings.</param>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.IsProsthetic(Verse.Hediff)">
            <summary>
            Determines whether the specified hediff is prosthetic.
            </summary>
            <param name="hediff">The hediff.</param>
            <returns>
              <c>true</c> if the specified hediff is prosthetic; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">hediff</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.AddMutation(Verse.Pawn,Pawnmorph.Hediffs.MutationDef,System.Int32,System.Nullable{Pawnmorph.MutationUtilities.AncillaryMutationEffects},System.Boolean)">
            <summary>
            Adds the mutation to the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="mutation">The mutation.</param>
            <param name="countToAdd">The count to add.</param>
            <param name="ancillaryEffects">The ancillary effects.</param>
            <param name="force">if set to <c>true</c> the mutation will be added regardless if it is valid for the given pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn
            or
            mutation</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.GetAllNonMissingWithoutProsthetics(Verse.HediffSet)">
            <summary>
            Gets all non missing without prosthetics.
            </summary>
            <param name="hSet">The h set.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">hSet</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.AddMutation(Verse.Pawn,Pawnmorph.Hediffs.MutationDef,System.Collections.Generic.List{Verse.BodyPartDef},System.Int32,System.Nullable{Pawnmorph.MutationUtilities.AncillaryMutationEffects},System.Boolean)">
            <summary>
            Adds the mutation to the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="mutation">The mutation.</param>
            <param name="parts">The parts.</param>
            <param name="countToAdd">The count to add.</param>
            <param name="ancillaryEffects">The ancillary effects.</param>
            <param name="force">if set to <c>true</c> the mutation will be added regardless if it is valid for the given pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn
            or
            mutation</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.ResumeAdjustment(Verse.Hediff)">
            <summary>
            Resumes the adjustment process for this hediff if it is a mutation, does nothing 
            </summary>
            Resumes the adjustment process for this hediff if it is a mutation, does nothing if the hediff is not a mutation, the mutation is not halted
            or the process is complete 
            <param name="hediff">The hediff.</param>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.AddMutation(Verse.Pawn,Pawnmorph.Hediffs.MutationDef,System.Collections.Generic.IEnumerable{Verse.BodyPartRecord},System.Nullable{Pawnmorph.MutationUtilities.AncillaryMutationEffects},System.Boolean)">
            <summary>
            Adds the mutation to the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="mutation">The mutation.</param>
            <param name="records">The records to add mutations to</param>
            <param name="ancillaryEffects">The ancillary effects.</param>
            <param name="force">if set to <c>true</c> the mutation is added regardless if the mutation is valid for the given pawn.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">pawn
            or
            mutation
            or
            records</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.AddMutation(Verse.Pawn,Pawnmorph.Hediffs.MutationDef,Verse.BodyPartRecord,System.Nullable{Pawnmorph.MutationUtilities.AncillaryMutationEffects})">
            <summary>
                Adds the mutation to the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="mutation">The mutation.</param>
            <param name="record">The records to add mutations to</param>
            <param name="ancillaryEffects">The ancillary effects.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                pawn
                or
                mutation
                or
                records
            </exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.CanApplyMutations(Pawnmorph.HediffGiver_Mutation,Verse.Pawn)">
            <summary>
                Determines whether this instance can apply mutations to the specified pawn.
            </summary>
            <param name="mutationGiver">The mutation giver.</param>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if this instance can apply mutations to the specified pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.ClearOverlappingMutations(Pawnmorph.Hediffs.MutationDef,Verse.Pawn)">
            <summary>
                Clears the overlapping mutations.
            </summary>
            <param name="mutationDef">The mutation definition.</param>
            <param name="pawn">The pawn.</param>
            <exception cref="T:System.ArgumentNullException">
                mutationDef
                or
                pawn
            </exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.GetAllDefMutationSites(Pawnmorph.Hediffs.MutationDef)">
            <summary>
                Gets all part def mutation sites.
            </summary>
            <param name="mutationDef">The mutation definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">mutationDef</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.GetAllMutableParts(Verse.BodyDef)">
            <summary>
                Gets all mutable part on this body def
            </summary>
            <param name="bodyDef">The body definition.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">bodyDef</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.GetAllMutationSites(Pawnmorph.Hediffs.MutationDef,Verse.BodyDef)">
            <summary>
                Gets all mutation sites.
            </summary>
            <param name="mutationDef">The mutation definition.</param>
            <param name="bDef">The b definition.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.GetMutationsByPart(Verse.BodyPartDef)">
            <summary>Gets the mutations by part def.</summary>
            <param name="bodyPartDef">The body part definition.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.GetMutationTracker(Verse.Pawn,System.Boolean)">
            <summary>
                try to get the mutation tracker on this pawn, null if the pawn does not have a tracker
            </summary>
            <param name="pawn"></param>
            <param name="warnOnFail">if the pawn does not have a mutation tracker, display a warning message</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.GetMutationOutlook(Verse.Pawn)">
            <summary>
                get the pawn's outlook toward being mutated
            </summary>
            <param name="pawn"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.GetPartsToAddTo(Verse.HediffGiver)">
            <summary>Gets the part to add hediffs to.</summary>
            <param name="giver">The giver.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.GetProductionMutations(Verse.Pawn)">
            <summary>
                get the production hediffs of the pawn
            </summary>
            <param name="pawn"></param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.IsMissingAtAllIn(Verse.BodyPartRecord,Verse.Pawn)">
            <summary>
                Determines whether this part or any of it's parent is missing at all in the specified pawn.
            </summary>
            <param name="record">The record.</param>
            <param name="pawn">The pawn.</param>
            <returns>
                <c>true</c> if this part or any of it's parents is missing at all in the specified pawn; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                record
                or
                pawn
            </exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.IsObsolete(Verse.HediffDef)">
            <summary>Determines whether this instance is obsolete.</summary>
            <param name="def">The definition.</param>
            <returns>
                <c>true</c> if the specified definition is obsolete; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">def</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.OverlapsWith(Pawnmorph.Hediffs.MutationDef,Pawnmorph.Hediffs.MutationDef)">
            <summary>
                checks if this mutation overlaps with the given mutation
            </summary>
            <param name="mutationDef">The mutation definition.</param>
            <param name="otherMutation">The other mutation.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                mutationDef
                or
                otherMutation
            </exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.CanApplyMutations(Pawnmorph.Hediffs.MutationDef,Verse.Pawn,Pawnmorph.MutagenDef)">
            <summary>
            Determines whether this instance can be applied to the specified pawn 
            </summary>
            <param name="mutationDef">The mutation definition.</param>
            <param name="pawn">The pawn.</param>
            <param name="mutagen">The mutagen.</param>
            <returns>
              <c>true</c> if this instance can be applied to the specified pawn; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            mutationDef
            or
            pawn
            </exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.CanApplyMutations(Pawnmorph.Hediffs.MutationDef,Verse.Pawn,Verse.BodyPartRecord,Pawnmorph.MutagenDef)">
            <summary>
            Determines whether this instance can be applied to the specified pawn
            </summary>
            <param name="mutationDef">The mutation definition.</param>
            <param name="pawn">The pawn.</param>
            <param name="addPart">The add part.</param>
            <param name="mutagen">The mutagen.</param>
            <returns>
              <c>true</c> if this instance can be applied to the specified pawn; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">mutationDef
            or
            pawn</exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.BlocksMutation(Pawnmorph.Hediff_AddedMutation,Pawnmorph.Hediffs.MutationDef,Verse.BodyPartRecord)">
            <summary>
            checks if this mutation blocks the addition of the other mutation at the given site 
            </summary>
            <param name="mutation">The mutation.</param>
            <param name="otherMutation">The other mutation.</param>
            <param name="addPart">The add part.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            mutation
            or
            otherMutation
            or
            addPart
            </exception>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.HasMutation(Verse.Pawn,Pawnmorph.Hediffs.MutationDef)">
            <summary>
            Determines whether the specified pawn has the given mutation.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="mutation">The mutation.</param>
            <returns>
              <c>true</c> if the specified pawn has the given mutation; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Pawnmorph.MutationUtilities.AncillaryMutationEffects">
            <summary>
                simple struct to contain all options for addition actions to be taken when adding a mutation
            </summary>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.AncillaryMutationEffects.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.MutationUtilities.AncillaryMutationEffects" /> struct.
            </summary>
            <param name="addTale">if set to <c>true</c> [add tale].</param>
            <param name="addMemory">if set to <c>true</c> [add memory].</param>
            <param name="addLogEntry">if set to <c>true</c> [add log entry].</param>
            <param name="throwMagicPuff">if set to <c>true</c> [throw magic puff].</param>
            <param name="memoryIgnoresLimit">if set to <c>true</c> [memory ignores limit].</param>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AncillaryMutationEffects.Default">
            <summary>
                Gets the default value for the ancillary effects
            </summary>
            <value>
                The default.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AncillaryMutationEffects.None">
            <summary>
                instance representing no effects
            </summary>
            <value>
                The none.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AncillaryMutationEffects.AddTale">
            <summary>
                Gets a value indicating whether the  tale should be added.
            </summary>
            <value>
                <c>true</c> if the tale should be added; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AncillaryMutationEffects.AddMemory">
            <summary>
                Gets a value indicating whether the memory should be added.
            </summary>
            <value>
                <c>true</c> if the memory should be added; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AncillaryMutationEffects.AddLogEntry">
            <summary>
                Gets a value indicating whether the log entry should be added log.
            </summary>
            <value>
                <c>true</c> if [add log entry]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AncillaryMutationEffects.ThrowMagicPuff">
            <summary>
                Gets a value indicating whether throw magic puff.
            </summary>
            <value>
                <c>true</c> if magic puffs should be thrown; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.MutationUtilities.AncillaryMutationEffects.MemoryIgnoresLimit">
            <summary>
            Gets a value indicating whether the mutation memory should ignore the mod setting's max mutation thought limit 
            </summary>
            <value>
              <c>true</c> if [memory ignores limit]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.MutationUtilities.AncillaryMutationEffects.ToString">
            <summary>Returns the fully qualified type name of this instance.</summary>
            <returns>A <see cref="T:System.String" /> containing a fully qualified type name.</returns>
        </member>
        <member name="T:Pawnmorph.PawnmorpherMod">
            <summary>
            the mod class
            </summary>
            <seealso cref="T:Verse.Mod" />
        </member>
        <member name="M:Pawnmorph.PawnmorpherMod.#ctor(Verse.ModContentPack)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.PawnmorpherMod"/> class.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:Pawnmorph.PawnmorpherMod.WriteSettings">
            <summary>Writes the settings.</summary>
        </member>
        <member name="M:Pawnmorph.PawnmorpherMod.DoSettingsWindowContents(UnityEngine.Rect)">
            <param name="inRect"> A Unity Rect with the size of the settings window. </param>
        </member>
        <member name="M:Pawnmorph.PawnmorpherMod.SettingsCategory">
            <summary>
            Override SettingsCategory to show up in the list of settings. <br />
            Using .Translate() is optional, but does allow for localisation.
            </summary>
            <returns> The (translated) mod name. </returns>
        </member>
        <member name="T:Pawnmorph.PawnmorpherModInit">
            <summary>
            static class for initializing the mod 
            </summary>
        </member>
        <member name="M:Pawnmorph.PawnmorpherModInit.NotifySettingsChanged">
            <summary>called when the settings are changed</summary>
        </member>
        <member name="T:Pawnmorph.PawnmorphMPCompat">
            <summary>
            static class for initializing the mp compatibility 
            </summary>
        </member>
        <member name="M:Pawnmorph.PawnmorphPatches.FoodModifierComparer.Compare(Pawnmorph.Thoughts.IFoodThoughtModifier,Pawnmorph.Thoughts.IFoodThoughtModifier)">
            <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <returns>Value Condition Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero<paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than <paramref name="y" />.</returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="T:Pawnmorph.PawnRelationWorker_ExMerged">
            <summary>
            the relationship worker for the "ExMerged" relationship 
            </summary>
            <seealso cref="T:RimWorld.PawnRelationWorker" />
        </member>
        <member name="F:Pawnmorph.PawnRelationWorker_ExMerged.MergeMate">
            <summary>The merge mate relationship def</summary>
        </member>
        <member name="M:Pawnmorph.PawnRelationWorker_ExMerged.GenerationChance(Verse.Pawn,Verse.Pawn,Verse.PawnGenerationRequest)">
            <summary>the chance for two pawns to be given this relationship</summary>
            <param name="generated">The generated.</param>
            <param name="other">The other.</param>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.PawnRelationWorker_ExMerged.CreateRelation(Verse.Pawn,Verse.Pawn,Verse.PawnGenerationRequest@)">
            <summary>Creates the relationship between the 2 given pawns</summary>
            <param name="generated">The generated.</param>
            <param name="other">The other.</param>
            <param name="request">The request.</param>
        </member>
        <member name="T:Pawnmorph.PawnRelationWorker_MergeMate">
            <summary>
            relationship worker fo the MergeMate relationship 
            </summary>
            <seealso cref="T:RimWorld.PawnRelationWorker" />
        </member>
        <member name="F:Pawnmorph.PawnRelationWorker_MergeMate.MergeMate">
            <summary>The merge mate def</summary>
        </member>
        <member name="M:Pawnmorph.PawnRelationWorker_MergeMate.GenerationChance(Verse.Pawn,Verse.Pawn,Verse.PawnGenerationRequest)">
            <summary>Get the chance for 2 pawns to be given this relationship</summary>
            <param name="generated">The generated.</param>
            <param name="other">The other.</param>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.PawnRelationWorker_MergeMate.CreateRelation(Verse.Pawn,Verse.Pawn,Verse.PawnGenerationRequest@)">
            <summary>Creates the relationship between the two given pawns</summary>
            <param name="generated">The generated.</param>
            <param name="other">The other.</param>
            <param name="request">The request.</param>
        </member>
        <member name="T:Pawnmorph.PMIncidentDefOf">
            <summary> Static container for incident defs. </summary>
        </member>
        <member name="T:Pawnmorph.PMJobDefOf">
            <summary> Static container for commonly referenced job defs. </summary>
        </member>
        <member name="F:Pawnmorph.PMRulePackDefOf.MutationTaleRulePack">
            <summary> Default rule pack used for generating mutation log entries. </summary>
        </member>
        <member name="F:Pawnmorph.PMRulePackDefOf.MutationRulePackTaleless">
            <summary>
                Rule pack used when there is no mutation tale
            </summary>
        </member>
        <member name="T:Pawnmorph.PMThingDefOf">
            <summary> Static container for commonly referenced thing defs. </summary>
        </member>
        <member name="T:Pawnmorph.PMThoughtDefOf">
            <summary> DefOf class for commonly referenced ThoughtDefs. </summary>
        </member>
        <member name="F:Pawnmorph.PMThoughtDefOf.DefaultMorphRevertsToHuman">
            <summary> Default thought for pawns that were a morph that reverts back to a human. </summary>
        </member>
        <member name="F:Pawnmorph.PMThoughtDefOf.FormerHumanTameThought">
            <summary>
            The former human taming success thought
            </summary>
        </member>
        <member name="F:Pawnmorph.PMThoughtDefOf.SapientAnimalSleptOnGround">
            <summary>
            default thought for when a sapient animal sleeps on the ground 
            </summary>
        </member>
        <member name="F:Pawnmorph.PMThoughtDefOf.SapientAnimalMilked">
            <summary>
            default thought for when a sapient animal is milked 
            </summary>
        </member>
        <member name="F:Pawnmorph.PMThoughtDefOf.SapientAnimalHuntingMemory">
            <summary>
            The sapient animal hunting memory
            </summary>
            this is for hunting out of necessity not for the hunting mental break 
        </member>
        <member name="F:Pawnmorph.PMThoughtDefOf.SapientAnimalHuntingMemoryPrimalWish">
            <summary>
            The sapient animal hunting memory primal wish
            </summary>
            this is for hunting out of necessity not for the hunting mental break but for primal wish pawns only 
        </member>
        <member name="F:Pawnmorph.PMThoughtDefOf.FHDefaultCannibalThought_Direct">
            <summary>
            The default thought for former humans that have bad thoughts for eating meat of the same species they are 
            </summary>
        </member>
        <member name="F:Pawnmorph.PMThoughtDefOf.FHDefaultCannibalThought_Ingredient">
            <summary>
            The fh default cannibal thought ingredient
            </summary>
        </member>
        <member name="T:Pawnmorph.PMTraitDefOf">
            <summary> Static class containing references to commonly used Traits. </summary>
        </member>
        <member name="T:Pawnmorph.PMUtilities">
            <summary>
            a collection of general Pawnmorpher related utilities 
            </summary>
        </member>
        <member name="M:Pawnmorph.PMUtilities.GetSettings">
            <summary>Gets the mod settings.</summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.PMUtilities.IsLoadingOrSpawning(Verse.Pawn)">
            <summary>
            Determines whether this pawn is loading or spawning.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this pawn is loading or spawning ; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Pawnmorph.RaceMutationSettingsExtension">
            <summary> Extension used to blacklist a race from one or more mutagen strains. </summary>
        </member>
        <member name="F:Pawnmorph.RaceMutationSettingsExtension.immuneToAll">
            <summary>if to make this race immune to all mutations</summary>
        </member>
        <member name="T:Pawnmorph.TaleDefOf">
            <summary> Static container containing misc tales. </summary>
        </member>
        <member name="T:Pawnmorph.TFGender">
            <summary>
            the tf gender switch options 
            </summary>
        </member>
        <member name="F:Pawnmorph.TFGender.None">
            <summary>no explicit option set</summary>
        </member>
        <member name="F:Pawnmorph.TFGender.Male">
            <summary>always set the animal gender to male</summary>
        </member>
        <member name="F:Pawnmorph.TFGender.Female">
            <summary>always set the animal gender to female</summary>
        </member>
        <member name="F:Pawnmorph.TFGender.Switch">
            <summary>make the animal's gender the opposite of the pawn's</summary>
        </member>
        <member name="F:Pawnmorph.TFGender.Original">
            <summary>make the animal's gender the same as the pawn's</summary>
        </member>
        <member name="T:Pawnmorph.HediffGiver_PermanentFeral">
            <summary>
            hediff giver that gives the permanently feral hediff 
            </summary>
            <seealso cref="T:Verse.HediffGiver" />
        </member>
        <member name="F:Pawnmorph.HediffGiver_PermanentFeral.mtbDays">
            <summary>
            The mean time between days
            </summary>
        </member>
        <member name="M:Pawnmorph.HediffGiver_PermanentFeral.OnIntervalPassed(Verse.Pawn,Verse.Hediff)">
            <summary>
            Called when the interval passed
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
        </member>
        <member name="T:Pawnmorph.HediffGiver_TF">
            <summary>
            hediff giver that tries to transform a pawn
            </summary>
            <seealso cref="T:Verse.HediffGiver" />
        </member>
        <member name="M:Pawnmorph.HediffGiver_TF.ConfigErrors">
            <summary>
            Gets all Configuration errors in this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Pawnmorph.HediffGiver_TF.pawnkinds">
            The pawnKind of the animal to be transformed into.
        </member>
        <member name="F:Pawnmorph.HediffGiver_TF.tale">
            Tale to add to the tales.
        </member>
        <member name="F:Pawnmorph.HediffGiver_TF.forceGender">
            The gender that will be forced (i.e. a ChookMorph will be forced female).
        </member>
        <member name="F:Pawnmorph.HediffGiver_TF.forceGenderChance">
            If forceGender is provided, this is the chance the gender will be forced.
        </member>
        <member name="M:Pawnmorph.HediffGiver_TF.Pawnmorph#IPawnTransformer#TryTransform(Verse.Pawn,Verse.Hediff)">
            <summary>Tries to transform the pawn</summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.HediffGiver_TF.TransformPawn(Verse.Pawn,Verse.Hediff)">
            <summary>Transforms the pawn.</summary>
            <param name="pawn">The pawn.</param>
            <param name="cause">The cause.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.IncidentWorker_ChaomorphPasses">
            <summary>
            the incident worker for chaomorph pass incident 
            </summary>
            <seealso cref="T:RimWorld.IncidentWorker" />
        </member>
        <member name="M:Pawnmorph.IncidentWorker_ChaomorphPasses.CanFireNowSub(RimWorld.IncidentParms)">
            <summary>
            Determines whether this instance can fire now with the given params.
            </summary>
            <param name="parms">The parms.</param>
            <returns>
              <c>true</c> if this instance can fire now with the specified parms; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.IncidentWorker_ChaomorphPasses.TryExecuteWorker(RimWorld.IncidentParms)">
            <summary>Tries the execute the incident.</summary>
            <param name="parms">The parms.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.CompProperties_FormerHumanChance">
            <summary>
            properties for the former human chance prop 
            </summary>
            <seealso cref="T:Verse.CompProperties" />
        </member>
        <member name="P:Pawnmorph.CompProperties_FormerHumanChance.Chance">
            <summary>
            Gets the chance to add the former human hediff.
            </summary>
            <value>
            The chance.
            </value>
        </member>
        <member name="M:Pawnmorph.CompProperties_FormerHumanChance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.CompProperties_FormerHumanChance"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.CompFormerHumanChance">
            <summary>
                comp for adding the former human hediff with a percent chance when this thing spawns
            </summary>
        </member>
        <member name="P:Pawnmorph.CompFormerHumanChance.Props">
            <summary>
                the properties for this comp
            </summary>
        </member>
        <member name="M:Pawnmorph.CompFormerHumanChance.PostSpawnSetup(System.Boolean)">
            <summary>
            called after the parent thing is spawned
            </summary>
            <param name="respawningAfterLoad">if set to <c>true</c> [respawning after load].</param>
        </member>
        <member name="M:Pawnmorph.CompFormerHumanChance.CompTick">
            <summary>
            called every tick 
            </summary>
        </member>
        <member name="M:Pawnmorph.CompFormerHumanChance.PostExposeData">
            <summary>
                called to save/load data
            </summary>
        </member>
        <member name="M:Pawnmorph.CompFormerHumanChance.OnRecoveredFromMentalState(Verse.AI.MentalState)">
            <summary>
            Called when the pawn recovered from the given mental state.
            </summary>
            <param name="mentalState">State of the mental.</param>
        </member>
        <member name="T:Pawnmorph.CompAlwaysFormerHuman">
            <summary>
                comp for ensuring the parent always spawns with the former human hediff
            </summary>
        </member>
        <member name="M:Pawnmorph.CompAlwaysFormerHuman.CompTick">
            <summary>
                called every tick
            </summary>
        </member>
        <member name="M:Pawnmorph.CompAlwaysFormerHuman.PostExposeData">
            <summary>
                Posts the expose data.
            </summary>
        </member>
        <member name="M:Pawnmorph.CompAlwaysFormerHuman.PostSpawnSetup(System.Boolean)">
            <summary>
                called after the parent thing is spawned
            </summary>
            <param name="respawningAfterLoad">if set to <c>true</c> [respawning after load].</param>
        </member>
        <member name="M:Pawnmorph.CompAlwaysFormerHuman.OnRecoveredFromMentalState(Verse.AI.MentalState)">
            <summary>
            Called when the pawn recovered from the given mental state.
            </summary>
            <param name="mentalState">State of the mental.</param>
        </member>
        <member name="T:Pawnmorph.HediffCompProperties_AddSeverity">
            <summary>
            comp property for the hediff comp add severity 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_AddSeverity.hediff">
            <summary>
            the hediff 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_AddSeverity.severity">
            <summary>
            the amount of severity to add 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_AddSeverity.mtbDays">
            <summary>
            how often to add the severity 
            </summary>
        </member>
        <member name="M:Pawnmorph.HediffCompProperties_AddSeverity.#ctor">
            <summary>
            create a new instance of this type 
            </summary>
        </member>
        <member name="T:Pawnmorph.CompProperties_AlwaysFormerHuman">
            <summary>
            properties for the always former human comp 
            </summary>
        </member>
        <member name="F:Pawnmorph.CompProperties_AlwaysFormerHuman.hediff">
            <summary>
            the former human hediff 
            </summary>
        </member>
        <member name="M:Pawnmorph.CompProperties_AlwaysFormerHuman.#ctor">
            <summary>
            create a new instance of this class 
            </summary>
        </member>
        <member name="T:Pawnmorph.HediffCompProperties_Production">
            <summary>
            comp properties for the hediff comp production 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.daysToProduce">
            <summary>
            how many days it takes to produce 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.amount">
            <summary>
            the amount of resources to produce 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.chance">
            <summary>
            chance to produce rare resources instead of regular resources 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.thought">
            <summary>
            the default thought to add when producing resources
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.wrongGenderThought">
            <summary>
            the thought to add when the pawn's gender matches the <see cref="F:Pawnmorph.HediffCompProperties_Production.genderAversion"/>
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.etherBondThought">
            <summary>
            the thought to add when the pawn is ether bonded 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.etherBrokenThought">
            <summary>
                the thought to add when the pawn is ether broken 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.genderAversion">
            <summary>
            if the pawns gender matches this, the pawn is considered 'gender adverse' to producing 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.resource">
            <summary>
            the defName of the resource to produce
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.rareResource">
            <summary>
            the defName of the rare resource to produce
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.stages">
            <summary>
            the stages the comp can go through 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Production.jobGiver">
            <summary>
            the job giver to use to make the pawn produce, if null the products will just be spawned in 
            </summary>
        </member>
        <member name="P:Pawnmorph.HediffCompProperties_Production.JobGiver">
            <summary>
            Gets the cached job giver.
            </summary>
            <value>
            The job giver.
            </value>
        </member>
        <member name="M:Pawnmorph.HediffCompProperties_Production.ConfigErrors(Verse.HediffDef)">
            <summary>
            get all configuration errors with this instance 
            </summary>
            <param name="parentDef"></param>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.HediffCompProperties_Production.Resource">
            <summary>
            the resource to produce
            </summary>
        </member>
        <member name="P:Pawnmorph.HediffCompProperties_Production.RareResource">
            <summary>
            the rare resource to produce 
            </summary>
        </member>
        <member name="M:Pawnmorph.HediffCompProperties_Production.#ctor">
            <summary>
            create a new instance of this type 
            </summary>
        </member>
        <member name="T:Pawnmorph.HediffCompProperties_Remove">
            <summary>Properties for the remove hediff comp </summary>
            <seealso cref="T:Verse.HediffCompProperties" />
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Remove.makeImmuneTo">
            <summary>
            a list of hediffs to remove and make the pawn immune to 
            </summary>
        </member>
        <member name="M:Pawnmorph.HediffCompProperties_Remove.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.HediffCompProperties_Remove"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.HediffCompProperties_Single">
            <summary>
            properties for the hediff comp single
            </summary>
            <seealso cref="T:Verse.HediffCompProperties" />
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Single.maxStacks">
            <summary>
            the maximum times the parent hediff can 'stack'
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_Single.mutationRateMultiplier">
            <summary>
            The mutation rate multiplier
            </summary>
        </member>
        <member name="M:Pawnmorph.HediffCompProperties_Single.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.HediffCompProperties_Single"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.HediffCompProperties_TerrainBasedMorph">
            <summary>Properties for the terrain based morph hediff comp <see cref="T:Pawnmorph.HediffComp_TerrainBasedMorph"/></summary>
            <seealso cref="T:Verse.HediffCompProperties" />
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_TerrainBasedMorph.hediffDef">
            <summary>The hediffDef to add when over the specified terrain </summary>
        </member>
        <member name="F:Pawnmorph.HediffCompProperties_TerrainBasedMorph.terrain">
            <summary>The terrain that triggers adding the given hediff</summary>
        </member>
        <member name="M:Pawnmorph.HediffCompProperties_TerrainBasedMorph.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.HediffCompProperties_TerrainBasedMorph"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.HediffComp_AddSeverity">
            <summary>
            hediff comp for adding severity to the parent hediff 
            </summary>
            <seealso cref="T:Verse.HediffComp" />
        </member>
        <member name="P:Pawnmorph.HediffComp_AddSeverity.Props">
            <summary>Gets the properties.</summary>
            <value>The properties.</value>
        </member>
        <member name="M:Pawnmorph.HediffComp_AddSeverity.CompPostTick(System.Single@)">
            <summary>called after the parent is updated</summary>
            <param name="severityAdjustment">The severity adjustment.</param>
        </member>
        <member name="M:Pawnmorph.HediffComp_AddSeverity.AddSeverity">
            <summary>Adds the severity.</summary>
        </member>
        <member name="T:Pawnmorph.HediffComp_Production">
            <summary>
            hediff comp for producing resources over time 
            </summary>
            <seealso cref="T:Verse.HediffComp" />
        </member>
        <member name="F:Pawnmorph.HediffComp_Production.HatchingTicker">
            <summary>The hatching ticker</summary>
        </member>
        <member name="F:Pawnmorph.HediffComp_Production.totalProduced">
            <summary>The total amount produced by this pawn</summary>
        </member>
        <member name="P:Pawnmorph.HediffComp_Production.Props">
            <summary>Gets the properties of this comp</summary>
            <value>The props.</value>
        </member>
        <member name="M:Pawnmorph.HediffComp_Production.CompPostTick(System.Single@)">
            <summary>called every tick after it's parent is updated</summary>
            <param name="severityAdjustment">The severity adjustment.</param>
        </member>
        <member name="M:Pawnmorph.HediffComp_Production.CompExposeData">
            <summary>exposes the data of this comp. Called after it's parent ExposeData is called</summary>
        </member>
        <member name="P:Pawnmorph.HediffComp_Production.CanProduce">
            <summary>
            Gets a value indicating whether this instance can produce.
            </summary>
            <value>
              <c>true</c> if this instance can produce; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.HediffComp_Production.Produce">
            <summary> Spawns in the products at the parent's current location. </summary>
        </member>
        <member name="T:Pawnmorph.HediffComp_Remove">
            <summary>
            hediff comp that removes other hediffs 
            </summary>
            <seealso cref="T:Verse.HediffComp" />
        </member>
        <member name="P:Pawnmorph.HediffComp_Remove.Props">
            <summary>Gets the properties.</summary>
            <value>The properties.</value>
        </member>
        <member name="M:Pawnmorph.HediffComp_Remove.CompPostTick(System.Single@)">
            <summary>called every tick after it's parent is updated .</summary>
            <param name="severityAdjustment">The severity adjustment.</param>
        </member>
        <member name="T:Pawnmorph.HediffComp_Single">
            <summary>
            hediff comp to add a single mutation then remove the parent hediff 
            </summary>
            <seealso cref="T:Verse.HediffComp" />
        </member>
        <member name="F:Pawnmorph.HediffComp_Single.stacks">
            <summary>The stacks</summary>
        </member>
        <member name="M:Pawnmorph.HediffComp_Single.CompExposeData">
            <summary>called to expose the data in this comp</summary>
        </member>
        <member name="M:Pawnmorph.HediffComp_Single.CompPostMerged(Verse.Hediff)">
            <summary>called after the parent is merged with the other hediff</summary>
            <param name="other">The other.</param>
        </member>
        <member name="P:Pawnmorph.HediffComp_Single.Props">
            <summary>Gets the properties.</summary>
            <value>The properties.</value>
        </member>
        <member name="T:Pawnmorph.HediffComp_TerrainBasedMorph">
            <summary>
            hediff comp for adding a hediff when over specific terrain 
            </summary>
            <seealso cref="T:Verse.HediffComp" />
        </member>
        <member name="P:Pawnmorph.HediffComp_TerrainBasedMorph.Props">
            <summary>Gets the properties.</summary>
            <value>The properties.</value>
        </member>
        <member name="M:Pawnmorph.HediffComp_TerrainBasedMorph.CompPostTick(System.Single@)">
            <summary>called after the parent is updated</summary>
            <param name="severityAdjustment">The severity adjustment.</param>
        </member>
        <member name="T:Pawnmorph.InteractionWorker_Moo">
            <summary>
            interaction worker for the moo interaction 
            </summary>
            <seealso cref="T:RimWorld.InteractionWorker" />
        </member>
        <member name="M:Pawnmorph.InteractionWorker_Moo.RandomSelectionWeight(Verse.Pawn,Verse.Pawn)">
            <summary>gets the random selection weight.</summary>
            <param name="initiator">The initiator.</param>
            <param name="recipient">The recipient.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Building_MutagenChamber.NotifyMerging(System.Boolean)">
            <summary>
            Notifies this instance that it is merging 
            </summary>
            <param name="isMasterChamber">if set to <c>true</c> this instance is the master chamber.</param>
        </member>
        <member name="P:Pawnmorph.Building_MutagenModulator.Chambers">
            <summary>
            Gets the chambers.
            </summary>
            This property makes a new list every time it's called! be careful calling it 
            <value>
            The chambers.
            </value>
        </member>
        <member name="M:Pawnmorph.Building_MutagenModulator.GetLinkedChamber(System.Int32)">
            <summary>
                Gets the nth linked chamber.
            </summary>
            <param name="index">The index of the chamber to get</param>
            <returns>the nth linked chamber, if one exists. Null otherwise </returns>
        </member>
        <member name="M:Pawnmorph.Building_MutagenModulator.GetLastChamber">
            <summary>
            Gets the last chamber if any are linked 
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.CompProperties_MutagenicRadius">
            <summary>
            comp properties for mutagenic radius comp 
            </summary>
            <seealso cref="T:Verse.CompProperties" />
        </member>
        <member name="F:Pawnmorph.CompProperties_MutagenicRadius.radiusPerDayCurve">
            <summary>
            The radius per day curve
            </summary>
        </member>
        <member name="F:Pawnmorph.CompProperties_MutagenicRadius.hediff">
            <summary>
            The hediff to add 
            </summary>
        </member>
        <member name="F:Pawnmorph.CompProperties_MutagenicRadius.harmFrequencyPerArea">
            <summary>
            The harm frequency per area
            </summary>
        </member>
        <member name="M:Pawnmorph.CompProperties_MutagenicRadius.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.CompProperties_MutagenicRadius"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.IngestionOutcomeDoer_GiveHediffRandom">
            <summary>
            ingestion outcome doer that adds a random hediff 
            </summary>
            <seealso cref="T:Pawnmorph.IngestionOutcomeDoer_MultipleTfBase" />
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffRandom.severity">
            <summary>The severity</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffRandom.toleranceChemical">
            <summary>The tolerance chemical</summary>
        </member>
        <member name="F:Pawnmorph.IngestionOutcomeDoer_GiveHediffRandom.divideByBodySize">
            <summary>The divide by body size</summary>
        </member>
        <member name="M:Pawnmorph.IngestionOutcomeDoer_GiveHediffRandom.DoIngestionOutcomeSpecial(Verse.Pawn,Verse.Thing)">
            <summary>Does the ingestion outcome special.</summary>
            <param name="pawn">The pawn.</param>
            <param name="ingested">The ingested.</param>
        </member>
        <member name="T:Pawnmorph.PawnmorphHediffGiverUtility">
            <summary>
            collection of utilities around hediff givers
            </summary>
        </member>
        <member name="M:Pawnmorph.PawnmorphHediffGiverUtility.TryApply(Verse.Pawn,Verse.HediffDef,System.Collections.Generic.List{Verse.BodyPartDef},System.Boolean,System.Int32,System.Collections.Generic.List{Verse.Hediff})">
            <summary>Tries to apply the given hediff to the given pawn</summary>
            <param name="pawn">The pawn.</param>
            <param name="hediff">The hediff.</param>
            <param name="partsToAffect">The parts to affect.</param>
            <param name="canAffectAnyLivePart">if set to <c>true</c> [can affect any live part].</param>
            <param name="countToAffect">The count to affect.</param>
            <param name="outAddedHediffs">The out added hediffs.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Hediff_AddedMutation">
            <summary>
            hediff representing a mutation 
            </summary>
            <seealso cref="T:Verse.HediffWithComps" />
        </member>
        <member name="P:Pawnmorph.Hediff_AddedMutation.Def">
            <summary>
            Gets the definition.
            </summary>
            <value>
            The definition.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.Blocks(Pawnmorph.Hediffs.MutationDef,Verse.BodyPartRecord)">
            <summary>
            checks if this mutation blocks the addition of a new mutation at the given part
            </summary>
            <param name="otherMutation">The other mutation.</param>
            <param name="addPart">The add part.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">otherMutation</exception>
        </member>
        <member name="P:Pawnmorph.Hediff_AddedMutation.Influence">
            <summary>
            Gets the influence this mutation confers 
            </summary>
            <value>
            The influence.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediff_AddedMutation.LabelBase">
            <summary>
            Gets the base label .
            </summary>
            <value>
            The base label .
            </value>
        </member>
        <member name="P:Pawnmorph.Hediff_AddedMutation.Description">
            <summary>
            Gets the description.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="F:Pawnmorph.Hediff_AddedMutation.mutationDescription">
            <summary>
            The mutation description
            </summary>
        </member>
        <member name="F:Pawnmorph.Hediff_AddedMutation.shouldRemove">
            <summary>
            if this part should be removed or not
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.MarkForRemoval">
            <summary>
            Marks this mutation for removal.
            </summary>
        </member>
        <member name="P:Pawnmorph.Hediff_AddedMutation.ShouldRemove">
            <summary>
            Gets a value indicating whether should be removed.
            </summary>
            <value><c>true</c> if should be removed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Pawnmorph.Hediff_AddedMutation.TipStringExtra">
            <summary>Gets the extra tip string .</summary>
            <value>The extra tip string .</value>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.CreateDescription(System.Text.StringBuilder)">
            <summary>Creates the description.</summary>
            <param name="builder">The builder.</param>
        </member>
        <member name="P:Pawnmorph.Hediff_AddedMutation.IsCoreMutation">
            <summary>
            Gets a value indicating whether this instance is a core mutation.
            </summary>
            <value>
              <c>true</c> if this instance is a core mutation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.Hediff_AddedMutation.SeverityAdjust">
            <summary>
            Gets the severity adjust comp 
            </summary>
            <value>
            The severity adjust comp
            </value>
        </member>
        <member name="P:Pawnmorph.Hediff_AddedMutation.ProgressionHalted">
            <summary>
                Gets or sets a value indicating whether progression is halted or not.
            </summary>
            <value>
                <c>true</c> if progression halted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.Tick">
            <summary>
            called every tick 
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.OnStageChanges">
            <summary>
            Called when the hediff stage changes.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.PostAdd(System.Nullable{Verse.DamageInfo})">
            <summary>called after this instance is added to the pawn.</summary>
            <param name="dinfo">The dinfo.</param>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.PostTick">
            <summary>
            Posts the tick.
            </summary>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.PostRemoved">
            <summary>called after this instance is removed from the pawn</summary>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.ExposeData">
            <summary>Exposes the data.</summary>
        </member>
        <member name="M:Pawnmorph.Hediff_AddedMutation.ResumeAdaption">
            <summary>
            Restarts the adaption progression for this mutation if halted, does nothing if the part is fully adapted or not halted 
            </summary>
        </member>
        <member name="T:Pawnmorph.IntermittentMagicSprayer">
            <summary>
            class for making magic sprays 
            </summary>
        </member>
        <member name="F:Pawnmorph.IntermittentMagicSprayer.startSprayCallback">
            <summary>
            The start spray callback
            </summary>
        </member>
        <member name="F:Pawnmorph.IntermittentMagicSprayer.endSprayCallback">
            <summary>The end spray callback</summary>
        </member>
        <member name="F:Pawnmorph.IntermittentMagicSprayer.Mote_MagicPuff">
            <summary>The magic puff mote</summary>
        </member>
        <member name="M:Pawnmorph.IntermittentMagicSprayer.#ctor(Verse.Thing)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.IntermittentMagicSprayer"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Pawnmorph.IntermittentMagicSprayer.ThrowMagicPuffUp(UnityEngine.Vector3,Verse.Map)">
            <summary>Throws the magic puff up.</summary>
            <param name="loc">The loc.</param>
            <param name="map">The map.</param>
        </member>
        <member name="M:Pawnmorph.IntermittentMagicSprayer.ThrowMagicPuffDown(UnityEngine.Vector3,Verse.Map)">
            <summary>Throws the magic puff down.</summary>
            <param name="loc">The loc.</param>
            <param name="map">The map.</param>
        </member>
        <member name="M:Pawnmorph.IntermittentMagicSprayer.SteamSprayerTick">
            <summary>called every tick </summary>
        </member>
        <member name="T:Pawnmorph.PawnmorpherSettings">
            <summary>
            the mod settings 
            </summary>
            <seealso cref="T:Verse.ModSettings" />
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.enableMutagenShipPart">
            <summary>
            if the mutagen ship part should be enabled 
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.enableMutagenDiseases">
            <summary>
            if mutagenic diseases are enabled 
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.enableMutagenMeteor">
            <summary>
            if mutanite meteors are enabled 
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.enableWildFormers">
            <summary>if wild former humans are enabled</summary>
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.enableFallout">
            <summary>if mutagenic fallout is enabled</summary>
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.transformChance">
            <summary>the chance for a transforming pawn to turn into an animal</summary>
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.formerChance">
            <summary>the chance for new animals to be former humans</summary>
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.partialChance">
            <summary>The partial chance</summary>
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.maxMutationThoughts">
            <summary>
            The maximum mutation thoughts that can be active at once 
            </summary>
        </member>
        <member name="F:Pawnmorph.PawnmorpherSettings.logLevel">
            <summary>
            The current log level
            </summary>
        </member>
        <member name="M:Pawnmorph.PawnmorpherSettings.ExposeData">
            <summary> The part that writes our settings to file. Note that saving is by ref. </summary>
        </member>
        <member name="T:Pawnmorph.StockGenerator_MorphSlaves">
            <summary>
            stock generator for morph traders 
            </summary>
            <seealso cref="T:RimWorld.StockGenerator" />
        </member>
        <member name="M:Pawnmorph.StockGenerator_MorphSlaves.GenerateThings(System.Int32,RimWorld.Faction)">
            <summary>
            Generates the things.
            </summary>
            <param name="forTile">For tile.</param>
            <param name="forFaction">the faction this is being generated for</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.StockGenerator_MorphSlaves.HandlesThingDef(Verse.ThingDef)">
            <summary>
            checks if this generator handles the given thingDef
            </summary>
            <param name="thingDef">The thing definition.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.StockGenerator_Morphs">
            <summary>
            stock generator for morph traders 
            </summary>
            <seealso cref="T:RimWorld.StockGenerator" />
        </member>
        <member name="M:Pawnmorph.StockGenerator_Morphs.GenerateThingEnumer(System.Int32,RimWorld.Faction)">
            <summary>
            Generates the things for the given forTile.
            </summary>
            <param name="forTile">For tile.</param>
            <param name="forFaction">For faction.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.StockGenerator_Morphs.GenerateThings(System.Int32,RimWorld.Faction)">
            <summary>
            Generates the things that can be sold
            </summary>
            <param name="forTile">For tile.</param>
            <param name="forFaction">For faction.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.StockGenerator_Morphs.HandlesThingDef(Verse.ThingDef)">
            <summary>checks if this generator handles the given thingDef.</summary>
            <param name="thingDef">The thing definition.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.StockGenerator_Morphs.LogAnimalChances">
            <summary>Logs the animal chances.</summary>
        </member>
        <member name="T:Pawnmorph.MutagenicStone">
            <summary>
            class for mutanite 
            </summary>
            <seealso cref="T:RimWorld.Mineable" />
        </member>
        <member name="M:Pawnmorph.MutagenicStone.TickRare">
            <summary>called every once and a while</summary>
        </member>
        <member name="T:Pawnmorph.PatchHealthCardUtilityDrawHediffRow">
            <summary> Draw an info icon for mutations with their descriptions in tooltip. </summary>
        </member>
        <member name="T:Pawnmorph.PawnmorphGameComp">
            <summary>
            the world comp for this mod 
            </summary>
            <seealso cref="T:RimWorld.Planet.WorldComponent" />
        </member>
        <member name="F:Pawnmorph.PawnmorphGameComp.taggedAnimals">
            <summary>all tagged animals</summary>
        </member>
        <member name="M:Pawnmorph.PawnmorphGameComp.#ctor(RimWorld.Planet.World)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.PawnmorphGameComp"/> class.
            </summary>
            <param name="world">The world.</param>
        </member>
        <member name="M:Pawnmorph.PawnmorphGameComp.FinalizeInit">
            <summary>
            called when the world is finishing initialization 
            </summary>
        </member>
        <member name="P:Pawnmorph.PawnmorphGameComp.TransformedPawns">
            <summary>Gets all transformed pawns.</summary>
            <value>The transformed pawns.</value>
        </member>
        <member name="M:Pawnmorph.PawnmorphGameComp.AddTransformedPawn(Pawnmorph.TfSys.TransformedPawn)">
            <summary>Adds the transformed pawn.</summary>
            <param name="tfPair">The tf pair.</param>
            <exception cref="T:System.ArgumentNullException">tfPair</exception>
        </member>
        <member name="M:Pawnmorph.PawnmorphGameComp.ExposeData">
            <summary>Exposes the data.</summary>
        </member>
        <member name="M:Pawnmorph.PawnmorphGameComp.ValidateTransformedPawns">
            <summary> Validates the transformed pawns. </summary>
        </member>
        <member name="M:Pawnmorph.PawnmorphGameComp.GetPawnStatus(Verse.Pawn)">
            <summary> Gets the pawn transformation status. </summary>
            <param name="p"> The pawn. </param>
            <returns> The pawn's current status or null. </returns>
        </member>
        <member name="M:Pawnmorph.PawnmorphGameComp.GetTransformedPawnContaining(Verse.Pawn)">
            <summary> Gets the transformed pawn containing the given pawn. </summary>
            <param name="pawn"> The pawn. </param>
            <returns> The TransformedPawn instance as well as the pawn's status to that instance. </returns>
        </member>
        <member name="M:Pawnmorph.PawnmorphGameComp.RemoveInstance(Pawnmorph.TfSys.TransformedPawn)">
            <summary> Removes the transformed instance from the list. </summary>
            <param name="tfPawn"> The tf pawn. </param>
        </member>
        <member name="M:Pawnmorph.PawnmorphGameComp.TagPawn(Verse.PawnKindDef)">
            <summary>add the given pawnkind to the mutagen chamber database</summary>
            <param name="pawnkind">The pawnkind.</param>
        </member>
        <member name="T:Pawnmorph.HediffComp_Staged">
            <summary>
            a stage for the production comp 
            </summary>
        </member>
        <member name="F:Pawnmorph.HediffComp_Staged.daysToProduce">
            <summary>The days to produce</summary>
        </member>
        <member name="F:Pawnmorph.HediffComp_Staged.amount">
            <summary>The amount to produce</summary>
        </member>
        <member name="F:Pawnmorph.HediffComp_Staged.resource">
            <summary>The resource to produce</summary>
        </member>
        <member name="F:Pawnmorph.HediffComp_Staged.chance">
            <summary>The chance for a rare resource to be produced instead of the regular resource </summary>
        </member>
        <member name="F:Pawnmorph.HediffComp_Staged.rareResource">
            <summary>The rare resource</summary>
        </member>
        <member name="F:Pawnmorph.HediffComp_Staged.thought">
            <summary>The thought to add when the resource is produced</summary>
        </member>
        <member name="P:Pawnmorph.HediffComp_Staged.Resource">
            <summary>Gets the resource.</summary>
            <value>The resource.</value>
        </member>
        <member name="P:Pawnmorph.HediffComp_Staged.RareResource">
            <summary>Gets the rare resource.</summary>
            <value>The rare resource.</value>
        </member>
        <member name="T:Pawnmorph.TfHediffDefOf">
            <summary> Collection of misc tf related HediffDefs. </summary>
        </member>
        <member name="T:Pawnmorph.TfRelationDefOf">
            <summary> Static class containing transformation related pawn relation defs. </summary>
        </member>
        <member name="T:Pawnmorph.TfSys.MergeMutagen">
            <summary>
                implementation of mutagen that merges 2 or more pawns into a single meld
            </summary>
            <seealso cref="T:Pawnmorph.TfSys.Mutagen`1" />
        </member>
        <member name="M:Pawnmorph.TfSys.MergeMutagen.CanRevertPawnImp(Pawnmorph.TfSys.MergedPawns)">
            <summary>
                Determines whether this instance can revert pawn the specified transformed pawn.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns>
                <c>true</c> if this instance can revert pawn  the specified transformed pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.MergeMutagen.IsValid(Pawnmorph.TfSys.TransformationRequest)">
            <summary>Returns true if the given request is valid.</summary>
            <param name="request">The request.</param>
            <returns>
            <c>true</c> if the specified request is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.MergeMutagen.CanTransform(Verse.Pawn)">
            <summary>
            Determines whether this instance can transform the specified pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this instance can transform the specified pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.MergeMutagen.TransformImpl(Pawnmorph.TfSys.TransformationRequest)">
            <summary>
            preform the requested transform 
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.MergeMutagen.TryRevertImpl(Pawnmorph.TfSys.MergedPawns)">
            <summary>
                Tries to revert the transformed pawn instance, implementation.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.MergeMutagen.TryRevert(Verse.Pawn)">
            <summary>
                Tries to revert the given pawn.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.TfSys.Mutagen">
            <summary>
            base class for all mutagen types 
            </summary>
        </member>
        <member name="P:Pawnmorph.TfSys.Mutagen.GameComp">
            <summary>Gets the game comp.</summary>
            <value>The game comp.</value>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.GetFactionResponsible(Verse.Pawn)">
            <summary>
            tries to infer the faction responsible for turning the original pawn into an animal 
            </summary>
            <param name="originalPawn">The original pawn.</param>
            <returns></returns>
        </member>
        <member name="F:Pawnmorph.TfSys.Mutagen.def">
            <summary>The definition</summary>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.ApplyApparelDamage(Verse.Pawn,Verse.ThingDef)">
            <summary>
            Applies the apparel damage to the given pawn
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="newRace">The new race.</param>
            <exception cref="T:System.ArgumentNullException">
            pawn
            or
            newRace
            </exception>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.Transform(Pawnmorph.TfSys.TransformationRequest)">
            <summary>
            Transforms the specified request and preforms all necessary cleanup after the transformation if successful 
            </summary>
            implementers should make sure to preform all necessary cleanup of the pawn post transformation  
            <param name="request">The request.</param>
            <returns>the transformed pawn instance to be added to the database, should return null if the request cannot be met</returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.CanInfect(Verse.Pawn)">
            <summary>
            Determines whether this instance can infect the specified pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this instance can infect the specified pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.HasAnyImmunizingHediffs(Verse.Pawn)">
            <summary>
            Determines whether the given pawn has any immunizing hediffs 
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if the given pawn has any immunizing hediffs; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.GiveTransformedPawnSapienceState(Verse.Pawn,System.Single)">
            <summary>
            gives the transformed pawn the correct sapience state for this mutagen 
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <param name="initialLevel">The initial level.</param>
            <exception cref="T:System.ArgumentNullException">transformedPawn</exception>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.GiveRevertedPawnSapienceState(Verse.Pawn,System.Single)">
            <summary>
            gives the reverted pawn the correct sapience state for this mutagen 
            </summary>
            <param name="revertedPawn">The reverted pawn.</param>
            <param name="initialLevel">The initial level.</param>
            <exception cref="T:System.ArgumentNullException">revertedPawn</exception>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.CanInfect(Verse.ThingDef)">
            <summary>
            Determines whether this instance can infect the specified race definition.
            </summary>
            <param name="raceDef">The race definition.</param>
            <returns>
              <c>true</c> if this instance can infect the specified race definition; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.CanTransform(System.Collections.Generic.IEnumerable{Verse.Pawn})">
            <summary>
            Determines whether this instance can transform the specified pawns.
            </summary>
            <param name="pawns">The pawns.</param>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.CanTransform(Verse.Pawn)">
            <summary>
            Determines whether this instance can transform the specified pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this instance can transform the specified pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.CanTransform(Verse.ThingDef)">
            <summary>
            Determines whether this instance can transform the specified race definition.
            </summary>
            <param name="raceDef">The race definition.</param>
            <returns>
              <c>true</c> if this instance can transform the specified race definition; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.TryRevert(Pawnmorph.TfSys.TransformedPawn)">
            <summary>
            Try to revert the given instance of the transformed.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.TryRevert(Verse.Pawn)">
            <summary>
            Tries to revert the given pawn.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.CanRevert(Pawnmorph.TfSys.TransformedPawn)">
            <summary>
            Determines whether this instance can revert the specified transformed pawn.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns>
              <c>true</c> if this instance can revert the specified transformed pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.ApplyPostTfEffects(Verse.Pawn,Verse.Pawn)">
            <summary>
            Applies the post tf effects.
            this should be called just before the original pawn is cleaned up 
            </summary>
            <param name="original">The original.</param>
            <param name="transformedPawn">The transformed pawn.</param>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen.GetSapienceLevel(Verse.Pawn,Verse.Pawn)">
            <summary>
            Gets the sapience level for the given original and transformed pawn
            </summary>
            <param name="original">The original.</param>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.TfSys.Mutagen`1">
            <summary>
            generic base class for all mutagens for convenience 
            </summary>
            <typeparam name="T">the type of TransformedPawn this type consumes</typeparam>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen`1.CanRevertPawnImp(`0)">
            <summary>
            Determines whether this instance can revert pawn the specified transformed pawn.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns>
              <c>true</c> if this instance can revert pawn  the specified transformed pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen`1.TransformImpl(Pawnmorph.TfSys.TransformationRequest)">
            <summary>
            preform the requested transform.
            </summary>
            implementers should make sure to preform any cleanup/hiding of the original pawns 
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen`1.IsValid(Pawnmorph.TfSys.TransformationRequest)">
            <summary>Returns true if the given request is valid.</summary>
            <param name="request">The request.</param>
            <returns>
              <c>true</c> if the specified request is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen`1.Transform(Pawnmorph.TfSys.TransformationRequest)">
            <summary>
            Transforms the specified request.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen`1.CanRevert(Pawnmorph.TfSys.TransformedPawn)">
            <summary>
            Determines whether this instance can revert the specified pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this instance can revert the specified pawn; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
            <exception cref="T:Pawnmorph.TfSys.InvalidTransformedPawnInstance">tfPawn instance of type {pawn.GetType().Name} can not be cast to {typeof(<typeparamref name="T"/>).Name}</exception>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen`1.TryRevert(Pawnmorph.TfSys.TransformedPawn)">
            <summary>
            Try to revert the given instance of the transformed.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.Mutagen`1.TryRevertImpl(`0)">
            <summary>
            Tries to revert the transformed pawn instance, implementation.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.TfSys.InvalidTransformedPawnInstance">
            <summary>
            exception thrown when an invalid TransformedPawn instance is encountered 
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Pawnmorph.TfSys.InvalidTransformedPawnInstance.#ctor">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class.</summary>
        </member>
        <member name="M:Pawnmorph.TfSys.InvalidTransformedPawnInstance.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
            <param name="message">The message that describes the error. </param>
        </member>
        <member name="M:Pawnmorph.TfSys.InvalidTransformedPawnInstance.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
        </member>
        <member name="M:Pawnmorph.TfSys.InvalidTransformedPawnInstance.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
        </member>
        <member name="T:Pawnmorph.TfSys.SimpleMechaniteMutagen">
            <summary>
                simple implementation of Mutagen that just transforms a single pawn into a single animal
            </summary>
            <seealso cref="T:Pawnmorph.TfSys.TransformedPawnSingle" />
        </member>
        <member name="M:Pawnmorph.TfSys.SimpleMechaniteMutagen.CanTransform(Verse.Pawn)">
            <summary>
                Determines whether this instance can transform the specified pawn.
            </summary>
            <param name="pawn">The pawns.</param>
        </member>
        <member name="M:Pawnmorph.TfSys.SimpleMechaniteMutagen.TryRevert(Verse.Pawn)">
            <summary>
                Tries to revert the given pawn.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.SimpleMechaniteMutagen.CanRevertPawnImp(Pawnmorph.TfSys.TransformedPawnSingle)">
            <summary>
                Determines whether this instance can revert pawn the specified transformed pawn.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns>
                <c>true</c> if this instance can revert pawn  the specified transformed pawn; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.SimpleMechaniteMutagen.IsValid(Pawnmorph.TfSys.TransformationRequest)">
            <summary>Returns true if the specified request is valid.</summary>
            <param name="request">The request.</param>
            <returns>
            <c>true</c> if the specified request is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Pawnmorph.TfSys.SimpleMechaniteMutagen.TransformImpl(Pawnmorph.TfSys.TransformationRequest)">
            <summary>
                preform the requested transform
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.SimpleMechaniteMutagen.ApplyPostTfEffects(Verse.Pawn,Verse.Pawn)">
            <summary>
            Applies the post tf effects.
            this should be called just before the original pawn is cleaned up 
            </summary>
            <param name="original">The original.</param>
            <param name="transformedPawn">The transformed pawn.</param>
        </member>
        <member name="M:Pawnmorph.TfSys.SimpleMechaniteMutagen.TryRevertImpl(Pawnmorph.TfSys.TransformedPawnSingle)">
            <summary>
                Tries to revert the transformed pawn instance, implementation.
            </summary>
            <param name="transformedPawn">The transformed pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.SimpleMechaniteMutagen.FixBondRelationship(Verse.Pawn,Verse.Pawn)">
            <summary>
            transfers or removes bond relationships from reverted animal to the original 
            </summary>
            <param name="original">The original.</param>
            <param name="revertedAnimal">The reverted animal.</param>
        </member>
        <member name="M:Pawnmorph.TfSys.SimpleMechaniteMutagen.AddReversionThought(Verse.Pawn)">
            <summary>
            add the correct reversion thought at the correct stage
            </summary>
            <param name="spawned">The spawned.</param>
        </member>
        <member name="T:Pawnmorph.TfSys.TransformationRequest">
            <summary>
            class representing the request to transform pawns 
            </summary>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformationRequest.IsValid">
            <summary>
            Returns true if this instance is valid.
            </summary>
            <value>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformationRequest.#ctor(Verse.PawnKindDef,Verse.Pawn,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.TfSys.TransformationRequest"/> struct.
            </summary>
            <param name="outputDef">The output definition.</param>
            <param name="original">The original.</param>
            <param name="maxSeverity">the maximum severity of the former human hediff</param>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformationRequest.#ctor(Verse.PawnKindDef,Verse.Pawn[])">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.TfSys.TransformationRequest"/> struct.
            </summary>
            <param name="outputDef">The output definition.</param>
            <param name="originals">The originals.</param>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.originals">
            <summary>The pawns to be transformed</summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.outputDef">
            <summary>The output pawn kind</summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.forcedGender">
            <summary>The forced gender option</summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.forcedGenderChance">
            <summary>
            if forcedGender is None, the chance to switch genders 
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.cause">
            <summary>The cause of the transformation</summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.tale">
            <summary>The tale to record</summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.forcedSapienceLevel">
            <summary>
            if not null then this represents the sapience level the tf'd pawn will have
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.noLetter">
            <summary>
            if true, no notification will be sent about the transformation
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.addMutationToOriginal">
            <summary>
            if true add mutation to original
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.factionResponsible">
            <summary>
            The faction responsible for this transformation 
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.forcedFaction">
            <summary>
            the faction to put the resultant pawn into 
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.minSeverity">
            <summary>
            The minimum severity of the former human hediff
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformationRequest.maxSeverity">
            <summary>
            The minimum severity of the former human hediff
            </summary>
        </member>
        <member name="T:Pawnmorph.TfSys.TransformedPawn">
            <summary>
                base class for storing a "transformed pawn" in such a way that the original can be retried
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformedPawn.mutagenDef">
            <summary>The mutagen definition</summary>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawn.FactionResponsible">
            <summary>
            Gets the faction that turned this pawn into an animal.
            </summary>
            <value>
            The faction responsible.
            </value>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawn.OriginalPawns">
            <summary>
                Gets the original pawns.
            </summary>
            <value>
                The original pawns.
            </value>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawn.TransformedPawns">
            <summary>
                Gets the transformed pawns.
            </summary>
            <value>
                The transformed pawns.
            </value>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawn.IsValid">
            <summary>
                Returns true if this instance is valid.
            </summary>
            <value>
                <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawn.CanRevert">
            <summary>
                Gets a value indicating whether this instance can be reverted.
            </summary>
            <value>
                <c>true</c> if this instance can be reverted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawn.OriginalsDebugString">
            <summary>Gets the originals debug string.</summary>
            <value>The originals debug string.</value>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawn.TransformedDebugString">
            <summary>Gets the transformed debug string.</summary>
            <value>The transformed debug string.</value>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawn.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawn.Create(Verse.Pawn,Verse.Pawn)">
            <summary>Creates a new transformed pawn instance out of the given original pawn and transformed pawn.</summary>
            for backwards compatibility with old saves, should not be used in new code
            <param name="original">The original.</param>
            <param name="transformed">The transformed.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawn.Create(System.Collections.Generic.IEnumerable{Verse.Pawn},Verse.Pawn)">
            <summary>Creates a new TransformedPawn instance out of the given original pawns and the specified transformed pawn</summary>
            for backwards compatibility with old saves, should not be used with new code
            <param name="originals">The originals.</param>
            <param name="transformed">The transformed.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawn.Create(Verse.Pawn,Verse.Pawn,Verse.Pawn)">
             <summary>Create a new TransformedPawn instance from the given original pawns and the transformed pawn</summary>
            for backwards compatibility with old saves, should not be used with new code
             <param name="original0">The original0.</param>
             <param name="original1">The original1.</param>
             <param name="meld">The meld.</param>
             <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawn.Create(Pawnmorph.PawnMorphInstance)">
            <summary>Creates the specified inst.</summary>
            for backwards compatibility with old saves, should not be used with new code
            <param name="inst">The inst.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawn.Create(Pawnmorph.PawnMorphInstanceMerged)">
            <summary>Creates the specified inst.</summary>
            for backwards compatibility with old saves, should not be used with new code
            <param name="inst">The inst.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawn.GetStatus(Verse.Pawn)">
            <summary>
                Gets the status of the given pawn with regards to this instance
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>if the pawn is the original pawn, transformed pawn, or null if neither</returns>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawn.ToDebugString">
            <summary>generates a debug string</summary>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawn.ExposeData">
            <summary>Exposes the data.</summary>
        </member>
        <member name="T:Pawnmorph.TfSys.TransformedPawnSingle">
            <summary>
                transformed pawn instance for a single original-animal pair
            </summary>
            <seealso cref="T:Pawnmorph.TfSys.TransformedPawn" />
        </member>
        <member name="F:Pawnmorph.TfSys.TransformedPawnSingle.original">
            <summary>The original pawn</summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformedPawnSingle.animal">
            <summary>The transformed pawn</summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformedPawnSingle.reactionStatus">
            <summary>
            The reaction status
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformedPawnSingle.factionResponsible">
            <summary>
            The faction responsible for turning this pawn into an animal 
            </summary>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawnSingle.FactionResponsible">
            <summary>
            Gets the faction that turned this pawn into an animal.
            </summary>
            <value>
            The faction responsible.
            </value>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawnSingle.OriginalPawns">
            <summary>Gets the original pawns.</summary>
            <value>The original pawns.</value>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawnSingle.TransformedPawns">
            <summary>Gets the transformed pawns.</summary>
            <value>The transformed pawns.</value>
        </member>
        <member name="P:Pawnmorph.TfSys.TransformedPawnSingle.CanRevert">
            <summary>
            Gets a value indicating whether this instance can be reverted.
            </summary>
            <value>
              <c>true</c> if this instance can be reverted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.TfSys.TransformedPawnSingle.ExposeData">
            <summary>Exposes the data.</summary>
        </member>
        <member name="T:Pawnmorph.TfSys.MergedPawns">
            <summary>
            TransformedPawn instance for merged pawns
            </summary>
            <seealso cref="T:Pawnmorph.TfSys.TransformedPawn" />
        </member>
        <member name="F:Pawnmorph.TfSys.MergedPawns.factionResponsible">
            <summary>
            The faction responsible for turning this pawn into an animal 
            </summary>
        </member>
        <member name="P:Pawnmorph.TfSys.MergedPawns.FactionResponsible">
            <summary>
            Gets the faction that turned this pawn into an animal.
            </summary>
            <value>
            The faction responsible.
            </value>
        </member>
        <member name="F:Pawnmorph.TfSys.MergedPawns.originals">
            <summary>The original pawns</summary>
        </member>
        <member name="F:Pawnmorph.TfSys.MergedPawns.meld">
            <summary>The resultant meld</summary>
        </member>
        <member name="P:Pawnmorph.TfSys.MergedPawns.OriginalPawns">
            <summary>Gets the original pawns.</summary>
            <value>The original pawns.</value>
        </member>
        <member name="P:Pawnmorph.TfSys.MergedPawns.TransformedPawns">
            <summary>Gets the transformed pawns.</summary>
            <value>The transformed pawns.</value>
        </member>
        <member name="P:Pawnmorph.TfSys.MergedPawns.CanRevert">
            <summary>
                Gets a value indicating whether this instance can be reverted.
            </summary>
            <value>
                <c>true</c> if this instance can be reverted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Pawnmorph.TfSys.MergedPawns.ExposeData">
            <summary>Exposes the data.</summary>
        </member>
        <member name="T:Pawnmorph.TfSys.TransformedStatus">
            <summary>
            the different transformation statuses a pawn can have 
            </summary>
        </member>
        <member name="F:Pawnmorph.TfSys.TransformedStatus.Original">
            the pawn is the original, untransformed pawn 
        </member>
        <member name="F:Pawnmorph.TfSys.TransformedStatus.Transformed">
            the pawn is the result of a transformed pawn 
        </member>
        <member name="T:Pawnmorph.ThingDef_TaggingBullet">
            <summary>
            thing def for tagging bullets 
            </summary>
            <seealso cref="T:Verse.ThingDef" />
        </member>
        <member name="T:Pawnmorph.ThinkNodes.ConditionalAnimalisticColonist">
            <summary>
                conditional think node for animalistic pawns in the player faction
            </summary>
            <seealso cref="T:Verse.AI.ThinkNode_Conditional" />
        </member>
        <member name="M:Pawnmorph.ThinkNodes.ConditionalAnimalisticColonist.Satisfied(Verse.Pawn)">
            <summary>
                checks if the specified pawn is valid for this node.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.ThinkNodes.ConditionalOfFormerHuman">
            <summary>
            think node that restricts things to former humans 
            </summary>
            <seealso cref="T:Verse.AI.ThinkNode_Conditional" />
        </member>
        <member name="F:Pawnmorph.ThinkNodes.ConditionalOfFormerHuman.filter">
            <summary>
            The sapience filter
            </summary>
        </member>
        <member name="M:Pawnmorph.ThinkNodes.ConditionalOfFormerHuman.Satisfied(Verse.Pawn)">
            <summary>
            checks if the condition is satisfied by the specified pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.ThinkNodes.ConditionalSapientAnimal">
            <summary>
                conditional think nodes for sapient animals
            </summary>
            <seealso cref="T:Verse.AI.ThinkNode_Conditional" />
        </member>
        <member name="F:Pawnmorph.ThinkNodes.ConditionalSapientAnimal.mustBeColonist">
            <summary>
                if the pawn must be a colonist to
            </summary>
        </member>
        <member name="F:Pawnmorph.ThinkNodes.ConditionalSapientAnimal.mustBeFullySapient">
            <summary>
             if true, the pawn must be a sapient or mostly sapient former human to qualify for this node 
            </summary>
        </member>
        <member name="M:Pawnmorph.ThinkNodes.ConditionalSapientAnimal.Satisfied(Verse.Pawn)">
            <summary>
                checks if this think node is satisfied or not
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.ThoughtGroupDefExtension">
            <summary>
            def extension that represents a group a thoughts that should be tried under certain circumstances, the specifics are determined based on what the extension is attached to 
            </summary>
            if attached to a thoughtDef, when trying to add the thoughtDef, the other thoughts will be tried first before adding the given thought 
            <seealso cref="T:Verse.DefModExtension" />
        </member>
        <member name="F:Pawnmorph.ThoughtGroupDefExtension.thoughts">
            <summary>
            list of thoughts that should be tried 
            </summary>
        </member>
        <member name="T:Pawnmorph.Thoughts.Def_AspectThought">
            <summary>
            thought def that has an aspect attached 
            </summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.Def_AspectThought.aspect">
            <summary>
            The aspect to check for 
            </summary>
        </member>
        <member name="M:Pawnmorph.Thoughts.Def_AspectThought.ConfigErrors">
            <summary>
            Get all Configuration Errors with this instance
            </summary>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.FormerHumanMemory">
            <summary>
            memory who's stage depends on the former human status of the pawn 
            </summary>
            <seealso cref="T:RimWorld.Thought_Memory" />
        </member>
        <member name="M:Pawnmorph.Thoughts.FormerHumanMemory.ExposeData">
            <summary>
            save/load data.
            </summary>
        </member>
        <member name="P:Pawnmorph.Thoughts.FormerHumanMemory.LabelCap">
            <summary>
            Gets the label cap.
            </summary>
            <value>
            The label cap.
            </value>
        </member>
        <member name="M:Pawnmorph.Thoughts.FormerHumanMemory.GenerateLabel">
            <summary>
            Generates the label for this thought.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.Thoughts.FormerHumanMemory.CurStageIndex">
            <summary>Gets the index of the current stage.</summary>
            <value>The index of the current stage.</value>
        </member>
        <member name="T:Pawnmorph.Thoughts.FormerHumanPalsWorker">
            <summary>
            situational thought worker for when a former human is bonded to one or more former humans 
            </summary>
            <seealso cref="T:Pawnmorph.Thoughts.FormerHumanSituationalWorkerBase" />
        </member>
        <member name="M:Pawnmorph.Thoughts.FormerHumanPalsWorker.CurrentStateInternal(Verse.Pawn)">
            <summary>
            gets the current state of the thought 
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.AnimalPalsWorker">
            <summary>
            thought worker for when a former human is bonded to a regular animal 
            </summary>
            <seealso cref="T:Pawnmorph.Thoughts.AnimalPalsWorkerBase" />
        </member>
        <member name="M:Pawnmorph.Thoughts.AnimalPalsWorker.CurrentStateInternal(Verse.Pawn)">
            <summary>
            gets the current state of the thought 
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.AnimalPalsWorkerBase">
            <summary>
            base worker for all 'animal pal' thoughts 
            </summary>
            <seealso cref="T:Pawnmorph.Thoughts.FormerHumanSituationalWorkerBase" />
        </member>
        <member name="M:Pawnmorph.Thoughts.AnimalPalsWorkerBase.IsValidFor(Verse.Pawn)">
            <summary>
            Determines whether this thought is valid for the specified pawn.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns>
              <c>true</c> if this thought is valid for the specified pawn; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.Thoughts.AnimalPalsWorkerBase.GetAnimalBonds(Verse.Pawn,System.Collections.Generic.List{System.String},System.Func{Verse.Pawn,System.Boolean})">
            <summary>
            Gets the former human bonded to this
            </summary>
            <param name="formerHuman">The former human.</param>
            <param name="allFHBonded">All fh bonded.</param>
            <param name="selectorFunc">The selector function.</param>
            <exception cref="T:System.ArgumentNullException">
            formerHuman
            or
            allFHBonded
            </exception>
        </member>
        <member name="M:Pawnmorph.Thoughts.AnimalPalsWorkerBase.SetState(Verse.Pawn,System.Collections.Generic.List{System.String})">
            <summary>
            Sets the state of this thought for the given pawn for the given reasons.
            </summary>
            <param name="formerHuman">The former human.</param>
            <param name="reasonList">The reason list.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            formerHuman
            or
            reasonList
            </exception>
        </member>
        <member name="T:Pawnmorph.Thoughts.FormerHumanSituationalWorkerBase">
            <summary>
            abc for former human situational thoughts 
            </summary>
            <seealso cref="T:RimWorld.ThoughtWorker" />
        </member>
        <member name="M:Pawnmorph.Thoughts.FormerHumanSituationalWorkerBase.GetStageIndex(Pawnmorph.SapienceLevel)">
            <summary>
            Gets the index of the stage for the given sapience level 
            </summary>
            <param name="sapienceLevel">The sapience level.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.IFoodThoughtModifier">
            <summary>
            interface for things that affect what thoughts pawns can and cannot get from foods 
            </summary>
        </member>
        <member name="P:Pawnmorph.Thoughts.IFoodThoughtModifier.Priority">
            <summary>
            Gets the priority of this modifier 
            </summary>
            lower values are processed before higher priority ones 
            <value>
            The priority.
            </value>
        </member>
        <member name="M:Pawnmorph.Thoughts.IFoodThoughtModifier.ModifyThoughtsFromFood(Verse.Thing,System.Collections.Generic.List{RimWorld.ThoughtDef})">
            <summary>
            Modifies the thoughts from food.
            </summary>
            <param name="food">The food.</param>
            <param name="thoughts">The list of thoughts already added</param>
        </member>
        <member name="T:Pawnmorph.Thoughts.MutationMemory">
            <summary>
            memory who's stage depends on the pawn's current mutation outlook 
            </summary>
        </member>
        <member name="P:Pawnmorph.Thoughts.MutationMemory.CurStageIndex">
            <summary>Gets the index of the current stage.</summary>
            <value>The index of the current stage.</value>
        </member>
        <member name="T:Pawnmorph.Thoughts.ReactionsHelper">
            <summary>
                static class containing a bunch of helper functions related to pawn thought reactions to stuff
            </summary>
        </member>
        <member name="M:Pawnmorph.Thoughts.ReactionsHelper.GetOpinionThought(Verse.Pawn,Verse.Pawn,Pawnmorph.Thoughts.ReactionsHelper.EventType)">
            <summary>
                get a thought related the reactor pawn's opinion of the original pawn
            </summary>
            <param name="originalPawn"></param>
            <param name="reactorPawn"></param>
            <param name="type"></param>
            <returns>
                the thought def, null if there is no specific thoughtDef or the reactor has no special opinion of the original
                pawn
            </returns>
        </member>
        <member name="M:Pawnmorph.Thoughts.ReactionsHelper.OnPawnTransforms(Verse.Pawn,Verse.Pawn,Pawnmorph.Thoughts.FormerHumanReactionStatus)">
            <summary>
            call when the original pawn transforms into the transformedPawn
            </summary>
            <param name="original">The original.</param>
            <param name="transformedPawn">The transformed pawn.</param>
            <param name="reactionStatus">The reaction status.</param>
        </member>
        <member name="M:Pawnmorph.Thoughts.ReactionsHelper.OnPawnReverted(Verse.Pawn,Verse.Pawn,Pawnmorph.Thoughts.FormerHumanReactionStatus)">
            <summary>
            call when a pawn is reverted from an animal to handle giving the correct thoughts to colonists
            </summary>
            <param name="originalPawn">The original pawn.</param>
            <param name="animalPawn">The animal pawn.</param>
            <param name="reactionStatus">The reaction status of the original pawn</param>
        </member>
        <member name="M:Pawnmorph.Thoughts.ReactionsHelper.OnPawnPermFeral(Verse.Pawn,Verse.Pawn,Pawnmorph.Thoughts.FormerHumanReactionStatus)">
            <summary>
            call when an animal goes permanently feral to handle giving the correct thoughts to colonists
            </summary>
            <param name="originalPawn">The original pawn.</param>
            <param name="animalPawn">The animal pawn.</param>
            <param name="reactionStatus">The reaction status.</param>
            <exception cref="T:System.ArgumentNullException">originalPawn
            or
            animalPawn</exception>
        </member>
        <member name="M:Pawnmorph.Thoughts.ReactionsHelper.OnPawnsMerged(Verse.Pawn,System.Boolean,Verse.Pawn,System.Boolean,Verse.Pawn)">
            <summary>
                call when 2 pawns are merged into one meld/merge to handle giving the correct thoughts to colonists
            </summary>
            <param name="merge0">the first pawn of the merge</param>
            <param name="wasPrisoner0">if the first pawn was a prisoner</param>
            <param name="merge1">the second pawn of the merge</param>
            <param name="wasPrisoner1">if the second pawn was a prisoner</param>
            <param name="animalPawn">the resulting animal pawn</param>
        </member>
        <member name="T:Pawnmorph.Thoughts.FormerHumanReactionStatus">
            <summary>
            enum for tracking the original status of a transformed pawn for colonist reactions 
            </summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.FormerHumanReactionStatus.Wild">
            <summary>
            The original status of the former human is unknown 
            </summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.FormerHumanReactionStatus.Colonist">
            <summary>
            The original pawn was a colonist 
            </summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.FormerHumanReactionStatus.Prisoner">
            <summary>
            the original pawn was a prisoner 
            </summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.FormerHumanReactionStatus.Guest">
            <summary>
            The original pawn was a guest 
            </summary>
        </member>
        <member name="T:Pawnmorph.Thoughts.RelationshipDefExtension">
            <summary>
            extension info to add onto Relationships 
            </summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.RelationshipDefExtension.transformThought">
            <summary>the thought for when the male variant of this relation ship is tf'd </summary>
            ex: when a husband is transformed 
        </member>
        <member name="F:Pawnmorph.Thoughts.RelationshipDefExtension.transformThoughtFemale">
            <summary>
            the thought for when the female variant of this relationship is transformed 
            </summary>
            ex: when a wife is transformed 
        </member>
        <member name="F:Pawnmorph.Thoughts.RelationshipDefExtension.revertedThought">
            <summary>The reverted thought for the male variant</summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.RelationshipDefExtension.revertedThoughtFemale">
            <summary>
            The reverted thought for the female variant 
            </summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.RelationshipDefExtension.permanentlyFeral">
            <summary>the thought for when the pawn goes permanently feral</summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.RelationshipDefExtension.permanentlyFeralFemale">
            <summary>
            the female variant thought for when the pawn 
            </summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.RelationshipDefExtension.mergedThoughtFemale">
            <summary>
            the thought for when the female variant is merged 
            </summary>
        </member>
        <member name="F:Pawnmorph.Thoughts.RelationshipDefExtension.mergedThought">
            <summary>the thought for when the male variant is merged</summary>
        </member>
        <member name="T:Pawnmorph.Thoughts.SapienceMemory">
            <summary>
            memory who's stage depends on the pawn's sapience 
            </summary>
            <seealso cref="T:RimWorld.Thought_Memory" />
        </member>
        <member name="P:Pawnmorph.Thoughts.SapienceMemory.CurStageIndex">
            <summary>
            Gets the index of the current stage.
            </summary>
            <value>
            The index of the current stage.
            </value>
        </member>
        <member name="T:Pawnmorph.Thoughts.ThoughtDefOfs">
            <summary>
            static class containing default/frequently used thoughtDefs 
            </summary>
        </member>
        <member name="T:Pawnmorph.Thoughts.ThoughtWorker_EtherHediff">
            <summary>
            thought worker for a thought that is active when a certain hediff is present, and who's stage depends on the ether state of the pawn 
            </summary>
        </member>
        <member name="M:Pawnmorph.Thoughts.ThoughtWorker_EtherHediff.CurrentStateInternal(Verse.Pawn)">
            <summary>Gets the current thought state of the given pawn.</summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Thought_EtherMemory">
            <summary>
            a memory thought that depends in some way on the etherstate of it's associated pawn 
            </summary>
        </member>
        <member name="P:Pawnmorph.Thoughts.Thought_EtherMemory.CurStageIndex">
            <summary>Gets the index of the current stage.</summary>
            <value>The index of the current stage.</value>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_BeastMaster">
            <summary>
                thought worker for the beast master aspect
            </summary>
            <seealso cref="T:RimWorld.ThoughtWorker" />
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_BeastMaster.CurrentStateInternal(Verse.Pawn)">
            <summary>
                Gets the current thought state
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_BodyPuristDisgust">
            <summary>
            thought worker for pawns that have the body purist to add opinions about other pawns with mutations 
            </summary>
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_BodyPuristDisgust.CurrentSocialStateInternal(Verse.Pawn,Verse.Pawn)">
            <summary>gets the current state of the thought with regards to the given pawns</summary>
            <param name="p">The pawn that has the thought</param>
            <param name="otherPawn">The pawn the thought is about</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_FHNaked">
            <summary>
            thought worker for former human naked thoughts 
            </summary>
            <seealso cref="T:RimWorld.ThoughtWorker" />
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_FHNaked.CurrentStateInternal(Verse.Pawn)">
            <summary>
            Currents the state internal.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_FormerHuman">
            <summary>
            thought worker to give former humans a constant 'i'm an animal now' thought 
            </summary>
            <seealso cref="T:RimWorld.ThoughtWorker" />
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_FormerHuman.CurrentStateInternal(Verse.Pawn)">
            <summary>
            gets the current thought state for the pawn 
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_FormerHumanHediff">
            <summary>
            thought worker for activating a thought for former humans when they have a specific hediff
            </summary>
            <seealso cref="T:RimWorld.ThoughtWorker" />
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_FormerHumanHediff.CurrentStateInternal(Verse.Pawn)">
            <summary>
            Gets the current thought state 
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_FurryAppreciation">
            <summary>
            thought worker for the furry mutation appreciation thought
            </summary>
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_FurryAppreciation.CurrentSocialStateInternal(Verse.Pawn,Verse.Pawn)">
            <summary>gets the current thought state for the given pawns</summary>
            <param name="p">The pawn that is having the thought</param>
            <param name="otherPawn">The pawn the thought is about</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_HasAspect">
            <summary>
            aspect worker for a thought that appears when the pawn has a certain aspect 
            </summary>
        </member>
        <member name="P:Pawnmorph.Thoughts.Worker_HasAspect.Def">
            <summary>Gets the definition.</summary>
            <value>The definition.</value>
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_HasAspect.CurrentStateInternal(Verse.Pawn)">
            <summary>gets the current thought state of the given pawn</summary>
            <param name="p">The pawn</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_HasMutations">
            <summary>
            thought worker who's state depends on how many mutations a pawn has 
            </summary>
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_HasMutations.CurrentStateInternal(Verse.Pawn)">
            <summary>
            return the thought state for the given pawn 
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.MorphMemory">
            <summary>
            a memory who's stage is dependent on if the pawn is a given morph
            </summary>
            <seealso cref="T:RimWorld.Thought_Memory" />
        </member>
        <member name="P:Pawnmorph.Thoughts.MorphMemory.CurStageIndex">
            <summary>Gets the index of the current stage.</summary>
            <value>The index of the current stage.</value>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_HediffTrait">
            <summary> Thought worker that works like ThoughtWorker_Hediff except is also respects traits. </summary>
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_HediffTrait.CurrentStateInternal(Verse.Pawn)">
            <summary>Gets the current thought state of the given pawn</summary>
            <param name="p">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_HediffTrait.CheckTraits(Verse.Pawn)">
            <summary> Check to make sure that the pawn's traits allow for the thought to be active. </summary>
            <returns> If traits allow the thought can be active. </returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_MergedPawn">
            <summary>
            thought worker for merged pawns 
            </summary>
            <seealso cref="T:RimWorld.ThoughtWorker" />
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_MergedPawn.CurrentStateInternal(Verse.Pawn)">
            <summary>
            gets the current state of this thought for the given pawn
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_MorphFrustrated">
            <summary>
            thought worker for the 'morph' frustrated thought
            </summary>
            <seealso cref="T:RimWorld.ThoughtWorker" />
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_MorphFrustrated.CurrentStateInternal(Verse.Pawn)">
            <summary>
            gets the current thought state of the given pawn.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_SapientNaked">
            <summary>
            worker for giving sapience specific thought for when a pawn is naked 
            </summary>
            <seealso cref="T:Pawnmorph.Thoughts.Worker_Sapience" />
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_SapientNaked.CurrentStateInternal(Verse.Pawn)">
            <summary>
            Currents the state internal.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_Sapience">
            <summary>
            thought worker for giving pawns thoughts if they are in a sapience state 
            </summary>
            <seealso cref="T:RimWorld.ThoughtWorker" />
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_Sapience.CurrentStateInternal(Verse.Pawn)">
            <summary>
            Currents the state internal.
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_SapientAnimalBondedMaster">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_SapientAnimalBondedMaster.CurrentStateInternal(Verse.Pawn)">
            <summary>
            gets the current state .
            </summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Thoughts.Worker_SapientAnimalBondedNonMaster">
            <summary>
            
            </summary>
        </member>
        <member name="M:Pawnmorph.Thoughts.Worker_SapientAnimalBondedNonMaster.CurrentStateInternal(Verse.Pawn)">
             <summary>
            gets the current state .
             </summary>
             <param name="p">The p.</param>
             <returns></returns>
        </member>
        <member name="T:Pawnmorph.ThoughtWorker_HasEsotericBodyPart">
            <summary>
            thought worker that depends on if the pawn has a specific number of mutations 
            </summary>
            <seealso cref="T:RimWorld.ThoughtWorker" />
        </member>
        <member name="M:Pawnmorph.ThoughtWorker_HasEsotericBodyPart.CurrentStateInternal(Verse.Pawn)">
            <summary>returns the current thought state of the pawn</summary>
            <param name="p">The p.</param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.TransformerUtility">
            A class full of useful methods.
        </member>
        <member name="M:Pawnmorph.TransformerUtility.ScaleInjuriesToNewRace(Verse.Pawn,Verse.ThingDef)">
            <summary>
            Scales all injuries on the current pawn to a new race with a different base health scale 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="newRace">The new race.</param>
            <exception cref="T:System.ArgumentNullException">
            pawn
            or
            newRace
            </exception>
        </member>
        <member name="P:Pawnmorph.TransformerUtility.AllMorphTfs">
            <summary>
            Gets all morph tf hediffs.
            </summary>
            <value>
            All morph TFS.
            </value>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.GetFormerHumanReactionStatus(Verse.Pawn)">
            <summary>
            Gets the former human reaction status of the given original pawn 
            </summary>
            <param name="originalPawn">The original pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.GetAllTransformers(Verse.HediffStage)">
            <summary>
            Gets all pawn transformers in this stage 
            </summary>
            <param name="stage">The stage.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.GetAllTransformers(Verse.HediffDef)">
            <summary>
            Gets all pawn transformers in this hediff def.
            </summary>
            <param name="hediff">The hediff.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">hediff</exception>
        </member>
        <member name="F:Pawnmorph.TransformerUtility.MAX_APPAREL_PDIFF">
            <summary>
            The maximum apparel percent difference. percent differences between old and new size will cause apparel to be completely destroyed 
            </summary>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.ApplyTfDamageToApparel(Verse.Pawn,Verse.ThingDef,Pawnmorph.MutagenDef)">
            <summary>
            applies damage to all apparel the pawn is wearing based on
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="newRace">The new race.</param>
            <param name="mutagen">the mutagen that caused the transformation, if null uses default values for <see cref="T:Pawnmorph.MutagenDamageProperties"/></param>
            <exception cref="T:System.ArgumentNullException">
            pawn
            or
            newRace
            </exception>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.RemoveAllMutations(Verse.Pawn)">
            <summary> Removes all mutations from a pawn (used post reversion). </summary>
            <param name="pawn">The pawn.</param>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.TryGivePostTransformationBondRelations(Verse.Pawn@,Verse.Pawn,Verse.Pawn@)">
            <summary>Tries the give post transformation bond relations.</summary> ???
            <param name="thrumbo">The thrumbo.</param>
            <param name="pawn">The pawn.</param>
            <param name="otherPawn">The other pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.CandidateScorePairs(Verse.Pawn,System.Collections.Generic.List{Verse.Pawn})">
            <summary>Candidates the score pairs.</summary> ???
            <param name="pawn">The pawn.</param>
            <param name="candidateList">The candidate list.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.AddHediffIfNotPermanentlyFeral(Verse.Pawn,Verse.HediffDef)">
            <summary>Adds the hediff if not permanently feral.</summary>
            <param name="pawn">The pawn.</param>
            <param name="hediff">The hediff.</param>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.RemoveHediffIfPermanentlyFeral(Verse.Pawn,Verse.HediffDef)">
            <summary>Removes the hediff if permanently feral.</summary>
            <param name="pawn">The pawn.</param>
            <param name="hediff">The hediff.</param>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.IsAnimalOrMerged(Verse.Pawn)">
            <summary> Returns true if this pawn is currently an animal or merged morph. </summary>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.ConvertAge(Verse.Pawn,Verse.RaceProperties)">
            <summary> Converts the age of the given pawn into an equivalent age of the given race. </summary>
            <param name="originalPawn"> The original pawn. </param>
            <param name="race"> The end race. </param>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.ConvertAge(Verse.RaceProperties,Verse.RaceProperties,System.Single)">
            <summary>
            Converts the age from one race to the equivalent age of another race 
            </summary>
            <param name="originalRace">The original race.</param>
            <param name="endRace">The end race.</param>
            <param name="originalAge">The original age.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            originalRace
            or
            endRace
            </exception>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.ConvertAge(System.Single,System.Single,System.Single)">
            <summary>
            Converts the age from one life expectancy range to another 
            </summary>
            <param name="originalAge">The original age.</param>
            <param name="originalLifeExpectancy">The original life expectancy.</param>
            <param name="newLifeExpectancy">The new life expectancy.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.GenerateRandomPawnFromAnimal(Verse.Pawn)">
            <summary> Generates the random human pawn from a given animal pawn. </summary>
            <param name="animal"> The animal. </param>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.GetTransformedGender(Verse.Pawn,Pawnmorph.TFGender,System.Single)">
            <summary>Gets the transformed gender.</summary>
            <param name="original">The original.</param>
            <param name="forceGender">The force gender.</param>
            <param name="forceGenderChance">The force gender chance.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.CleanUpHumanPawnPostTf(Verse.Pawn,Verse.Hediff)">
            <summary>
                Cleans up all references to the original human pawn after creating the animal pawn. <br />
                This does not call Pawn.DeSpawn.
            </summary>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.GetEtherState(Verse.Pawn)">
            <summary> Get the "ether state" of the pawn (whether they have the ether broken or bonded hediff. </summary>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.TryGainMemory(Verse.Pawn,RimWorld.Thought_Memory,Verse.Pawn,System.Boolean)">
            <summary>
            Try to give this pawn a new memory. <br />
            If pawn does not have needs/mood/thoughts ect this call does nothing.
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="thought">The thought.</param>
            <param name="otherPawn">The other pawn.</param>
            <param name="respectTraits">if ThoughtUtility.CanGetThought should be checked before giving the thought</param>
            <exception cref="T:System.ArgumentNullException">pawn</exception>
        </member>
        <member name="M:Pawnmorph.TransformerUtility.TryGainMemory(Verse.Pawn,RimWorld.ThoughtDef,Verse.Pawn)">
            <summary>
            Try to give this pawn a new memory. <br />
            If pawn does not have needs/mood/thoughts ect this call does nothing.
            </summary>
        </member>
        <member name="T:Pawnmorph.Utilities.Filter`1">
            <summary> Generic class for a filter. </summary>
        </member>
        <member name="F:Pawnmorph.Utilities.Filter`1.filterList">
            <summary>
            the list of entries in the filter 
            </summary>
        </member>
        <member name="F:Pawnmorph.Utilities.Filter`1.isBlackList">
            <summary>
            if this filter is a black list 
            </summary>
        </member>
        <member name="M:Pawnmorph.Utilities.Filter`1.PassesFilter(`0)">
            <summary>
            returns true if the given element passes through the filter 
            </summary>
            <param name="elem"></param>
            <returns></returns>
        </member>
        <member name="T:Pawnmorph.Utilities.HediffCompBase`1">
            <summary> convenient base class for hediff comps that know their properties type. </summary>
        </member>
        <member name="P:Pawnmorph.Utilities.HediffCompBase`1.Props">
            <summary>
            Gets the props.
            </summary>
            <value>
            The props.
            </value>
        </member>
        <member name="T:Pawnmorph.Utilities.HediffCompPropertiesBase`1">
            <summary> Convenient base class for comp properties that know their comp type. </summary>
        </member>
        <member name="M:Pawnmorph.Utilities.HediffCompPropertiesBase`1.#ctor">
            <summary>
            create a new instance of this type 
            </summary>
        </member>
        <member name="T:Pawnmorph.Utilities.HediffDefUtilities">
            <summary> Collection of hediff def related utility functions. </summary>
        </member>
        <member name="M:Pawnmorph.Utilities.HediffDefUtilities.GetAllHediffGivers(Verse.HediffDef)">
            <summary> Get all hediff givers attached to this HediffDef. </summary>
            <exception cref="T:System.ArgumentNullException">hediffDef is null</exception>
        </member>
        <member name="T:Pawnmorph.Utilities.LinqUtils">
            <summary>
            utilities around IEnumerable interface 
            </summary>
        </member>
        <member name="M:Pawnmorph.Utilities.LinqUtils.MakeSafe``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            if the given enumerable is null returns an empty enumerable, otherwise does nothing to the given enumerable 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Utilities.LinqUtils.AddToKey``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            Adds the element to the list with the given key, or creates a new list if the key is not in the dictionary already 
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TElem">The type of the elem.</typeparam>
            <param name="dict">The dictionary.</param>
            <param name="key">The key.</param>
            <param name="elem">The elem.</param>
            <exception cref="T:System.ArgumentNullException">
            dict
            or
            key
            </exception>
        </member>
        <member name="M:Pawnmorph.Utilities.LinqUtils.ContainsHediff(System.Collections.Generic.IEnumerable{Verse.HediffDef},Verse.Hediff)">
            <summary>
            Determines whether this enumeration of hediffDefs contains the def of the given hediff.
            </summary>
            <param name="enumerable">The enumerable.</param>
            <param name="hediff">The hediff.</param>
            <returns>
              <c>true</c> if this enumeration of hediffDefs contains the def of the given hediff; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            enumerable
            or
            hediff
            </exception>
        </member>
        <member name="M:Pawnmorph.Utilities.LinqUtils.RandElement``1(System.Collections.Generic.IList{``0},``0)">
            <summary>gets a random element from the list</summary>
            <typeparam name="T"></typeparam>
            <param name="lst">The LST.</param>
            <param name="defaultVal">The default value.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">lst</exception>
        </member>
        <member name="M:Pawnmorph.Utilities.LinqUtils.In``1(``0,``0)">
            <summary> Check if this instance is in the given collection. </summary>
            <param name="thing"> The thing. </param>
            <param name="other"> The other. </param>
            
        </member>
        <member name="M:Pawnmorph.Utilities.LinqUtils.In``1(``0,``0,``0)">
            <summary> Check if this instance is in the given collection. </summary>
            <param name="thing"> The thing. </param>
            <param name="other1"> The other1. </param>
            <param name="other2"> The other2. </param>
        </member>
        <member name="M:Pawnmorph.Utilities.LinqUtils.In``1(``0,``0,``0,``0)">
            <summary> Check if this instance is in the given collection. </summary>
            <param name="thing"> The thing. </param>
            <param name="other1"> The other1. </param>
            <param name="other2"> The other2. </param>
            <param name="other3"> The other3. </param>
        </member>
        <member name="M:Pawnmorph.Utilities.LinqUtils.In``1(``0,``0[])">
            <summary> Check if this instance is in the given collection. </summary>
            <param name="thing"> The thing. </param>
            <param name="others"> The others. </param>
        </member>
        <member name="T:Pawnmorph.Utilities.PatchUtilities">
            <summary>
            static class containing various utilities for patching functions 
            </summary>
        </member>
        <member name="P:Pawnmorph.Utilities.PatchUtilities.CommonTranspiler">
            <summary>
            MethodInfo for a common transpiler method that replaces all instances of RaceProps.Animal/Tooluser/Humanlike
            with the FormerHumanUtilities equivalents 
            </summary>
        </member>
        <member name="M:Pawnmorph.Utilities.PatchUtilities.IsCompilerGenerated(System.Type)">
            <summary>
            Determines whether this type is compiler generated.
            </summary>
            <param name="type">The type.</param>
            <returns>
              <c>true</c> if this type is compiler generated; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">type</exception>
        </member>
        <member name="M:Pawnmorph.Utilities.PatchUtilities.MassIlPatchType(HarmonyLib.Harmony,System.Type,System.Reflection.MethodInfo,System.Predicate{System.Reflection.MethodInfo})">
            <summary>
            patches every method in the given type, including sub types and delegates, with the given transpiler 
            </summary>
            <param name="harmony">The harmony.</param>
            <param name="type">The type.</param>
            <param name="transpiler">The transpiler.</param>
            <param name="methodInfoPredicate">The method information predicate.</param>
            <exception cref="T:System.ArgumentNullException">
            harmony
            or
            type
            or
            transpiler
            </exception>
        </member>
        <member name="M:Pawnmorph.Utilities.PatchUtilities.ILPatchCommonMethods(HarmonyLib.Harmony,System.Reflection.MethodInfo)">
            <summary>
            patch the given method,  replacing all instances of RaceProps.Animal/Tooluser/Humanlike
            with the FormerHumanUtilities equivalents 
            </summary>
            <param name="harmony"></param>
            <param name="targetMethod"></param>
        </member>
        <member name="M:Pawnmorph.Utilities.PatchUtilities.HasSignature(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            Determines whether this method has the given type signature 
            </summary>
            <param name="methodInfo">The method information.</param>
            <param name="types">The types.</param>
            <returns>
              <c>true</c> if the specified method information has signature; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            methodInfo
            or
            types
            </exception>
        </member>
        <member name="P:Pawnmorph.Utilities.PatchUtilities.RimworldIsAnimalMethod">
            <summary>
            gets <see cref="P:Verse.RaceProperties.Animal"/> getter method
            </summary>
        </member>
        <member name="P:Pawnmorph.Utilities.PatchUtilities.IsAnimalMethod">
            <summary>
            Gets method info for <see cref="M:Pawnmorph.FormerHumanUtilities.IsAnimal(Verse.Pawn)"/>
            </summary>
            <value>
            The is animal method.
            </value>
        </member>
        <member name="P:Pawnmorph.Utilities.PatchUtilities.IsHumanoidMethod">
            <summary>
            Gets the method info for <see cref="M:Pawnmorph.FormerHumanUtilities.IsHumanlike(Verse.Pawn)"/>
            </summary>
            <value>
            The is humanoid method.
            </value>
        </member>
        <member name="P:Pawnmorph.Utilities.PatchUtilities.IsToolUserMethod">
            <summary>
            Gets the method info for <see cref="M:Pawnmorph.FormerHumanUtilities.IsToolUser(Verse.Pawn)"/>
            </summary>
            <value>
            The is tool user method.
            </value>
        </member>
        <member name="P:Pawnmorph.Utilities.PatchUtilities.GetRacePropsMethod">
            <summary>
            Gets the get race props method.
            </summary>
            <value>
            The get race props method.
            </value>
        </member>
        <member name="M:Pawnmorph.Utilities.PatchUtilities.SubstituteFormerHumanMethods(System.Collections.Generic.IList{HarmonyLib.CodeInstruction})">
            <summary>
            substitutes all instances of RaceProps Humanlike, Animal, and Tooluser with their equivalent in FormerHumanUtilities
            </summary>
            <param name="codeInstructions">The code instructions.</param>
            <exception cref="T:System.ArgumentNullException">codeInstructions</exception>
        </member>
        <member name="M:Pawnmorph.Utilities.PatchUtilities.SubstituteFormerHumanMethodsPatch(System.Collections.Generic.IEnumerable{HarmonyLib.CodeInstruction})">
            <summary>
            substitutes all instances of RaceProps Humanlike, Animal, and Tooluser with their equivalent in FormerHumanUtilities
            </summary>
            <param name="instructions">The code instructions.</param>
            <exception cref="T:System.ArgumentNullException">codeInstructions</exception>
        </member>
        <member name="T:Pawnmorph.Utilities.RandUtilities">
            <summary>
            a collection of utilities around random functions 
            </summary>
        </member>
        <member name="M:Pawnmorph.Utilities.RandUtilities.GetUniformProbability(System.Single,System.Single)">
            <summary>
            Gets the uniform probability of some event checked every so often with a set mean time to happen 
            </summary>
            <param name="meanTimeToHappen">The mean time to happen.</param>
            <param name="checkPeriod">how often the event is checked</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Utilities.RandUtilities.MtbDaysEventOccured(System.Single,System.Single)">
            <summary>
            checks if an event, with the given mtb in days, has occured 
            </summary>
            <param name="days">The days.</param>
            <param name="checkDuration">how often this check occurs in ticks</param>
            <returns></returns>
        </member>
        <member name="P:Pawnmorph.Utilities.RandUtilities.MPSafeSeed">
            <summary>Gets the multiplayer safe seed.</summary>
            <value>The mp safe seed.</value>
        </member>
        <member name="M:Pawnmorph.Utilities.RandUtilities.PushState">
            <summary>
            If the game is in multiplayer pushes a deterministic seed to Rand. <br />
            If not in multiplayer this call does nothing .
            </summary>
        </member>
        <member name="M:Pawnmorph.Utilities.RandUtilities.PopState">
            <summary>
            Pops the Rand state if the game is in multiplayer. <br />
            This does nothing if the game is not in multiplayer.
            </summary>
        </member>
        <member name="M:Pawnmorph.Utilities.RandUtilities.MPSafeMTBEventOccurs(System.Single,System.Single,System.Single)">
            <summary> Multiplayer save version of Rand.MTBEventOccurs  </summary>
            <param name="mtb"> The MTB. </param>
            <param name="mtbUnit"> The MTB unit. </param>
            <param name="checkDuration"> Duration of the check. </param>
        </member>
        <member name="M:Pawnmorph.Utilities.RandUtilities.ZorShift(System.Int32)">
            <summary> Preform a zorShift on the given int value. </summary>
            <param name="val"> The value. </param>
        </member>
        <member name="T:Pawnmorph.Utilities.SkillMod">
            <summary>
            represents a modification to a pawn's skills
            </summary>
        </member>
        <member name="F:Pawnmorph.Utilities.SkillMod.skillDef">
            <summary>The skill definition to affect</summary>
        </member>
        <member name="F:Pawnmorph.Utilities.SkillMod.addedXp">
            <summary>The added xp</summary>
        </member>
        <member name="F:Pawnmorph.Utilities.SkillMod.passionOffset">
            <summary>The passion offset </summary>
        </member>
        <member name="F:Pawnmorph.Utilities.SkillMod.forcedPassion">
            <summary>The forced passion</summary>
        </member>
        <member name="M:Pawnmorph.Utilities.SkillMod.GetNewPassion(RimWorld.Passion)">
            <summary> The new passion of the skill with this mod. </summary>
        </member>
        <member name="T:Pawnmorph.Utilities.TimeMetrics">
            <summary>
            static class containing time related metrics 
            </summary>
        </member>
        <member name="F:Pawnmorph.Utilities.TimeMetrics.TICKS_PER_DAY">
            <summary>
            The ticks per day
            </summary>
        </member>
        <member name="F:Pawnmorph.Utilities.TimeMetrics.TICKS_PER_HOUR">
            <summary>
            The ticks per hour
            </summary>
        </member>
        <member name="F:Pawnmorph.Utilities.TimeMetrics.TICKS_PER_REAL_SECOND">
            <summary>
            The ticks per real second
            </summary>
            also the tick frequency in hertz 
        </member>
        <member name="F:Pawnmorph.Utilities.TimeMetrics.TICK_PERIOD">
            <summary>
            The tick period in (real) seconds 
            </summary>
        </member>
        <member name="T:Pawnmorph.Utilities.TreeUtilities">
            <summary>
                static container for various tree related utilities
            </summary>
        </member>
        <member name="T:Pawnmorph.Utilities.TreeUtilities.GetChildrenAction`1">
            <summary>
                delegate for getting the children of a root
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node">The root.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Utilities.TreeUtilities.Postorder``1(``0,Pawnmorph.Utilities.TreeUtilities.GetChildrenAction{``0})">
            <summary>
                traverse a tree using the postorder traversal
            </summary>
            <typeparam name="T"></typeparam>
            <param name="root">The root.</param>
            <param name="getChildren">The get children.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                root
                or
                getChildren
            </exception>
        </member>
        <member name="M:Pawnmorph.Utilities.TreeUtilities.Preorder``1(``0,Pawnmorph.Utilities.TreeUtilities.GetChildrenAction{``0})">
            <summary>traverses the tree in preorder</summary>
            <typeparam name="T"></typeparam>
            <param name="root">The root.</param>
            <param name="getChildrenAction">The get children action.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
                root
                or
                getChildrenAction
            </exception>
        </member>
        <member name="M:Pawnmorph.Utilities.TreeUtilities.PrettyPrintTree``1(``0,Pawnmorph.Utilities.TreeUtilities.GetChildrenAction{``0},System.Func{``0,System.String})">
            <summary>
            prints a pretty tree 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="root">The root.</param>
            <param name="getChildren">The get children.</param>
            <param name="toStringFunc">To string function.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            root
            or
            getChildren
            </exception>
        </member>
        <member name="M:Pawnmorph.Utilities.TreeUtilities.RandomizedSpreadOrder(Verse.BodyDef,System.Collections.Generic.List{Verse.BodyPartRecord})">
            <summary>add body part defs in to the given list in order of a 'randomized spread traversal' of the given body def</summary>
            <param name="bodyDef">The body definition.</param>
            <param name="outList">The out list.</param>
            <exception cref="T:System.ArgumentNullException">
                bodyDef
                or
                outList
            </exception>
        </member>
        <member name="T:Pawnmorph.WeatherOverlay_Mutagen">
            <summary>
            class for the mutagenic weather overlay 
            </summary>
            <seealso cref="T:Verse.SkyOverlay" />
        </member>
        <member name="M:Pawnmorph.WeatherOverlay_Mutagen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Pawnmorph.WeatherOverlay_Mutagen"/> class.
            </summary>
        </member>
        <member name="T:Pawnmorph.Work.Giver_RecruitSapientAnimal">
            <summary>
            work giver for recruiting a sapient animal
            </summary>
            <seealso cref="T:RimWorld.WorkGiver_InteractAnimal" />
        </member>
        <member name="M:Pawnmorph.Work.Giver_RecruitSapientAnimal.ResetStaticData">
            <summary>
            Resets the static data.
            </summary>
        </member>
        <member name="M:Pawnmorph.Work.Giver_RecruitSapientAnimal.PotentialWorkThingsGlobal(Verse.Pawn)">
            <summary>
            Potentials the work things global.
            </summary>
            <param name="pawn">The pawn.</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Work.Giver_RecruitSapientAnimal.ShouldSkip(Verse.Pawn,System.Boolean)">
            <summary>
            determines if this work giver should be skipped 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="forced">if set to <c>true</c> [forced].</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Work.Giver_RecruitSapientAnimal.JobOnThing(Verse.Pawn,Verse.Thing,System.Boolean)">
            <summary>
            returns the job for the given pawn on the given thing 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="t">The t.</param>
            <param name="forced">if set to <c>true</c> [forced].</param>
            <returns></returns>
        </member>
        <member name="M:Pawnmorph.Work.Giver_RecruitSapientAnimal.CanInteractWithAnimal(Verse.Pawn,Verse.Pawn,System.Boolean)">
            <summary>
            Determines whether this instance with the specified pawn [can interact with animal] 
            </summary>
            <param name="pawn">The pawn.</param>
            <param name="animal">The animal.</param>
            <param name="forced">if set to <c>true</c> [forced].</param>
            <returns>
              <c>true</c> if this instance with the specified pawn  [can interact with animal]  otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Pawnmorph.Work.Giver_TendToSapientAnimal">
            <summary>
            work giver to make pawns tend sapient animals 
            </summary>
            <seealso cref="T:RimWorld.WorkGiver" />
        </member>
        <member name="T:EtherGun.CompEtherExplosive">
            <summary>
            comp for creating a mutagenic explosion 
            </summary>
        </member>
        <member name="P:EtherGun.CompEtherExplosive.Props">
            <summary>
            the comp properties 
            </summary>
        </member>
        <member name="M:EtherGun.CompEtherExplosive.CompTick">
            <summary>
            called every tick after it's parent updates 
            </summary>
        </member>
        <member name="T:EtherGun.CompProperties_EtherExplosive">
            <summary>
            properties for the ether explosive comp 
            </summary>
        </member>
        <member name="F:EtherGun.CompProperties_EtherExplosive.AddHediffChance">
            <summary>
            the chance to add the tf hediff 
            </summary>
        </member>
        <member name="F:EtherGun.CompProperties_EtherExplosive.HediffToAdd">
            <summary>
            the hediff to add 
            </summary>
        </member>
        <member name="M:EtherGun.CompProperties_EtherExplosive.#ctor">
            <summary>
            create a new instance of this class 
            </summary>
        </member>
        <member name="F:EtherGun.CompProperties_EtherExplosive.raceBlackList">
            <summary> List of pawnDefs to not allow the hediff to be given to. </summary>
        </member>
        <member name="M:EtherGun.CompProperties_EtherExplosive.CanAddHediffToPawn(Verse.Pawn)">
            <summary> Check if the given pawn is a valid target to add the hediff to. </summary>
        </member>
        <member name="T:EtherGun.DeathActionWorker_MutagenicExplosion">
            <summary>
            death worker that causes a mutagenic explosion upon death 
            </summary>
            <seealso cref="T:Verse.DeathActionWorker" />
        </member>
        <member name="P:EtherGun.DeathActionWorker_MutagenicExplosion.DeathRules">
            <summary>
            Gets the death rules.
            </summary>
            <value>
            The death rules.
            </value>
        </member>
        <member name="P:EtherGun.DeathActionWorker_MutagenicExplosion.DangerousInMelee">
            <summary>
            Gets a value indicating whether this instance is dangerous in melee.
            </summary>
            <value>
              <c>true</c> if this instance is dangerous in melee; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:EtherGun.DeathActionWorker_MutagenicExplosion.PawnDied(Verse.Corpse)">
            <summary>
            called when the attached pawn dies.
            </summary>
            <param name="corpse">The corpse.</param>
        </member>
        <member name="T:EtherGun.ThingDef_EtherBullet">
            <summary>
            thing def for the ether bullet 
            </summary>
            <seealso cref="T:Verse.ThingDef" />
        </member>
        <member name="F:EtherGun.ThingDef_EtherBullet.AddHediffChance">
            <summary>chance to apply the hediff</summary>
        </member>
        <member name="F:EtherGun.ThingDef_EtherBullet.HediffToAdd">
            <summary>The hediff to add</summary>
        </member>
        <member name="F:EtherGun.ThingDef_EtherBullet.raceBlackList">
            <summary> List of pawnDefs to not allow the hediff to be given to. </summary>
        </member>
        <member name="M:EtherGun.ThingDef_EtherBullet.CanAddHediffToPawn(Verse.Pawn)">
            <summary> Check if the given pawn is a valid target to add the hediff to.</summary>
        </member>
        <member name="T:EtherGun.Projectile_EtherBullet">
            <summary>
            bullet that are mutagenic in nature 
            </summary>
            <seealso cref="T:RimWorld.Bullet" />
        </member>
        <member name="M:EtherGun.Projectile_EtherBullet.Impact(Verse.Thing)">
            <summary>
            called when this instance impacts the specified thing.
            </summary>
            <param name="hitThing">The hit thing.</param>
        </member>
        <member name="T:EtherGun.Projectile_TaggingBullet">
            <summary>
            bullet for the tagging rifle, adds creatures to the chamber database on hit 
            </summary>
            <seealso cref="T:RimWorld.Bullet" />
        </member>
        <member name="M:EtherGun.Projectile_TaggingBullet.Impact(Verse.Thing)">
            <summary>
            called when this instance impacts the given thing 
            </summary>
            <param name="hitThing">The hit thing.</param>
        </member>
        <member name="T:EtherGun.TransformPawn">
            <summary>
            static class containing tranformation related functions 
            </summary>
        </member>
        <member name="M:EtherGun.TransformPawn.ApplyHediff(Verse.Pawn,Verse.Map,Verse.HediffDef,System.Single)">
            <summary>Applies the hediff.</summary>
            <param name="pawn">The pawn.</param>
            <param name="map">The map.</param>
            <param name="hediff">The hediff.</param>
            <param name="chance">The chance.</param>
        </member>
        <member name="M:EtherGun.TransformPawn.ApplyHediff(System.Collections.Generic.List{Verse.Pawn},Verse.Map,Verse.HediffDef,System.Single)">
            <summary>Applies the hediff.</summary>
            <param name="pawns">The pawns.</param>
            <param name="map">The map.</param>
            <param name="hediff">The hediff.</param>
            <param name="chance">The chance.</param>
        </member>
    </members>
</doc>
